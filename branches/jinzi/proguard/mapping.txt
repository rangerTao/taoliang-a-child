com.duole.Duole -> com.duole.Duole:
    com.duole.Duole appref -> a
    com.duole.pojos.DuoleCountDownTimer gameCountDown -> b
    com.duole.pojos.DuoleCountDownTimer restCountDown -> c
    android.widget.LinearLayout llPageDivider -> d
    android.view.View view -> e
    android.graphics.Bitmap bmp -> f
    android.graphics.Bitmap bmp2 -> g
    com.duole.Duole$PageDiv pageDiv -> h
    com.duole.widget.ScrollLayout mScrollLayout -> i
    android.content.Context mContext -> q
    com.duole.service.BackgroundRefreshService mBoundService -> l
    java.util.ArrayList alAIA -> r
    android.widget.ProgressBar pbEnTime -> s
    int curPageDiv -> m
    com.duole.pojos.asset.Asset assItem -> n
    android.content.ServiceConnection mConnection -> o
    android.content.BroadcastReceiver mountedReceiver -> t
    android.widget.AdapterView$OnItemClickListener listener -> p
    void onCreate(android.os.Bundle) -> onCreate
    void initContents() -> e
    void initCountDownTimer() -> f
    void setBackground() -> g
    void initViews() -> h
    void setPageDividerSelected(int) -> a
    void getMusicList(java.util.ArrayList) -> a
    void startItem(com.duole.pojos.asset.Asset) -> a
    void startActivityByPkgName$552c4e01() -> i
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onDestroy() -> onDestroy
    void onResume() -> onResume
    void access$0(com.duole.Duole,java.lang.String,java.lang.String,java.lang.String) -> a
    void access$1(com.duole.Duole,com.duole.pojos.asset.Asset) -> a
com.duole.Duole$1 -> com.duole.f:
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.duole.Duole$2 -> com.duole.g:
    com.duole.Duole this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.duole.Duole$3 -> com.duole.b:
    com.duole.Duole this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.duole.Duole$4 -> com.duole.c:
    com.duole.Duole this$0 -> a
    void scrolled$255f295(int) -> a
com.duole.Duole$5 -> com.duole.d:
    com.duole.Duole this$0 -> a
    void onTick$25666f4(long) -> b
    void onFinish() -> d
com.duole.Duole$6 -> com.duole.e:
    com.duole.Duole this$0 -> a
    void onTick$25666f4(long) -> b
    void onFinish() -> d
com.duole.Duole$7 -> com.duole.a:
    com.duole.Duole this$0 -> a
    int val$index -> b
    void run() -> run
com.duole.Duole$PageDiv -> com.duole.Duole$PageDiv:
    android.widget.ImageView ivPageDiv -> a
    com.duole.Duole this$0 -> b
com.duole.R -> com.duole.R:
com.duole.R$anim -> com.duole.R$anim:
com.duole.R$array -> com.duole.R$array:
com.duole.R$attr -> com.duole.R$attr:
com.duole.R$drawable -> com.duole.R$drawable:
com.duole.R$id -> com.duole.R$id:
com.duole.R$layout -> com.duole.R$layout:
com.duole.R$string -> com.duole.R$string:
com.duole.R$style -> com.duole.R$style:
com.duole.R$xml -> com.duole.R$xml:
com.duole.activity.BaseActivity -> com.duole.activity.BaseActivity:
    java.lang.String pkgName -> j
    long playStart -> a
    java.lang.String resourceId -> b
    android.os.Handler mHandler -> k
    void startMusicPlay() -> a
    void SetFullScreen() -> b
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean forceStopActivity() -> c
    boolean uploadGamePeriod() -> d
com.duole.activity.BaseActivity$1 -> com.duole.activity.w:
    com.duole.activity.BaseActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.duole.activity.CheckUpdateActivity -> com.duole.activity.CheckUpdateActivity:
    com.duole.activity.CheckUpdateActivity appref -> a
    android.widget.ProgressBar pbUpdate -> b
    android.widget.RelativeLayout rlContent -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onAttachedToWindow() -> onAttachedToWindow
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onDestroy() -> onDestroy
com.duole.activity.CheckUpdateActivity$1 -> com.duole.activity.a:
    com.duole.activity.CheckUpdateActivity this$0 -> a
    org.json.JSONObject val$json -> b
    void onClick(android.view.View) -> onClick
com.duole.activity.CheckUpdateActivity$2 -> com.duole.activity.c:
    com.duole.activity.CheckUpdateActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.duole.activity.CheckUpdateActivity$3 -> com.duole.activity.b:
    com.duole.activity.CheckUpdateActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.duole.activity.CheckUpdateActivity$UpdateTask -> com.duole.activity.n:
    com.duole.activity.CheckUpdateActivity this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.duole.activity.CheckUpdateActivity$UpdateTask$1 -> com.duole.activity.k:
    com.duole.activity.CheckUpdateActivity$UpdateTask this$1 -> a
    org.json.JSONObject val$json -> b
    void run() -> run
com.duole.activity.CheckUpdateActivity$UpdateTask$2 -> com.duole.activity.j:
    com.duole.activity.CheckUpdateActivity$UpdateTask this$1 -> a
    void run() -> run
com.duole.activity.PasswordActivity -> com.duole.activity.PasswordActivity:
    com.duole.activity.PasswordActivity appref -> a
    android.widget.Button btnNegative -> f
    android.widget.Button btnPositive -> g
    android.widget.TextView tvTipOldPass -> h
    android.widget.TextView tvNewPass -> i
    android.widget.TextView tvNewPassConfirm -> l
    android.widget.EditText etOldPass -> b
    android.widget.EditText etNewPass -> c
    android.widget.EditText etNewPassConfirm -> d
    java.lang.String passwd -> e
    void onCreate(android.os.Bundle) -> onCreate
    void onAttachedToWindow() -> onAttachedToWindow
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
com.duole.activity.PasswordActivity$1 -> com.duole.activity.r:
    com.duole.activity.PasswordActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.duole.activity.PasswordActivity$1$1 -> com.duole.activity.h:
    com.duole.activity.PasswordActivity$1 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.duole.activity.PasswordActivity$2 -> com.duole.activity.p:
    com.duole.activity.PasswordActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.duole.activity.PasswordActivity$2$1 -> com.duole.activity.o:
    com.duole.activity.PasswordActivity$2 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.duole.activity.PasswordActivity$2$2 -> com.duole.activity.l:
    com.duole.activity.PasswordActivity$2 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.duole.activity.PasswordActivity$2$3 -> com.duole.activity.m:
    com.duole.activity.PasswordActivity$2 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.duole.activity.PasswordActivity$3 -> com.duole.activity.q:
    com.duole.activity.PasswordActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.duole.activity.PlayerBaseActivity -> com.duole.activity.PlayerBaseActivity:
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onAttachedToWindow() -> onAttachedToWindow
com.duole.activity.SystemConfigActivity -> com.duole.activity.SystemConfigActivity:
    boolean isGetted -> a
    android.preference.Preference preID -> b
    android.preference.Preference preGettingUserInfo -> l
    android.preference.PreferenceCategory pcUserInfo -> c
    android.preference.Preference preStorage -> m
    android.preference.CheckBoxPreference preWifi -> d
    android.preference.Preference preListWifi -> e
    android.preference.Preference preCheckUpdate -> n
    android.preference.Preference preTimeEclipsed -> o
    android.preference.Preference preSleep -> p
    android.net.wifi.WifiManager wifiManager -> f
    android.net.wifi.WifiInfo wifiInfo -> g
    java.util.List scanResults -> h
    android.app.AlertDialog adWifi -> i
    android.app.AlertDialog wifiPass -> j
    com.duole.activity.SystemConfigActivity appref -> k
    android.os.Handler handler -> q
    android.content.BroadcastReceiver wifiReceiver -> r
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void getUserInfo() -> a
    void onAttachedToWindow() -> onAttachedToWindow
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onDestroy() -> onDestroy
    boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference) -> onPreferenceTreeClick
    long countUp(int,int) -> a
    void access$0(com.duole.activity.SystemConfigActivity,android.net.NetworkInfo$DetailedState) -> a
com.duole.activity.SystemConfigActivity$1 -> com.duole.activity.s:
    com.duole.activity.SystemConfigActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.duole.activity.SystemConfigActivity$2 -> com.duole.activity.u:
    com.duole.activity.SystemConfigActivity this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.duole.activity.SystemConfigActivity$3 -> com.duole.activity.t:
    com.duole.activity.SystemConfigActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.duole.activity.SystemConfigActivity$4 -> com.duole.activity.v:
    com.duole.activity.SystemConfigActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.duole.activity.SystemConfigActivity$4$1 -> com.duole.activity.x:
    com.duole.activity.SystemConfigActivity$4 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.duole.activity.SystemConfigActivity$4$2 -> com.duole.activity.y:
    com.duole.activity.SystemConfigActivity$4 this$1 -> a
    android.widget.EditText val$etPassword -> b
    android.net.wifi.ScanResult val$sr -> c
    void onClick(android.content.DialogInterface,int) -> onClick
com.duole.activity.SystemConfigActivity$GetUserInfoTask -> com.duole.activity.i:
    com.duole.activity.SystemConfigActivity this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.duole.activity.SystemTweakActivity -> com.duole.activity.SystemTweakActivity:
    com.duole.activity.SystemTweakActivity appref -> a
    android.net.wifi.WifiManager wifiManager -> b
    android.net.wifi.WifiInfo wifiInfo -> f
    android.media.AudioManager am -> c
    android.widget.TextView wifiStatus -> d
    android.widget.Button btnClose -> g
    android.widget.TextView batteryStatus -> e
    android.content.BroadcastReceiver batteryChangedReceiver -> h
    android.content.BroadcastReceiver wifiReceiver -> i
    void onCreate(android.os.Bundle) -> onCreate
    void detectWifiStatus(android.net.wifi.WifiManager,android.widget.TextView) -> a
    void onClick(android.view.View) -> onClick
    void onPause() -> onPause
    void onAttachedToWindow() -> onAttachedToWindow
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
com.duole.activity.SystemTweakActivity$1 -> com.duole.activity.g:
    com.duole.activity.SystemTweakActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.duole.activity.SystemTweakActivity$2 -> com.duole.activity.e:
    com.duole.activity.SystemTweakActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.duole.activity.SystemTweakActivity$3 -> com.duole.activity.f:
    com.duole.activity.SystemTweakActivity this$0 -> a
    android.widget.SeekBar val$sb -> b
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
com.duole.activity.SystemTweakActivity$4 -> com.duole.activity.d:
    com.duole.activity.SystemTweakActivity this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
com.duole.asynctask.ItemListTask -> com.duole.asynctask.ItemListTask:
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    boolean treatData() -> a
    boolean getSourceList() -> b
com.duole.listener.OnScrolledListener -> com.duole.listener.OnScrolledListener:
    void scrolled$255f295(int) -> a
com.duole.player.FlashPlayerActivity -> com.duole.player.FlashPlayerActivity:
    android.webkit.WebView wvPlay -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    void onDestroy() -> onDestroy
com.duole.player.FlashPlayerActivity$1 -> com.duole.player.i:
    com.duole.player.FlashPlayerActivity this$0 -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
com.duole.player.FlashPlayerActivity$2 -> com.duole.player.j:
    com.duole.player.FlashPlayerActivity this$0 -> a
    boolean onLongClick(android.view.View) -> onLongClick
com.duole.player.MusicPlayerActivity -> com.duole.player.MusicPlayerActivity:
    android.media.MediaPlayer mp -> a
    android.media.MediaPlayer mp2 -> b
    android.widget.RelativeLayout llMain -> l
    java.lang.String url -> m
    int index -> c
    java.lang.String type -> n
    android.widget.Gallery gallery -> o
    com.duole.player.MusicPlayerActivity appref -> d
    android.view.animation.AnimationSet manimationSet -> p
    int homeCount -> q
    android.widget.ProgressBar pbCountDown -> r
    android.util.DisplayMetrics dm -> e
    boolean clicked -> f
    boolean isTopOfStack -> s
    android.widget.Button btnPlay -> g
    android.widget.PopupWindow volumePopup -> h
    android.media.AudioManager am -> i
    android.content.BroadcastReceiver timeOutReceiver -> t
    void onCreate(android.os.Bundle) -> onCreate
    void setMusicData(int) -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onDestroy() -> onDestroy
    void onFocusChange(android.view.View,boolean) -> onFocusChange
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    void onClick(android.view.View) -> onClick
    void musicControl() -> e
    void playMusic() -> f
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onCompletion(android.media.MediaPlayer) -> onCompletion
    void onPause() -> onPause
    void onResume() -> onResume
    void onStop() -> onStop
    void access$0(com.duole.player.MusicPlayerActivity) -> a
com.duole.player.MusicPlayerActivity$1 -> com.duole.player.f:
    com.duole.player.MusicPlayerActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.duole.player.MusicPlayerActivity$2 -> com.duole.player.g:
    com.duole.player.MusicPlayerActivity this$0 -> a
    void run() -> run
com.duole.player.MusicPlayerActivity$3 -> com.duole.player.d:
    int lastX -> a
    int lastY -> b
    int disX -> c
    boolean isClick -> d
    int maxV -> e
    int perDegree -> f
    int tempX -> g
    com.duole.player.MusicPlayerActivity this$0 -> h
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.duole.player.MusicPlayerActivity$4 -> com.duole.player.e:
    com.duole.player.MusicPlayerActivity this$0 -> a
    void onPrepared(android.media.MediaPlayer) -> onPrepared
com.duole.player.MusicPlayerActivity$5 -> com.duole.player.c:
    com.duole.player.MusicPlayerActivity this$0 -> a
    void run() -> run
com.duole.player.SingleMusicPlayerActivity -> com.duole.player.SingleMusicPlayerActivity:
    android.media.MediaPlayer mp -> c
    android.view.View llMain -> d
    android.view.View rl -> a
    java.lang.String url -> e
    android.widget.TextView tvMusicTitle -> b
    int screen_off_timeout -> f
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onResume() -> onResume
com.duole.player.SingleMusicPlayerActivity$1 -> com.duole.player.b:
    int lastX -> a
    int lastY -> b
    com.duole.player.SingleMusicPlayerActivity this$0 -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.duole.player.SingleMusicPlayerActivity$2 -> com.duole.player.a:
    com.duole.player.SingleMusicPlayerActivity this$0 -> a
    void onPrepared(android.media.MediaPlayer) -> onPrepared
com.duole.player.VideoPlayerActivity -> com.duole.player.VideoPlayerActivity:
    java.lang.String filename -> b
    android.content.Intent intent -> c
    com.duole.widget.DuoleVideoView vvPlayer -> d
    android.os.PowerManager$WakeLock mWakeLock -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    void onDestroy() -> onDestroy
com.duole.player.VideoPlayerActivity$1 -> com.duole.player.h:
    com.duole.player.VideoPlayerActivity this$0 -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.duole.pojos.DuoleCountDownTimer -> com.duole.pojos.DuoleCountDownTimer:
    long mCountdownInterval -> a
    long mTotalTime -> b
    long mRemainTime -> c
    boolean isRunning -> d
    android.widget.ProgressBar dsb -> e
    android.os.Handler mHandler -> f
    void seek$13462e() -> a
    void setTotalTime(long) -> a
    void resume() -> b
    void pause() -> c
    void onTick$25666f4(long) -> b
    void onFinish() -> d
    boolean isRunning() -> e
    void stop() -> f
    java.lang.String getRemainTime() -> g
    int getRemainMills() -> h
    int getTotalTime() -> i
    android.widget.ProgressBar getPb() -> j
    void setPb(android.widget.ProgressBar) -> a
    long access$0(com.duole.pojos.DuoleCountDownTimer) -> a
    long access$1(com.duole.pojos.DuoleCountDownTimer) -> b
    void access$2(com.duole.pojos.DuoleCountDownTimer,long) -> a
    long access$3(com.duole.pojos.DuoleCountDownTimer) -> c
com.duole.pojos.DuoleCountDownTimer$1 -> com.duole.pojos.a:
    com.duole.pojos.DuoleCountDownTimer this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.duole.pojos.adapter.AssetItemAdapter -> com.duole.pojos.adapter.AssetItemAdapter:
    java.util.ArrayList mList -> a
    android.content.Context mContext -> b
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.duole.pojos.adapter.AssetItemAdapter$AssetItem -> com.duole.pojos.adapter.c:
    android.widget.ImageView ivKe -> a
    android.widget.ImageView ivAssetThumb -> b
    android.widget.TextView tvAssetName -> c
    com.duole.pojos.adapter.AssetItemAdapter this$0 -> d
com.duole.pojos.adapter.MusicItemAdapter -> com.duole.pojos.adapter.MusicItemAdapter:
    java.util.ArrayList mList -> a
    android.content.Context mContext -> b
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.duole.pojos.adapter.MusicItemAdapter$AssetItem -> com.duole.pojos.adapter.a:
    android.widget.ImageView ivKe -> a
    android.widget.ImageView ivAssetThumb -> b
    android.widget.TextView tvAssetName -> c
    com.duole.pojos.adapter.MusicItemAdapter this$0 -> d
com.duole.pojos.adapter.WifiNetworkAdapter -> com.duole.pojos.adapter.WifiNetworkAdapter:
    java.util.ArrayList inputList -> a
    android.view.LayoutInflater inflater -> b
    com.duole.pojos.adapter.WifiNetworkAdapter$WifiConnection wc -> c
    android.content.Context context -> d
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.duole.pojos.adapter.WifiNetworkAdapter$WifiConnection -> com.duole.pojos.adapter.b:
    android.widget.TextView tvSSID -> a
    com.duole.pojos.adapter.WifiNetworkAdapter this$0 -> b
com.duole.pojos.asset.Asset -> com.duole.pojos.asset.Asset:
    java.lang.String name -> a
    java.lang.String thumbnail -> b
    java.lang.String url -> c
    java.lang.String type -> d
    java.lang.String id -> e
    java.lang.String lastmodified -> f
    java.lang.String filename -> g
    java.lang.String packag -> h
    java.lang.String activity -> i
    java.lang.String bg -> j
    java.lang.String isFront -> k
    java.lang.String frontID -> l
    java.lang.String md5 -> m
    java.lang.String getMd5() -> a
    void setMd5(java.lang.String) -> a
    java.lang.String getName() -> b
    void setName(java.lang.String) -> b
    java.lang.String getThumbnail() -> c
    void setThumbnail(java.lang.String) -> c
    java.lang.String getUrl() -> d
    void setUrl(java.lang.String) -> d
    java.lang.String getType() -> e
    void setType(java.lang.String) -> e
    java.lang.String getId() -> f
    void setId(java.lang.String) -> f
    java.lang.String getLastmodified() -> g
    void setLastmodified(java.lang.String) -> g
    java.lang.String getFilename() -> h
    void setFilename(java.lang.String) -> h
    java.lang.String getPackag() -> i
    void setPackag(java.lang.String) -> i
    void setActivity(java.lang.String) -> j
    java.lang.String getBg() -> j
    void setBg(java.lang.String) -> k
    java.lang.String getIsFront() -> k
    void setIsFront(java.lang.String) -> l
    java.lang.String getFrontID() -> l
    void setFrontID(java.lang.String) -> m
    java.lang.String toString() -> toString
com.duole.receiver.AntiFatigueReceiver -> com.duole.receiver.AntiFatigueReceiver:
    java.text.SimpleDateFormat sdf -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.duole.receiver.BackgroundRefreshReceiver -> com.duole.receiver.BackgroundRefreshReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.duole.receiver.BackgroundRefreshReceiver$1 -> com.duole.receiver.b:
    com.duole.receiver.BackgroundRefreshReceiver this$0 -> a
    void run() -> run
com.duole.receiver.BootCompleteReceiver -> com.duole.receiver.BootCompleteReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.duole.receiver.RefreshCompeleteReceiver -> com.duole.receiver.RefreshCompeleteReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void refreshView() -> a
    void access$0(com.duole.receiver.RefreshCompeleteReceiver) -> a
com.duole.receiver.RefreshCompeleteReceiver$1 -> com.duole.receiver.a:
    com.duole.receiver.RefreshCompeleteReceiver this$0 -> a
    void run() -> run
com.duole.service.AntiFatigueService -> com.duole.service.AntiFatigueService:
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onStart(android.content.Intent,int) -> onStart
com.duole.service.AntiFatigueThread -> com.duole.service.AntiFatigueThread:
    void run() -> run
com.duole.service.BackgroundRefreshService -> com.duole.service.BackgroundRefreshService:
    android.os.PowerManager$WakeLock mWakeLock -> a
    android.app.AlarmManager am -> b
    android.app.PendingIntent pii -> c
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onStart(android.content.Intent,int) -> onStart
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    boolean onUnbind(android.content.Intent) -> onUnbind
com.duole.service.BackgroundRefreshService$LocalBinder -> com.duole.service.BackgroundRefreshService$LocalBinder:
    com.duole.service.BackgroundRefreshService this$0 -> a
    com.duole.service.BackgroundRefreshService getService() -> a
com.duole.service.UnLockScreenService -> com.duole.service.UnLockScreenService:
    android.os.PowerManager$WakeLock mWakeLock -> a
    android.content.BroadcastReceiver brScreenOn -> b
    android.content.BroadcastReceiver brScreenOff -> c
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onStart(android.content.Intent,int) -> onStart
    void onDestroy() -> onDestroy
com.duole.service.UnLockScreenService$1 -> com.duole.service.a:
    com.duole.service.UnLockScreenService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.duole.service.UnLockScreenService$2 -> com.duole.service.b:
    com.duole.service.UnLockScreenService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.duole.thread.DeleteAssetFilesThread -> com.duole.thread.DeleteAssetFilesThread:
    java.util.ArrayList assets -> a
    void run() -> run
com.duole.utils.Constants -> com.duole.utils.Constants:
    boolean musicPlayerIsRunning -> a
    boolean clientApkDownloaded -> b
    boolean viewrefreshenable -> c
    java.lang.String restart -> d
    boolean newItemExists -> e
    java.util.ArrayList AssetList -> f
    java.util.ArrayList MusicList -> g
    java.util.ArrayList DownLoadTaskList -> h
    java.util.ArrayList alAsset -> i
    android.graphics.Bitmap bmpKe -> j
    java.util.HashMap alAssetCache -> k
    int APP_PAGE_SIZE -> l
    int COLUMNS -> m
    boolean APP_RUNNING -> n
    boolean DOWNLOAD_RUNNING -> o
    boolean ENTIME_OUT -> p
    boolean SLEEP_TIME -> q
    boolean SCREEN_ON -> r
    java.lang.String bgurl -> s
    java.lang.String bgRestUrl -> t
    java.lang.String entime -> u
    java.lang.String restime -> v
    java.lang.String sleepstart -> w
    java.lang.String sleepend -> x
    java.lang.String ke -> y
    java.lang.String resourceId -> z
    long timePool -> A
    long gameStartMillis -> B
    java.text.SimpleDateFormat sdf_hour -> C
    java.lang.String System_Password -> D
    java.lang.String System_ver -> E
    java.lang.String system_uptime -> F
com.duole.utils.DownloadFileUtils -> com.duole.utils.DownloadFileUtils:
    com.duole.pojos.asset.Asset asset -> a
    boolean downloadAll() -> a
    boolean downloadCacheFile(java.net.URL,java.io.File) -> a
    boolean resumeDownloadCacheFile(java.net.URL,java.io.File) -> b
com.duole.utils.DuoleNetUtils -> com.duole.utils.DuoleNetUtils:
    java.lang.String connect(java.lang.String) -> a
    java.lang.String dopost(java.lang.String,java.util.ArrayList) -> a
    java.lang.String convertStreamToString(java.io.InputStream) -> a
com.duole.utils.DuoleSysConfigUtils -> com.duole.utils.DuoleSysConfigUtils:
com.duole.utils.DuoleUtils -> com.duole.utils.DuoleUtils:
    boolean checkTFCard() -> a
    byte[] readFromInput(java.io.InputStream) -> a
    boolean downloadApp(com.duole.pojos.asset.Asset,java.lang.String) -> a
    boolean downloadFront(com.duole.pojos.asset.Asset,java.lang.String) -> b
    boolean downloadPic(com.duole.pojos.asset.Asset,java.lang.String) -> c
    java.net.URL checkUrl(java.lang.String) -> a
    boolean downloadSingleFile(com.duole.pojos.asset.Asset,java.net.URL,java.io.File) -> a
    boolean downloadSingleFile(java.net.URL,java.io.File) -> a
    java.util.ArrayList getAssetDeleteList(java.util.HashMap,java.util.ArrayList) -> a
    boolean checkDownloadNecessary(com.duole.pojos.asset.Asset,com.duole.pojos.asset.Asset) -> a
    boolean updateAssetListFile(java.util.ArrayList) -> a
    java.lang.String getAndroidId() -> b
    void setChildrenDrawingCacheEnabled$4d3af60(android.view.ViewGroup) -> a
    void addNetworkManager(java.util.ArrayList) -> b
    void updateClient() -> c
    java.lang.String getPackageVersion(java.io.File) -> a
    java.lang.String getVersion(android.content.Context) -> a
    java.util.ArrayList checkFilesExists(java.util.ArrayList) -> c
    double round$48225d77(double) -> a
    void getMusicList(java.util.ArrayList) -> d
    boolean installApkFromFile(java.io.File) -> b
    boolean instalUpdateApk(android.content.Context) -> b
    java.util.List findActivitiesForPackage(android.content.Context,java.lang.String) -> a
    boolean verifyInstallationOfAPK(android.content.Context,java.lang.String) -> b
com.duole.utils.FileUtils -> com.duole.utils.FileUtils:
    boolean isCacheFileExists(java.lang.String) -> a
    void copyFile(java.lang.String,java.lang.String) -> a
    void readTxt(java.util.ArrayList,java.lang.String) -> a
    boolean clearUselessResource() -> a
    void Unzip(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String getPackagenameFromAPK(android.content.Context,com.duole.pojos.asset.Asset) -> a
    boolean emptyFolder(java.io.File) -> a
com.duole.utils.HashUtils -> com.duole.utils.HashUtils:
    char[] hexChar -> a
    java.lang.String getMD5(java.lang.String) -> a
    java.lang.String toHexString(byte[]) -> a
com.duole.utils.JsonUtils -> com.duole.utils.JsonUtils:
    void parserJson(java.util.ArrayList,org.json.JSONObject) -> a
com.duole.utils.XmlUtils -> com.duole.utils.XmlUtils:
    java.lang.String filePath -> a
    java.lang.String readNodeValue(java.lang.String,java.lang.String) -> a
    java.util.ArrayList readFile$79be9898() -> c
    void readConfiguration() -> a
    java.util.ArrayList readXML$58fe0062(java.lang.String) -> a
    void deleteAllItemNodes() -> b
    void addNode(java.util.ArrayList) -> a
    boolean updateSingleNode(java.lang.String,java.lang.String) -> b
    boolean updateSingleNode(java.lang.String,java.lang.String,java.lang.String) -> a
    void createNode(org.w3c.dom.Document,java.lang.String,java.lang.String) -> a
    void createItemList() -> d
com.duole.utils.installThread -> com.duole.utils.a:
    java.io.File installFile -> a
    void run() -> run
com.duole.widget.AutoScrollTextView -> com.duole.widget.AutoScrollTextView:
com.duole.widget.DuoleVideoView -> com.duole.widget.DuoleVideoView:
    android.content.Context mContext -> a
    java.lang.String TAG -> b
    android.net.Uri mUri -> c
    int mDuration -> d
    int screenWidth -> e
    int screenHeight -> f
    boolean autoplay -> g
    int mCurrentState -> h
    int mTargetState -> i
    android.view.SurfaceHolder mSurfaceHolder -> j
    android.media.MediaPlayer mMediaPlayer -> k
    int mVideoWidth -> l
    int mVideoHeight -> m
    android.widget.MediaController mMediaController -> n
    android.media.MediaPlayer$OnCompletionListener mOnCompletionListener -> o
    int mCurrentBufferPercentage -> p
    int mSeekWhenPrepared -> q
    boolean mCanPause -> r
    boolean mCanSeekBack -> s
    boolean mCanSeekForward -> t
    android.media.MediaPlayer$OnVideoSizeChangedListener mSizeChangedListener -> u
    android.media.MediaPlayer$OnPreparedListener mPreparedListener -> v
    android.media.MediaPlayer$OnCompletionListener mCompletionListener -> w
    android.media.MediaPlayer$OnErrorListener mErrorListener -> x
    android.media.MediaPlayer$OnBufferingUpdateListener mBufferingUpdateListener -> y
    void onMeasure(int,int) -> onMeasure
    void setVideoPath(java.lang.String) -> a
    void setVideoURI(android.net.Uri) -> a
    void setMediaController(android.widget.MediaController) -> a
    void attachMediaController() -> b
    void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onTrackballEvent(android.view.MotionEvent) -> onTrackballEvent
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void toggleMediaControlsVisiblity() -> c
    void start() -> start
    void pause() -> pause
    int getDuration() -> getDuration
    int getCurrentPosition() -> getCurrentPosition
    void seekTo(int) -> seekTo
    boolean isPlaying() -> isPlaying
    int getBufferPercentage() -> getBufferPercentage
    boolean isInPlaybackState() -> d
    boolean canPause() -> canPause
    boolean canSeekBackward() -> canSeekBackward
    boolean canSeekForward() -> canSeekForward
    void videoAutoPlay() -> a
com.duole.widget.MusicGallery -> com.duole.widget.MusicGallery:
    android.graphics.Camera mCamera -> a
    int mCoveflowCenter -> b
    boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation) -> getChildStaticTransformation
    void onSizeChanged(int,int,int,int) -> onSizeChanged
com.duole.widget.ScrollLayout -> com.duole.widget.ScrollLayout:
    android.widget.Scroller mScroller -> a
    android.view.VelocityTracker mVelocityTracker -> b
    com.duole.listener.OnScrolledListener scrolled -> c
    boolean change -> d
    int mCurScreen -> e
    int mTouchState -> f
    int mTouchSlop -> g
    float mLastMotionX -> h
    float mLastMotionY -> i
    int last -> j
    int index -> k
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    void snapToScreen(int) -> a
    void computeScroll() -> computeScroll
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void refresh() -> a
    void setOnScrolledListener(com.duole.listener.OnScrolledListener) -> a
de.idyl.winzipaes.AesZipFileDecrypter -> de.idyl.winzipaes.AesZipFileDecrypter:
    java.util.logging.Logger LOG -> b
    java.lang.String charset -> a
    int bufferSize -> c
    de.idyl.winzipaes.impl.AESDecrypter decrypter -> d
    de.idyl.winzipaes.impl.ExtRandomAccessFile raFile -> e
    long dirOffsetPos -> f
    java.io.File zipFile -> g
    java.lang.String comment -> h
    java.util.List getEntryList() -> a
    void extractEntry(de.idyl.winzipaes.impl.ExtZipEntry,java.io.OutputStream,java.lang.String) -> a
    void extractEntry(de.idyl.winzipaes.impl.ExtZipEntry,java.io.File,java.lang.String) -> a
de.idyl.winzipaes.AesZipFileEncrypter -> de.idyl.winzipaes.AesZipFileEncrypter:
    java.util.logging.Logger LOG -> a
de.idyl.winzipaes.impl.AESCryptoBase -> de.idyl.winzipaes.impl.AESCryptoBase:
    byte[] saltBytes -> a
    byte[] cryptoKeyBytes -> b
    byte[] authenticationCodeBytes -> c
    byte[] pwVerificationBytes -> d
    int blockSize -> e
    int nonce -> f
de.idyl.winzipaes.impl.AESDecrypter -> de.idyl.winzipaes.impl.AESDecrypter:
    void init$78ed3d4e(java.lang.String,byte[],byte[]) -> a
    void decrypt(byte[],int) -> a
    byte[] getFinalAuthentication() -> a
de.idyl.winzipaes.impl.AESDecrypterBC -> de.idyl.winzipaes.impl.AESDecrypterBC:
    org.bouncycastle.crypto.CipherParameters cipherParameters -> g
    org.bouncycastle.crypto.modes.SICBlockCipher aesCipher -> h
    org.bouncycastle.crypto.macs.HMac mac -> i
    void init$78ed3d4e(java.lang.String,byte[],byte[]) -> a
    void decrypt(byte[],int) -> a
    byte[] getFinalAuthentication() -> a
de.idyl.winzipaes.impl.AESDecrypterJCA -> de.idyl.winzipaes.impl.AESDecrypterJCA:
    de.idyl.winzipaes.impl.AESUtilsJCA utils -> a
    void init$78ed3d4e(java.lang.String,byte[],byte[]) -> a
    void decrypt(byte[],int) -> a
    byte[] getFinalAuthentication() -> a
de.idyl.winzipaes.impl.AESEncrypter -> de.idyl.winzipaes.impl.AESEncrypter:
de.idyl.winzipaes.impl.AESEncrypterBC -> de.idyl.winzipaes.impl.AESEncrypterBC:
    java.util.logging.Logger LOG -> g
    java.util.Random RANDOM -> h
de.idyl.winzipaes.impl.AESEncrypterJCA -> de.idyl.winzipaes.impl.AESEncrypterJCA:
    java.util.Random RANDOM -> a
de.idyl.winzipaes.impl.AESUtilsJCA -> de.idyl.winzipaes.impl.AESUtilsJCA:
    javax.crypto.Cipher cipher -> a
    javax.crypto.Mac mac -> b
    byte[] passwordVerifier -> c
    byte[] iv -> d
    byte[] keystream -> e
    int next -> f
    void cryptUpdate(byte[],int) -> a
    void authUpdate(byte[],int) -> b
    byte[] getFinalAuthentifier() -> a
    byte[] getPasswordVerifier() -> b
de.idyl.winzipaes.impl.ByteArrayHelper -> de.idyl.winzipaes.impl.ByteArrayHelper:
    byte[] toByteArray(int) -> a
    java.lang.String toString(byte[]) -> a
de.idyl.winzipaes.impl.CentralDirectoryEntry -> de.idyl.winzipaes.impl.CentralDirectoryEntry:
    java.util.logging.Logger LOG -> a
    de.idyl.winzipaes.impl.ExtRandomAccessFile raFile -> b
    long fileOffset -> c
    boolean isEncrypted -> d
    boolean isAesEncrypted -> e
    short fileNameLength -> f
    long extraFieldOffset -> g
    java.lang.String fileName -> h
    int localHeaderSize -> i
    short actualCompressionMethod -> j
    short extraFieldLength -> k
    long localHeaderOffset -> l
    int compressedSize -> m
    int uncompressedSize -> n
    int getCompressedSize() -> a
    int getUncompressedSize() -> b
    boolean isEncrypted() -> c
    long getLocalHeaderOffset() -> d
    int getOffset() -> e
    short getActualCompressionMethod() -> f
    int getLocalHeaderSize() -> g
    boolean isAesEncrypted() -> h
    java.lang.String toString() -> toString
de.idyl.winzipaes.impl.ExtRandomAccessFile -> de.idyl.winzipaes.impl.ExtRandomAccessFile:
    java.io.RandomAccessFile file -> a
    int readByteArray(byte[],int) -> a
    byte[] readByteArray(long,int) -> a
    long readLong(long) -> a
    int readInt(long) -> b
    short readShort(long) -> c
    byte readByte(long) -> d
    void seek(long) -> e
    long getFilePointer() -> a
    long lastPosOf(byte[]) -> a
de.idyl.winzipaes.impl.ExtZipEntry -> de.idyl.winzipaes.impl.ExtZipEntry:
    de.idyl.winzipaes.impl.CentralDirectoryEntry centralDirectoryEntry -> a
    int flag -> b
    int offset -> c
    int primaryCompressionMethod -> d
    void initEncryptedEntry() -> a
    int getFlag() -> b
    boolean isEncrypted() -> c
    int getOffset() -> d
    void setOffset(int) -> a
    int getPrimaryCompressionMethod() -> e
    void setPrimaryCompressionMethod(int) -> b
    long getEncryptedDataSize() -> f
    de.idyl.winzipaes.impl.CentralDirectoryEntry getCentralDirectoryEntry() -> g
    void setSize(long) -> setSize
de.idyl.winzipaes.impl.ExtZipOutputStream -> de.idyl.winzipaes.impl.ExtZipOutputStream:
    java.lang.String comment -> a
    java.io.OutputStream out -> b
    int written -> c
    java.util.List entries -> d
    void writeBytes(byte[]) -> a
    void writeShort(int) -> a
    void writeInt(long) -> a
    void writeBytes$1cf967a4(byte[],int) -> a
    void writeFileInfo(de.idyl.winzipaes.impl.ExtZipEntry) -> b
    void writeExtraBytes(java.util.zip.ZipEntry) -> a
    void putNextEntry(de.idyl.winzipaes.impl.ExtZipEntry) -> a
    void finish() -> a
de.idyl.winzipaes.impl.ZipConstants -> de.idyl.winzipaes.impl.ZipConstants:
de.idyl.winzipaes.impl.ZipFileEntryInputStream -> de.idyl.winzipaes.impl.ZipFileEntryInputStream:
    java.util.logging.Logger LOG -> a
org.bouncycastle.LICENSE -> org.bouncycastle.LICENSE:
    java.lang.String licenseText -> a
org.bouncycastle.asn1.ASN1Encodable -> org.bouncycastle.asn1.ASN1Encodable:
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    org.bouncycastle.asn1.DERObject getDERObject() -> b
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.ASN1EncodableVector -> org.bouncycastle.asn1.ASN1EncodableVector:
org.bouncycastle.asn1.ASN1InputStream -> org.bouncycastle.asn1.ASN1InputStream:
    org.bouncycastle.asn1.DERObject END_OF_STREAM -> a
    boolean eofFound -> b
    int readLength() -> a
    void readFully(byte[]) -> a
    org.bouncycastle.asn1.DERObject buildObject(int,byte[]) -> a
    byte[] readIndefiniteLengthFully() -> c
    org.bouncycastle.asn1.BERConstructedOctetString buildConstructedOctetString() -> d
    org.bouncycastle.asn1.DERObject readObject() -> b
org.bouncycastle.asn1.ASN1InputStream$1 -> org.bouncycastle.asn1.a:
    org.bouncycastle.asn1.ASN1InputStream this$0 -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.ASN1Null -> org.bouncycastle.asn1.ASN1Null:
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.ASN1OctetString -> org.bouncycastle.asn1.ASN1OctetString:
    byte[] string -> a
    org.bouncycastle.asn1.ASN1OctetString getInstance$50d163d6(org.bouncycastle.asn1.ASN1TaggedObject) -> a
    org.bouncycastle.asn1.ASN1OctetString getInstance(java.lang.Object) -> a
    byte[] getOctets() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.ASN1OutputStream -> org.bouncycastle.asn1.ASN1OutputStream:
    void writeObject(java.lang.Object) -> a
org.bouncycastle.asn1.ASN1Sequence -> org.bouncycastle.asn1.ASN1Sequence:
    java.util.Vector seq -> a
    org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object) -> a
    org.bouncycastle.asn1.ASN1Sequence getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> a
    java.util.Enumeration getObjects() -> a
    org.bouncycastle.asn1.DEREncodable getObjectAt(int) -> a
    int size() -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void addObject(org.bouncycastle.asn1.DEREncodable) -> a
org.bouncycastle.asn1.ASN1Set -> org.bouncycastle.asn1.ASN1Set:
    java.util.Vector set -> a
    org.bouncycastle.asn1.ASN1Set getInstance$55e0e638(org.bouncycastle.asn1.ASN1TaggedObject) -> a
    java.util.Enumeration getObjects() -> a
    org.bouncycastle.asn1.DEREncodable getObjectAt(int) -> a
    int size() -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void addObject(org.bouncycastle.asn1.DEREncodable) -> a
org.bouncycastle.asn1.ASN1TaggedObject -> org.bouncycastle.asn1.ASN1TaggedObject:
    int tagNo -> a
    boolean empty -> b
    boolean explicit -> c
    org.bouncycastle.asn1.DEREncodable obj -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int getTagNo() -> a
    boolean isExplicit() -> c
    boolean isEmpty() -> d
    org.bouncycastle.asn1.DERObject getObject() -> e
org.bouncycastle.asn1.BERConstructedOctetString -> org.bouncycastle.asn1.BERConstructedOctetString:
    java.util.Vector octs -> b
    byte[] toBytes(java.util.Vector) -> a
    byte[] getOctets() -> a
    java.util.Enumeration getObjects() -> c
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.BERConstructedSequence -> org.bouncycastle.asn1.BERConstructedSequence:
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.BERInputStream -> org.bouncycastle.asn1.BERInputStream:
    org.bouncycastle.asn1.DERObject END_OF_STREAM -> a
    byte[] readIndefiniteLengthFully() -> c
    org.bouncycastle.asn1.BERConstructedOctetString buildConstructedOctetString() -> d
    org.bouncycastle.asn1.DERObject readObject() -> b
org.bouncycastle.asn1.BERInputStream$1 -> org.bouncycastle.asn1.b:
    org.bouncycastle.asn1.BERInputStream this$0 -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.BERNull -> org.bouncycastle.asn1.BERNull:
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.BEROutputStream -> org.bouncycastle.asn1.BEROutputStream:
    void writeObject(java.lang.Object) -> a
org.bouncycastle.asn1.BERSequence -> org.bouncycastle.asn1.BERSequence:
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.BERSet -> org.bouncycastle.asn1.BERSet:
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.BERTaggedObject -> org.bouncycastle.asn1.BERTaggedObject:
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.DERApplicationSpecific -> org.bouncycastle.asn1.DERApplicationSpecific:
    int tag -> a
    byte[] octets -> b
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.DERBMPString -> org.bouncycastle.asn1.DERBMPString:
    java.lang.String string -> a
    java.lang.String getString() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.DERBitString -> org.bouncycastle.asn1.DERBitString:
    char[] table -> b
    byte[] data -> a
    int padBits -> c
    int getPadBits(int) -> a
    byte[] getBytes(int) -> b
    org.bouncycastle.asn1.DERBitString getInstance(java.lang.Object) -> a
    byte[] getBytes() -> c
    int getPadBits() -> d
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String getString() -> a
org.bouncycastle.asn1.DERBoolean -> org.bouncycastle.asn1.DERBoolean:
    byte value -> a
    org.bouncycastle.asn1.DERBoolean FALSE -> b
    org.bouncycastle.asn1.DERBoolean TRUE -> c
    org.bouncycastle.asn1.DERBoolean getInstance$533468d6(org.bouncycastle.asn1.ASN1TaggedObject) -> a
    boolean isTrue() -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.DERConstructedSequence -> org.bouncycastle.asn1.DERConstructedSequence:
    void addObject(org.bouncycastle.asn1.DEREncodable) -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.DERConstructedSet -> org.bouncycastle.asn1.DERConstructedSet:
    void addObject(org.bouncycastle.asn1.DEREncodable) -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.DEREncodable -> org.bouncycastle.asn1.DEREncodable:
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.DEREncodableVector -> org.bouncycastle.asn1.DEREncodableVector:
    java.util.Vector v -> a
    void add(org.bouncycastle.asn1.DEREncodable) -> a
    org.bouncycastle.asn1.DEREncodable get(int) -> a
    int size() -> a
org.bouncycastle.asn1.DEREnumerated -> org.bouncycastle.asn1.DEREnumerated:
    byte[] bytes -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.DERGeneralString -> org.bouncycastle.asn1.DERGeneralString:
    java.lang.String string -> a
    java.lang.String getString() -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.DERGeneralizedTime -> org.bouncycastle.asn1.DERGeneralizedTime:
    java.lang.String time -> a
    java.lang.String getTime() -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.DERIA5String -> org.bouncycastle.asn1.DERIA5String:
    java.lang.String string -> a
    org.bouncycastle.asn1.DERIA5String getInstance(java.lang.Object) -> a
    org.bouncycastle.asn1.DERIA5String getInstance$18ff6da4(org.bouncycastle.asn1.ASN1TaggedObject) -> a
    java.lang.String getString() -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.DERInputStream -> org.bouncycastle.asn1.DERInputStream:
    int readLength() -> a
    void readFully(byte[]) -> a
    org.bouncycastle.asn1.DERObject buildObject(int,byte[]) -> a
    org.bouncycastle.asn1.DERObject readObject() -> b
org.bouncycastle.asn1.DERInteger -> org.bouncycastle.asn1.DERInteger:
    byte[] bytes -> a
    org.bouncycastle.asn1.DERInteger getInstance(java.lang.Object) -> a
    org.bouncycastle.asn1.DERInteger getInstance$573424d4(org.bouncycastle.asn1.ASN1TaggedObject) -> a
    java.math.BigInteger getValue() -> a
    java.math.BigInteger getPositiveValue() -> c
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.DERNull -> org.bouncycastle.asn1.DERNull:
    byte[] zeroBytes -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.DERNumericString -> org.bouncycastle.asn1.DERNumericString:
    java.lang.String string -> a
    java.lang.String getString() -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.DERObject -> org.bouncycastle.asn1.DERObject:
    org.bouncycastle.asn1.DERObject getDERObject() -> b
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.DERObjectIdentifier -> org.bouncycastle.asn1.DERObjectIdentifier:
    java.lang.String identifier -> a
    org.bouncycastle.asn1.DERObjectIdentifier getInstance(java.lang.Object) -> a
    java.lang.String getId() -> a
    void writeField(java.io.OutputStream,int) -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.DEROctetString -> org.bouncycastle.asn1.DEROctetString:
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.DEROutputStream -> org.bouncycastle.asn1.DEROutputStream:
    void writeEncoded(int,byte[]) -> a
    void writeNull() -> a
    void writeObject(java.lang.Object) -> a
org.bouncycastle.asn1.DERPrintableString -> org.bouncycastle.asn1.DERPrintableString:
    java.lang.String string -> a
    java.lang.String getString() -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.DERSequence -> org.bouncycastle.asn1.DERSequence:
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.DERSet -> org.bouncycastle.asn1.DERSet:
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.DERString -> org.bouncycastle.asn1.DERString:
    java.lang.String getString() -> a
org.bouncycastle.asn1.DERT61String -> org.bouncycastle.asn1.DERT61String:
    java.lang.String string -> a
    java.lang.String getString() -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.DERTaggedObject -> org.bouncycastle.asn1.DERTaggedObject:
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.DERTags -> org.bouncycastle.asn1.DERTags:
org.bouncycastle.asn1.DERUTCTime -> org.bouncycastle.asn1.DERUTCTime:
    java.lang.String time -> a
    java.lang.String getTime() -> a
    java.lang.String getAdjustedTime() -> c
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.DERUTF8String -> org.bouncycastle.asn1.DERUTF8String:
    java.lang.String string -> a
    java.lang.String getString() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
org.bouncycastle.asn1.DERUniversalString -> org.bouncycastle.asn1.DERUniversalString:
    char[] table -> a
    byte[] string -> b
    java.lang.String getString() -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.DERUnknownTag -> org.bouncycastle.asn1.DERUnknownTag:
    int tag -> a
    byte[] data -> b
    int getTag() -> a
    byte[] getData() -> c
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.DERVisibleString -> org.bouncycastle.asn1.DERVisibleString:
    java.lang.String string -> a
    java.lang.String getString() -> a
    void encode(org.bouncycastle.asn1.DEROutputStream) -> a
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.OIDTokenizer -> org.bouncycastle.asn1.OIDTokenizer:
    java.lang.String oid -> a
    int index -> b
    boolean hasMoreTokens() -> a
    java.lang.String nextToken() -> b
org.bouncycastle.asn1.cms.Attribute -> org.bouncycastle.asn1.cms.Attribute:
    org.bouncycastle.asn1.DERObjectIdentifier attrType -> a
    org.bouncycastle.asn1.ASN1Set attrValues -> b
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.AttributeTable -> org.bouncycastle.asn1.cms.AttributeTable:
org.bouncycastle.asn1.cms.CMSAttributes -> org.bouncycastle.asn1.cms.CMSAttributes:
    org.bouncycastle.asn1.DERObjectIdentifier contentType -> a
    org.bouncycastle.asn1.DERObjectIdentifier messageDigest -> b
    org.bouncycastle.asn1.DERObjectIdentifier signingTime -> c
org.bouncycastle.asn1.cms.CMSObjectIdentifiers -> org.bouncycastle.asn1.cms.CMSObjectIdentifiers:
    org.bouncycastle.asn1.DERObjectIdentifier data -> a
    org.bouncycastle.asn1.DERObjectIdentifier signedData -> b
    org.bouncycastle.asn1.DERObjectIdentifier envelopedData -> c
    org.bouncycastle.asn1.DERObjectIdentifier signedAndEnvelopedData -> d
    org.bouncycastle.asn1.DERObjectIdentifier digestedData -> e
    org.bouncycastle.asn1.DERObjectIdentifier encryptedData -> f
    org.bouncycastle.asn1.DERObjectIdentifier compressedData -> g
org.bouncycastle.asn1.cms.CompressedData -> org.bouncycastle.asn1.cms.CompressedData:
    org.bouncycastle.asn1.DERInteger version -> a
    org.bouncycastle.asn1.x509.AlgorithmIdentifier compressionAlgorithm -> b
    org.bouncycastle.asn1.cms.ContentInfo encapContentInfo -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.ContentInfo -> org.bouncycastle.asn1.cms.ContentInfo:
    org.bouncycastle.asn1.DERObjectIdentifier contentType -> a
    org.bouncycastle.asn1.DEREncodable content -> b
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.EncryptedContentInfo -> org.bouncycastle.asn1.cms.EncryptedContentInfo:
    org.bouncycastle.asn1.DERObjectIdentifier contentType -> a
    org.bouncycastle.asn1.x509.AlgorithmIdentifier contentEncryptionAlgorithm -> b
    org.bouncycastle.asn1.ASN1OctetString encryptedContent -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.EncryptedData -> org.bouncycastle.asn1.cms.EncryptedData:
org.bouncycastle.asn1.cms.EnvelopedData -> org.bouncycastle.asn1.cms.EnvelopedData:
    org.bouncycastle.asn1.DERInteger version -> a
    org.bouncycastle.asn1.cms.OriginatorInfo originatorInfo -> b
    org.bouncycastle.asn1.ASN1Set recipientInfos -> c
    org.bouncycastle.asn1.cms.EncryptedContentInfo encryptedContentInfo -> d
    org.bouncycastle.asn1.ASN1Set unprotectedAttrs -> e
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.IssuerAndSerialNumber -> org.bouncycastle.asn1.cms.IssuerAndSerialNumber:
    org.bouncycastle.asn1.x509.X509Name name -> a
    org.bouncycastle.asn1.DERInteger serialNumber -> b
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.KEKIdentifier -> org.bouncycastle.asn1.cms.KEKIdentifier:
    org.bouncycastle.asn1.ASN1OctetString keyIdentifier -> a
    org.bouncycastle.asn1.DERGeneralizedTime date -> b
    org.bouncycastle.asn1.cms.OtherKeyAttribute other -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.KEKRecipientInfo -> org.bouncycastle.asn1.cms.KEKRecipientInfo:
    org.bouncycastle.asn1.DERInteger version -> a
    org.bouncycastle.asn1.cms.KEKIdentifier kekid -> b
    org.bouncycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> c
    org.bouncycastle.asn1.ASN1OctetString encryptedKey -> d
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.KeyAgreeRecipientInfo -> org.bouncycastle.asn1.cms.KeyAgreeRecipientInfo:
    org.bouncycastle.asn1.DERInteger version -> a
    org.bouncycastle.asn1.cms.OriginatorIdentifierOrKey originator -> b
    org.bouncycastle.asn1.ASN1OctetString ukm -> c
    org.bouncycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> d
    org.bouncycastle.asn1.ASN1Sequence recipientEncryptedKeys -> e
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.KeyTransRecipientInfo -> org.bouncycastle.asn1.cms.KeyTransRecipientInfo:
    org.bouncycastle.asn1.DERInteger version -> a
    org.bouncycastle.asn1.cms.RecipientIdentifier rid -> b
    org.bouncycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> c
    org.bouncycastle.asn1.ASN1OctetString encryptedKey -> d
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.OriginatorIdentifierOrKey -> org.bouncycastle.asn1.cms.OriginatorIdentifierOrKey:
    org.bouncycastle.asn1.DEREncodable id -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.OriginatorInfo -> org.bouncycastle.asn1.cms.OriginatorInfo:
    org.bouncycastle.asn1.ASN1Set certs -> a
    org.bouncycastle.asn1.ASN1Set crls -> b
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.OriginatorPublicKey -> org.bouncycastle.asn1.cms.OriginatorPublicKey:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algorithm -> a
    org.bouncycastle.asn1.DERBitString publicKey -> b
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.OtherKeyAttribute -> org.bouncycastle.asn1.cms.OtherKeyAttribute:
    org.bouncycastle.asn1.DERObjectIdentifier keyAttrId -> a
    org.bouncycastle.asn1.DEREncodable keyAttr -> b
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.OtherRecipientInfo -> org.bouncycastle.asn1.cms.OtherRecipientInfo:
    org.bouncycastle.asn1.DERObjectIdentifier oriType -> a
    org.bouncycastle.asn1.DEREncodable oriValue -> b
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.cms.PasswordRecipientInfo -> org.bouncycastle.asn1.cms.PasswordRecipientInfo:
    org.bouncycastle.asn1.DERInteger version -> a
    org.bouncycastle.asn1.x509.AlgorithmIdentifier keyDerivationAlgorithm -> b
    org.bouncycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> c
    org.bouncycastle.asn1.ASN1OctetString encryptedKey -> d
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.cms.RecipientIdentifier -> org.bouncycastle.asn1.cms.RecipientIdentifier:
    org.bouncycastle.asn1.DEREncodable id -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.RecipientInfo -> org.bouncycastle.asn1.cms.RecipientInfo:
    org.bouncycastle.asn1.DEREncodable info -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.RecipientKeyIdentifier -> org.bouncycastle.asn1.cms.RecipientKeyIdentifier:
    org.bouncycastle.asn1.ASN1OctetString subjectKeyIdentifier -> a
    org.bouncycastle.asn1.DERGeneralizedTime date -> b
    org.bouncycastle.asn1.cms.OtherKeyAttribute other -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.SignedData -> org.bouncycastle.asn1.cms.SignedData:
    org.bouncycastle.asn1.DERInteger version -> a
    org.bouncycastle.asn1.ASN1Set digestAlgorithms -> b
    org.bouncycastle.asn1.cms.ContentInfo contentInfo -> c
    org.bouncycastle.asn1.ASN1Set certificates -> d
    org.bouncycastle.asn1.ASN1Set crls -> e
    org.bouncycastle.asn1.ASN1Set signerInfos -> f
    boolean certBer -> g
    boolean crlsBer -> h
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.SignerIdentifier -> org.bouncycastle.asn1.cms.SignerIdentifier:
    org.bouncycastle.asn1.DEREncodable id -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.SignerInfo -> org.bouncycastle.asn1.cms.SignerInfo:
    org.bouncycastle.asn1.DERInteger version -> a
    org.bouncycastle.asn1.cms.SignerIdentifier sid -> b
    org.bouncycastle.asn1.x509.AlgorithmIdentifier digAlgorithm -> c
    org.bouncycastle.asn1.ASN1Set authenticatedAttributes -> d
    org.bouncycastle.asn1.x509.AlgorithmIdentifier digEncryptionAlgorithm -> e
    org.bouncycastle.asn1.ASN1OctetString encryptedDigest -> f
    org.bouncycastle.asn1.ASN1Set unauthenticatedAttributes -> g
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.cms.Time -> org.bouncycastle.asn1.cms.Time:
    org.bouncycastle.asn1.DERObject time -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.misc.CAST5CBCParameters -> org.bouncycastle.asn1.misc.CAST5CBCParameters:
    org.bouncycastle.asn1.DERInteger keyLength -> a
    org.bouncycastle.asn1.ASN1OctetString iv -> b
    byte[] getIV() -> a
    int getKeyLength() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.misc.IDEACBCPar -> org.bouncycastle.asn1.misc.IDEACBCPar:
    org.bouncycastle.asn1.ASN1OctetString iv -> a
    byte[] getIV() -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.misc.MiscObjectIdentifiers -> org.bouncycastle.asn1.misc.MiscObjectIdentifiers:
    org.bouncycastle.asn1.DERObjectIdentifier netscapeCertType -> a
    org.bouncycastle.asn1.DERObjectIdentifier netscapeBaseURL -> d
    org.bouncycastle.asn1.DERObjectIdentifier netscapeRevocationURL -> b
    org.bouncycastle.asn1.DERObjectIdentifier netscapeCARevocationURL -> e
    org.bouncycastle.asn1.DERObjectIdentifier netscapeRenewalURL -> f
    org.bouncycastle.asn1.DERObjectIdentifier netscapeCApolicyURL -> g
    org.bouncycastle.asn1.DERObjectIdentifier netscapeSSLServerName -> h
    org.bouncycastle.asn1.DERObjectIdentifier netscapeCertComment -> i
    org.bouncycastle.asn1.DERObjectIdentifier verisignCzagExtension -> c
org.bouncycastle.asn1.misc.NetscapeCertType -> org.bouncycastle.asn1.misc.NetscapeCertType:
    java.lang.String toString() -> toString
org.bouncycastle.asn1.misc.NetscapeRevocationURL -> org.bouncycastle.asn1.misc.NetscapeRevocationURL:
    java.lang.String toString() -> toString
org.bouncycastle.asn1.misc.VerisignCzagExtension -> org.bouncycastle.asn1.misc.VerisignCzagExtension:
    java.lang.String toString() -> toString
org.bouncycastle.asn1.ocsp.BasicOCSPResponse -> org.bouncycastle.asn1.ocsp.BasicOCSPResponse:
    org.bouncycastle.asn1.ocsp.ResponseData tbsResponseData -> a
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signatureAlgorithm -> b
    org.bouncycastle.asn1.DERBitString signature -> c
    org.bouncycastle.asn1.ASN1Sequence certs -> d
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.ocsp.CertID -> org.bouncycastle.asn1.ocsp.CertID:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> a
    org.bouncycastle.asn1.ASN1OctetString issuerNameHash -> b
    org.bouncycastle.asn1.ASN1OctetString issuerKeyHash -> c
    org.bouncycastle.asn1.DERInteger serialNumber -> d
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.ocsp.CertStatus -> org.bouncycastle.asn1.ocsp.CertStatus:
    int tagNo -> a
    org.bouncycastle.asn1.DEREncodable value -> b
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.ocsp.CrlID -> org.bouncycastle.asn1.ocsp.CrlID:
    org.bouncycastle.asn1.DERIA5String crlUrl -> a
    org.bouncycastle.asn1.DERInteger crlNum -> b
    org.bouncycastle.asn1.DERGeneralizedTime crlTime -> c
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.ocsp.OCSPObjectIdentifiers -> org.bouncycastle.asn1.ocsp.OCSPObjectIdentifiers:
    org.bouncycastle.asn1.DERObjectIdentifier id_pkix_ocsp -> a
    org.bouncycastle.asn1.DERObjectIdentifier id_pkix_ocsp_basic -> b
org.bouncycastle.asn1.ocsp.OCSPRequest -> org.bouncycastle.asn1.ocsp.OCSPRequest:
    org.bouncycastle.asn1.ocsp.TBSRequest tbsRequest -> a
    org.bouncycastle.asn1.ocsp.Signature optionalSignature -> b
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.ocsp.OCSPResponse -> org.bouncycastle.asn1.ocsp.OCSPResponse:
    org.bouncycastle.asn1.ocsp.OCSPResponseStatus responseStatus -> a
    org.bouncycastle.asn1.ocsp.ResponseBytes responseBytes -> b
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.ocsp.OCSPResponseStatus -> org.bouncycastle.asn1.ocsp.OCSPResponseStatus:
org.bouncycastle.asn1.ocsp.Request -> org.bouncycastle.asn1.ocsp.Request:
    org.bouncycastle.asn1.ocsp.CertID reqCert -> a
    org.bouncycastle.asn1.x509.X509Extensions singleRequestExtensions -> b
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.ocsp.ResponderID -> org.bouncycastle.asn1.ocsp.ResponderID:
    org.bouncycastle.asn1.DEREncodable value -> a
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.ocsp.ResponseBytes -> org.bouncycastle.asn1.ocsp.ResponseBytes:
    org.bouncycastle.asn1.DERObjectIdentifier responseType -> a
    org.bouncycastle.asn1.ASN1OctetString response -> b
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.ocsp.ResponseData -> org.bouncycastle.asn1.ocsp.ResponseData:
    org.bouncycastle.asn1.DERInteger version -> a
    org.bouncycastle.asn1.ocsp.ResponderID responderID -> b
    org.bouncycastle.asn1.DERGeneralizedTime producedAt -> c
    org.bouncycastle.asn1.ASN1Sequence responses -> d
    org.bouncycastle.asn1.x509.X509Extensions responseExtensions -> e
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.ocsp.RevokedInfo -> org.bouncycastle.asn1.ocsp.RevokedInfo:
    org.bouncycastle.asn1.DERGeneralizedTime revocationTime -> a
    org.bouncycastle.asn1.x509.CRLReason revocationReason -> b
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.ocsp.ServiceLocator -> org.bouncycastle.asn1.ocsp.ServiceLocator:
    org.bouncycastle.asn1.x509.X509Name issuer -> a
    org.bouncycastle.asn1.DERObject locator -> b
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.ocsp.Signature -> org.bouncycastle.asn1.ocsp.Signature:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signatureAlgorithm -> a
    org.bouncycastle.asn1.DERBitString signature -> b
    org.bouncycastle.asn1.ASN1Sequence certs -> c
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.ocsp.SingleResponse -> org.bouncycastle.asn1.ocsp.SingleResponse:
    org.bouncycastle.asn1.ocsp.CertID certID -> a
    org.bouncycastle.asn1.ocsp.CertStatus certStatus -> b
    org.bouncycastle.asn1.DERGeneralizedTime thisUpdate -> c
    org.bouncycastle.asn1.DERGeneralizedTime nextUpdate -> d
    org.bouncycastle.asn1.x509.X509Extensions singleExtensions -> e
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.ocsp.TBSRequest -> org.bouncycastle.asn1.ocsp.TBSRequest:
    org.bouncycastle.asn1.DERInteger version -> a
    org.bouncycastle.asn1.x509.GeneralName requestorName -> b
    org.bouncycastle.asn1.ASN1Sequence requestList -> c
    org.bouncycastle.asn1.x509.X509Extensions requestExtensions -> d
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.oiw.ElGamalParameter -> org.bouncycastle.asn1.oiw.ElGamalParameter:
    org.bouncycastle.asn1.DERInteger p -> a
    org.bouncycastle.asn1.DERInteger g -> b
    java.math.BigInteger getP() -> a
    java.math.BigInteger getG() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.oiw.OIWObjectIdentifiers -> org.bouncycastle.asn1.oiw.OIWObjectIdentifiers:
    org.bouncycastle.asn1.DERObjectIdentifier idSHA1 -> c
    org.bouncycastle.asn1.DERObjectIdentifier dsaWithSHA1 -> a
    org.bouncycastle.asn1.DERObjectIdentifier elGamalAlgorithm -> b
org.bouncycastle.asn1.pkcs.Attribute -> org.bouncycastle.asn1.pkcs.Attribute:
    org.bouncycastle.asn1.DERObjectIdentifier attrType -> a
    org.bouncycastle.asn1.ASN1Set attrValues -> b
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.AuthenticatedSafe -> org.bouncycastle.asn1.pkcs.AuthenticatedSafe:
    org.bouncycastle.asn1.pkcs.ContentInfo[] info -> a
    org.bouncycastle.asn1.pkcs.ContentInfo[] getContentInfo() -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.CertBag -> org.bouncycastle.asn1.pkcs.CertBag:
    org.bouncycastle.asn1.ASN1Sequence seq -> a
    org.bouncycastle.asn1.DERObjectIdentifier certId -> b
    org.bouncycastle.asn1.DERObject certValue -> c
    org.bouncycastle.asn1.DERObject getCertValue() -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.CertificationRequest -> org.bouncycastle.asn1.pkcs.CertificationRequest:
    org.bouncycastle.asn1.pkcs.CertificationRequestInfo reqInfo -> a
    org.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> b
    org.bouncycastle.asn1.DERBitString sigBits -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.CertificationRequestInfo -> org.bouncycastle.asn1.pkcs.CertificationRequestInfo:
    org.bouncycastle.asn1.DERInteger version -> a
    org.bouncycastle.asn1.x509.X509Name subject -> b
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo subjectPKInfo -> c
    org.bouncycastle.asn1.ASN1Set attributes -> d
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.ContentInfo -> org.bouncycastle.asn1.pkcs.ContentInfo:
    org.bouncycastle.asn1.DERObjectIdentifier contentType -> B
    org.bouncycastle.asn1.DEREncodable content -> C
    org.bouncycastle.asn1.pkcs.ContentInfo getInstance(java.lang.Object) -> a
    org.bouncycastle.asn1.DERObjectIdentifier getContentType() -> a
    org.bouncycastle.asn1.DEREncodable getContent() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.DHParameter -> org.bouncycastle.asn1.pkcs.DHParameter:
    org.bouncycastle.asn1.DERInteger p -> a
    org.bouncycastle.asn1.DERInteger g -> b
    org.bouncycastle.asn1.DERInteger l -> c
    java.math.BigInteger getP() -> a
    java.math.BigInteger getG() -> c
    java.math.BigInteger getL() -> d
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.EncryptedData -> org.bouncycastle.asn1.pkcs.EncryptedData:
    org.bouncycastle.asn1.ASN1Sequence data -> a
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getEncryptionAlgorithm() -> a
    org.bouncycastle.asn1.ASN1OctetString getContent() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo -> org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> B
    org.bouncycastle.asn1.ASN1OctetString data -> C
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getEncryptionAlgorithm() -> a
    byte[] getEncryptedData() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.EncryptionScheme -> org.bouncycastle.asn1.pkcs.EncryptionScheme:
    org.bouncycastle.asn1.DERObject objectId -> a
    org.bouncycastle.asn1.DERObject obj -> b
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.IssuerAndSerialNumber -> org.bouncycastle.asn1.pkcs.IssuerAndSerialNumber:
    org.bouncycastle.asn1.x509.X509Name name -> a
    org.bouncycastle.asn1.DERInteger certSerialNumber -> b
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.KeyDerivationFunc -> org.bouncycastle.asn1.pkcs.KeyDerivationFunc:
org.bouncycastle.asn1.pkcs.MacData -> org.bouncycastle.asn1.pkcs.MacData:
    org.bouncycastle.asn1.x509.DigestInfo digInfo -> a
    byte[] salt -> b
    java.math.BigInteger iterationCount -> c
    org.bouncycastle.asn1.x509.DigestInfo getMac() -> a
    byte[] getSalt() -> c
    java.math.BigInteger getIterationCount() -> d
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.PBES2Algorithms -> org.bouncycastle.asn1.pkcs.PBES2Algorithms:
    org.bouncycastle.asn1.DERObjectIdentifier objectId -> B
    org.bouncycastle.asn1.pkcs.KeyDerivationFunc func -> C
    org.bouncycastle.asn1.pkcs.EncryptionScheme scheme -> D
    org.bouncycastle.asn1.DERObjectIdentifier getObjectId() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.PBES2Parameters -> org.bouncycastle.asn1.pkcs.PBES2Parameters:
    org.bouncycastle.asn1.pkcs.KeyDerivationFunc func -> B
    org.bouncycastle.asn1.pkcs.EncryptionScheme scheme -> C
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.PBKDF2Params -> org.bouncycastle.asn1.pkcs.PBKDF2Params:
    org.bouncycastle.asn1.DERObjectIdentifier id -> a
    org.bouncycastle.asn1.ASN1OctetString octStr -> b
    org.bouncycastle.asn1.DERInteger iterationCount -> c
    org.bouncycastle.asn1.DERInteger keyLength -> d
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.PKCS12PBEParams -> org.bouncycastle.asn1.pkcs.PKCS12PBEParams:
    org.bouncycastle.asn1.DERInteger iterations -> a
    org.bouncycastle.asn1.ASN1OctetString iv -> b
    java.math.BigInteger getIterations() -> a
    byte[] getIV() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers -> org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers:
    org.bouncycastle.asn1.DERObjectIdentifier rsaEncryption -> b_
    org.bouncycastle.asn1.DERObjectIdentifier md2WithRSAEncryption -> B
    org.bouncycastle.asn1.DERObjectIdentifier md4WithRSAEncryption -> C
    org.bouncycastle.asn1.DERObjectIdentifier md5WithRSAEncryption -> D
    org.bouncycastle.asn1.DERObjectIdentifier sha1WithRSAEncryption -> E
    org.bouncycastle.asn1.DERObjectIdentifier srsaOAEPEncryptionSET -> F
    org.bouncycastle.asn1.DERObjectIdentifier sha256WithRSAEncryption -> G
    org.bouncycastle.asn1.DERObjectIdentifier sha384WithRSAEncryption -> H
    org.bouncycastle.asn1.DERObjectIdentifier sha512WithRSAEncryption -> I
    org.bouncycastle.asn1.DERObjectIdentifier dhKeyAgreement -> b
    org.bouncycastle.asn1.DERObjectIdentifier id_PBES2 -> J
    org.bouncycastle.asn1.DERObjectIdentifier id_PBKDF2 -> K
    org.bouncycastle.asn1.DERObjectIdentifier des_EDE3_CBC -> c
    org.bouncycastle.asn1.DERObjectIdentifier RC2_CBC -> d
    org.bouncycastle.asn1.DERObjectIdentifier md2 -> e
    org.bouncycastle.asn1.DERObjectIdentifier md5 -> f
    org.bouncycastle.asn1.DERObjectIdentifier data -> g
    org.bouncycastle.asn1.DERObjectIdentifier signedData -> h
    org.bouncycastle.asn1.DERObjectIdentifier envelopedData -> i
    org.bouncycastle.asn1.DERObjectIdentifier signedAndEnvelopedData -> j
    org.bouncycastle.asn1.DERObjectIdentifier digestedData -> k
    org.bouncycastle.asn1.DERObjectIdentifier encryptedData -> l
    org.bouncycastle.asn1.DERObjectIdentifier pkcs_9_at_emailAddress -> L
    org.bouncycastle.asn1.DERObjectIdentifier pkcs_9_at_unstructuredName -> M
    org.bouncycastle.asn1.DERObjectIdentifier pkcs_9_at_contentType -> m
    org.bouncycastle.asn1.DERObjectIdentifier pkcs_9_at_messageDigest -> n
    org.bouncycastle.asn1.DERObjectIdentifier pkcs_9_at_signingTime -> o
    org.bouncycastle.asn1.DERObjectIdentifier pkcs_9_at_counterSignature -> N
    org.bouncycastle.asn1.DERObjectIdentifier pkcs_9_at_challengePassword -> O
    org.bouncycastle.asn1.DERObjectIdentifier pkcs_9_at_unstructuredAddress -> P
    org.bouncycastle.asn1.DERObjectIdentifier pkcs_9_at_extendedCertificateAttributes -> Q
    org.bouncycastle.asn1.DERObjectIdentifier pkcs_9_at_signingDescription -> R
    org.bouncycastle.asn1.DERObjectIdentifier pkcs_9_at_extensionRequest -> S
    org.bouncycastle.asn1.DERObjectIdentifier pkcs_9_at_smimeCapabilities -> p
    org.bouncycastle.asn1.DERObjectIdentifier pkcs_9_at_friendlyName -> q
    org.bouncycastle.asn1.DERObjectIdentifier pkcs_9_at_localKeyId -> r
    org.bouncycastle.asn1.DERObjectIdentifier x509certType -> s
    org.bouncycastle.asn1.DERObjectIdentifier id_ct_compressedData -> t
    org.bouncycastle.asn1.DERObjectIdentifier id_alg_PWRI_KEK -> T
    org.bouncycastle.asn1.DERObjectIdentifier preferSignedData -> u
    org.bouncycastle.asn1.DERObjectIdentifier canNotDecryptAny -> v
    org.bouncycastle.asn1.DERObjectIdentifier sMIMECapabilitiesVersions -> w
    org.bouncycastle.asn1.DERObjectIdentifier id_aa_encrypKeyPref -> x
    org.bouncycastle.asn1.DERObjectIdentifier keyBag -> y
    org.bouncycastle.asn1.DERObjectIdentifier pkcs8ShroudedKeyBag -> z
    org.bouncycastle.asn1.DERObjectIdentifier certBag -> A
    org.bouncycastle.asn1.DERObjectIdentifier crlBag -> U
    org.bouncycastle.asn1.DERObjectIdentifier secretBag -> V
    org.bouncycastle.asn1.DERObjectIdentifier safeContentsBag -> W
org.bouncycastle.asn1.pkcs.Pfx -> org.bouncycastle.asn1.pkcs.Pfx:
    org.bouncycastle.asn1.pkcs.ContentInfo contentInfo -> B
    org.bouncycastle.asn1.pkcs.MacData macData -> C
    org.bouncycastle.asn1.pkcs.ContentInfo getAuthSafe() -> a
    org.bouncycastle.asn1.pkcs.MacData getMacData() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.PrivateKeyInfo -> org.bouncycastle.asn1.pkcs.PrivateKeyInfo:
    org.bouncycastle.asn1.DERObject privKey -> B
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> C
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId() -> a
    org.bouncycastle.asn1.DERObject getPrivateKey() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.RC2CBCParameter -> org.bouncycastle.asn1.pkcs.RC2CBCParameter:
    org.bouncycastle.asn1.DERInteger version -> a
    org.bouncycastle.asn1.ASN1OctetString iv -> b
    java.math.BigInteger getRC2ParameterVersion() -> a
    byte[] getIV() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure -> org.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure:
    java.math.BigInteger modulus -> a
    java.math.BigInteger publicExponent -> b
    java.math.BigInteger privateExponent -> c
    java.math.BigInteger prime1 -> d
    java.math.BigInteger prime2 -> e
    java.math.BigInteger exponent1 -> f
    java.math.BigInteger exponent2 -> g
    java.math.BigInteger coefficient -> h
    java.math.BigInteger getModulus() -> a
    java.math.BigInteger getPublicExponent() -> c
    java.math.BigInteger getPrivateExponent() -> d
    java.math.BigInteger getPrime1() -> e
    java.math.BigInteger getPrime2() -> f
    java.math.BigInteger getExponent1() -> g
    java.math.BigInteger getExponent2() -> h
    java.math.BigInteger getCoefficient() -> i
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.SafeBag -> org.bouncycastle.asn1.pkcs.SafeBag:
    org.bouncycastle.asn1.DERObjectIdentifier bagId -> a
    org.bouncycastle.asn1.DERObject bagValue -> b
    org.bouncycastle.asn1.ASN1Set bagAttributes -> c
    org.bouncycastle.asn1.DERObjectIdentifier getBagId() -> a
    org.bouncycastle.asn1.DERObject getBagValue() -> c
    org.bouncycastle.asn1.ASN1Set getBagAttributes() -> d
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.SignedData -> org.bouncycastle.asn1.pkcs.SignedData:
    org.bouncycastle.asn1.DERInteger version -> B
    org.bouncycastle.asn1.ASN1Set digestAlgorithms -> C
    org.bouncycastle.asn1.pkcs.ContentInfo contentInfo -> D
    org.bouncycastle.asn1.ASN1Set certificates -> E
    org.bouncycastle.asn1.ASN1Set crls -> F
    org.bouncycastle.asn1.ASN1Set signerInfos -> G
    org.bouncycastle.asn1.ASN1Set getCertificates() -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.pkcs.SignerInfo -> org.bouncycastle.asn1.pkcs.SignerInfo:
    org.bouncycastle.asn1.DERInteger version -> a
    org.bouncycastle.asn1.pkcs.IssuerAndSerialNumber issuerAndSerialNumber -> b
    org.bouncycastle.asn1.x509.AlgorithmIdentifier digAlgorithm -> c
    org.bouncycastle.asn1.ASN1Set authenticatedAttributes -> d
    org.bouncycastle.asn1.x509.AlgorithmIdentifier digEncryptionAlgorithm -> e
    org.bouncycastle.asn1.ASN1OctetString encryptedDigest -> f
    org.bouncycastle.asn1.ASN1Set unauthenticatedAttributes -> g
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.sec.ECPrivateKeyStructure -> org.bouncycastle.asn1.sec.ECPrivateKeyStructure:
    org.bouncycastle.asn1.ASN1Sequence seq -> a
    java.math.BigInteger getKey() -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.smime.SMIMEAttributes -> org.bouncycastle.asn1.smime.SMIMEAttributes:
    org.bouncycastle.asn1.DERObjectIdentifier smimeCapabilities -> a
    org.bouncycastle.asn1.DERObjectIdentifier encrypKeyPref -> b
org.bouncycastle.asn1.smime.SMIMECapabilities -> org.bouncycastle.asn1.smime.SMIMECapabilities:
    org.bouncycastle.asn1.DERObjectIdentifier preferSignedData -> a
    org.bouncycastle.asn1.DERObjectIdentifier canNotDecryptAny -> b
    org.bouncycastle.asn1.DERObjectIdentifier sMIMECapabilitesVersions -> c
    org.bouncycastle.asn1.DERObjectIdentifier dES_CBC -> d
    org.bouncycastle.asn1.DERObjectIdentifier dES_EDE3_CBC -> e
    org.bouncycastle.asn1.DERObjectIdentifier rC2_CBC -> f
    org.bouncycastle.asn1.ASN1Sequence capabilities -> g
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.smime.SMIMECapabilitiesAttribute -> org.bouncycastle.asn1.smime.SMIMECapabilitiesAttribute:
org.bouncycastle.asn1.smime.SMIMECapability -> org.bouncycastle.asn1.smime.SMIMECapability:
    org.bouncycastle.asn1.DERObjectIdentifier preferSignedData -> a
    org.bouncycastle.asn1.DERObjectIdentifier canNotDecryptAny -> b
    org.bouncycastle.asn1.DERObjectIdentifier sMIMECapabilitiesVersions -> c
    org.bouncycastle.asn1.DERObjectIdentifier dES_CBC -> d
    org.bouncycastle.asn1.DERObjectIdentifier dES_EDE3_CBC -> e
    org.bouncycastle.asn1.DERObjectIdentifier rC2_CBC -> f
    org.bouncycastle.asn1.DERObjectIdentifier capabilityID -> g
    org.bouncycastle.asn1.DEREncodable parameters -> h
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.smime.SMIMECapabilityVector -> org.bouncycastle.asn1.smime.SMIMECapabilityVector:
    org.bouncycastle.asn1.ASN1EncodableVector capabilities -> a
org.bouncycastle.asn1.smime.SMIMEEncryptionKeyPreferenceAttribute -> org.bouncycastle.asn1.smime.SMIMEEncryptionKeyPreferenceAttribute:
org.bouncycastle.asn1.teletrust.TeleTrusTObjectIdentifiers -> org.bouncycastle.asn1.teletrust.TeleTrusTObjectIdentifiers:
    org.bouncycastle.asn1.DERObjectIdentifier ripemd160 -> a
    org.bouncycastle.asn1.DERObjectIdentifier ripemd128 -> b
    org.bouncycastle.asn1.DERObjectIdentifier ripemd256 -> c
    org.bouncycastle.asn1.DERObjectIdentifier rsaSignatureWithripemd160 -> d
    org.bouncycastle.asn1.DERObjectIdentifier rsaSignatureWithripemd128 -> e
    org.bouncycastle.asn1.DERObjectIdentifier rsaSignatureWithripemd256 -> f
org.bouncycastle.asn1.util.ASN1Dump -> org.bouncycastle.asn1.util.ASN1Dump:
    java.lang.String TAB -> a
    java.lang.String _dumpAsString(java.lang.String,org.bouncycastle.asn1.DERObject) -> a
    java.lang.String dumpAsString(java.lang.Object) -> a
org.bouncycastle.asn1.util.DERDump -> org.bouncycastle.asn1.util.DERDump:
org.bouncycastle.asn1.util.Dump -> org.bouncycastle.asn1.util.Dump:
org.bouncycastle.asn1.x509.AlgorithmIdentifier -> org.bouncycastle.asn1.x509.AlgorithmIdentifier:
    org.bouncycastle.asn1.DERObjectIdentifier objectId -> a
    org.bouncycastle.asn1.DEREncodable parameters -> b
    boolean parametersDefined -> c
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object) -> a
    org.bouncycastle.asn1.DERObjectIdentifier getObjectId() -> c
    org.bouncycastle.asn1.DEREncodable getParameters() -> d
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.x509.AttCertIssuer -> org.bouncycastle.asn1.x509.AttCertIssuer:
    org.bouncycastle.asn1.DERObject choiceObj -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.AttCertValidityPeriod -> org.bouncycastle.asn1.x509.AttCertValidityPeriod:
    org.bouncycastle.asn1.DERGeneralizedTime notBeforeTime -> a
    org.bouncycastle.asn1.DERGeneralizedTime notAfterTime -> b
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.AttributeCertificate -> org.bouncycastle.asn1.x509.AttributeCertificate:
    org.bouncycastle.asn1.x509.AttributeCertificateInfo acinfo -> a
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signatureAlgorithm -> b
    org.bouncycastle.asn1.DERBitString signatureValue -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.AttributeCertificateInfo -> org.bouncycastle.asn1.x509.AttributeCertificateInfo:
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.AuthorityInformationAccess -> org.bouncycastle.asn1.x509.AuthorityInformationAccess:
    org.bouncycastle.asn1.DERObjectIdentifier accessMethod -> a
    org.bouncycastle.asn1.x509.GeneralName accessLocation -> b
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.AuthorityKeyIdentifier -> org.bouncycastle.asn1.x509.AuthorityKeyIdentifier:
    org.bouncycastle.asn1.ASN1OctetString keyidentifier -> a
    org.bouncycastle.asn1.x509.GeneralNames certissuer -> b
    org.bouncycastle.asn1.DERInteger certserno -> c
    byte[] getKeyIdentifier() -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.BasicConstraints -> org.bouncycastle.asn1.x509.BasicConstraints:
    org.bouncycastle.asn1.DERBoolean cA -> a
    org.bouncycastle.asn1.DERInteger pathLenConstraint -> b
    org.bouncycastle.asn1.x509.BasicConstraints getInstance(java.lang.Object) -> a
    boolean isCA() -> c
    java.math.BigInteger getPathLenConstraint() -> d
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.CRLDistPoint -> org.bouncycastle.asn1.x509.CRLDistPoint:
    org.bouncycastle.asn1.ASN1Sequence seq -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.CRLNumber -> org.bouncycastle.asn1.x509.CRLNumber:
org.bouncycastle.asn1.x509.CRLReason -> org.bouncycastle.asn1.x509.CRLReason:
org.bouncycastle.asn1.x509.CertPolicyId -> org.bouncycastle.asn1.x509.CertPolicyId:
org.bouncycastle.asn1.x509.CertificateList -> org.bouncycastle.asn1.x509.CertificateList:
    org.bouncycastle.asn1.x509.TBSCertList tbsCertList -> a
    org.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> b
    org.bouncycastle.asn1.DERBitString sig -> c
    org.bouncycastle.asn1.x509.TBSCertList getTBSCertList() -> a
    org.bouncycastle.asn1.x509.TBSCertList$CRLEntry[] getRevokedCertificates() -> c
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> d
    org.bouncycastle.asn1.DERBitString getSignature() -> e
    int getVersion() -> f
    org.bouncycastle.asn1.x509.X509Name getIssuer() -> g
    org.bouncycastle.asn1.x509.Time getThisUpdate() -> h
    org.bouncycastle.asn1.x509.Time getNextUpdate() -> i
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.CertificatePolicies -> org.bouncycastle.asn1.x509.CertificatePolicies:
    org.bouncycastle.asn1.DERObjectIdentifier anyPolicy -> a
    java.util.Vector policies -> b
    org.bouncycastle.asn1.DERObject getDERObject() -> b
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.DSAParameter -> org.bouncycastle.asn1.x509.DSAParameter:
    org.bouncycastle.asn1.DERInteger p -> a
    org.bouncycastle.asn1.DERInteger q -> b
    org.bouncycastle.asn1.DERInteger g -> c
    java.math.BigInteger getP() -> a
    java.math.BigInteger getQ() -> c
    java.math.BigInteger getG() -> d
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.DigestInfo -> org.bouncycastle.asn1.x509.DigestInfo:
    byte[] digest -> a
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> b
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId() -> a
    byte[] getDigest() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.DisplayText -> org.bouncycastle.asn1.x509.DisplayText:
    org.bouncycastle.asn1.DERString contents -> a
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.x509.DistributionPoint -> org.bouncycastle.asn1.x509.DistributionPoint:
    org.bouncycastle.asn1.x509.DistributionPointName distributionPoint -> a
    org.bouncycastle.asn1.x509.ReasonFlags reasons -> b
    org.bouncycastle.asn1.x509.GeneralNames cRLIssuer -> c
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.x509.DistributionPointName -> org.bouncycastle.asn1.x509.DistributionPointName:
    org.bouncycastle.asn1.DEREncodable name -> a
    int type -> b
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.x509.ExtendedKeyUsage -> org.bouncycastle.asn1.x509.ExtendedKeyUsage:
    org.bouncycastle.asn1.ASN1Sequence seq -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.GeneralName -> org.bouncycastle.asn1.x509.GeneralName:
    org.bouncycastle.asn1.DEREncodable obj -> a
    int tag -> b
    boolean isInsideImplicit -> c
    int getTagNo() -> a
    org.bouncycastle.asn1.DEREncodable getName() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.GeneralNames -> org.bouncycastle.asn1.x509.GeneralNames:
    org.bouncycastle.asn1.ASN1Sequence seq -> a
    boolean isInsideImplicit -> b
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.GeneralSubtree -> org.bouncycastle.asn1.x509.GeneralSubtree:
    org.bouncycastle.asn1.x509.GeneralName base -> a
    org.bouncycastle.asn1.DERInteger minimum -> b
    org.bouncycastle.asn1.DERInteger maximum -> c
    org.bouncycastle.asn1.x509.GeneralSubtree getInstance(java.lang.Object) -> a
    org.bouncycastle.asn1.x509.GeneralName getBase() -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.Holder -> org.bouncycastle.asn1.x509.Holder:
    org.bouncycastle.asn1.x509.IssuerSerial baseCertificateID -> a
    org.bouncycastle.asn1.x509.GeneralNames entityName -> b
    org.bouncycastle.asn1.x509.ObjectDigestInfo objectDigestInfo -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.IssuerSerial -> org.bouncycastle.asn1.x509.IssuerSerial:
    org.bouncycastle.asn1.x509.GeneralNames issuer -> a
    org.bouncycastle.asn1.DERInteger serial -> b
    org.bouncycastle.asn1.DERBitString issuerUID -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.IssuingDistributionPoint -> org.bouncycastle.asn1.x509.IssuingDistributionPoint:
    boolean onlyContainsUserCerts -> a
    boolean onlyContainsCACerts -> b
    boolean indirectCRL -> c
    boolean onlyContainsAttributeCerts -> d
    org.bouncycastle.asn1.ASN1Sequence seq -> e
    boolean onlyContainsUserCerts() -> a
    boolean onlyContainsCACerts() -> b
    boolean onlyContainsAttributeCerts() -> c
org.bouncycastle.asn1.x509.KeyPurposeId -> org.bouncycastle.asn1.x509.KeyPurposeId:
    org.bouncycastle.asn1.x509.KeyPurposeId anyExtendedKeyUsage -> a
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_serverAuth -> b
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_clientAuth -> c
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_codeSigning -> d
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_emailProtection -> e
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_ipsecEndSystem -> f
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_ipsecTunnel -> g
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_ipsecUser -> h
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_timeStamping -> i
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_OCSPSigning -> j
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_smartcardlogon -> k
org.bouncycastle.asn1.x509.KeyUsage -> org.bouncycastle.asn1.x509.KeyUsage:
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.NameConstraints -> org.bouncycastle.asn1.x509.NameConstraints:
    org.bouncycastle.asn1.ASN1Sequence permitted -> a
    org.bouncycastle.asn1.ASN1Sequence excluded -> b
    org.bouncycastle.asn1.ASN1Sequence getPermittedSubtrees() -> a
    org.bouncycastle.asn1.ASN1Sequence getExcludedSubtrees() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.NoticeReference -> org.bouncycastle.asn1.x509.NoticeReference:
    org.bouncycastle.asn1.x509.DisplayText organization -> a
    org.bouncycastle.asn1.ASN1Sequence noticeNumbers -> b
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.x509.ObjectDigestInfo -> org.bouncycastle.asn1.x509.ObjectDigestInfo:
    org.bouncycastle.asn1.DEREnumerated digestedObjectType -> a
    org.bouncycastle.asn1.DERObjectIdentifier otherObjectTypeID -> b
    org.bouncycastle.asn1.x509.AlgorithmIdentifier digestAlgorithm -> c
    org.bouncycastle.asn1.DERBitString objectDigest -> d
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.PolicyInformation -> org.bouncycastle.asn1.x509.PolicyInformation:
    org.bouncycastle.asn1.DERObjectIdentifier policyIdentifier -> a
    org.bouncycastle.asn1.ASN1Sequence policyQualifiers -> b
    org.bouncycastle.asn1.x509.PolicyInformation getInstance(java.lang.Object) -> a
    org.bouncycastle.asn1.DERObjectIdentifier getPolicyIdentifier() -> c
    org.bouncycastle.asn1.ASN1Sequence getPolicyQualifiers() -> d
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.x509.PolicyMappings -> org.bouncycastle.asn1.x509.PolicyMappings:
    org.bouncycastle.asn1.ASN1Sequence seq -> a
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.x509.PolicyQualifierId -> org.bouncycastle.asn1.x509.PolicyQualifierId:
    org.bouncycastle.asn1.x509.PolicyQualifierId id_qt_cps -> a
    org.bouncycastle.asn1.x509.PolicyQualifierId id_qt_unotice -> b
org.bouncycastle.asn1.x509.PolicyQualifierInfo -> org.bouncycastle.asn1.x509.PolicyQualifierInfo:
    org.bouncycastle.asn1.DERObjectIdentifier policyQualifierId -> a
    org.bouncycastle.asn1.DEREncodable qualifier -> b
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.x509.RSAPublicKeyStructure -> org.bouncycastle.asn1.x509.RSAPublicKeyStructure:
    java.math.BigInteger modulus -> a
    java.math.BigInteger publicExponent -> b
    java.math.BigInteger getModulus() -> a
    java.math.BigInteger getPublicExponent() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.ReasonFlags -> org.bouncycastle.asn1.x509.ReasonFlags:
org.bouncycastle.asn1.x509.SubjectKeyIdentifier -> org.bouncycastle.asn1.x509.SubjectKeyIdentifier:
    byte[] keyidentifier -> a
    byte[] getKeyIdentifier() -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.SubjectPublicKeyInfo -> org.bouncycastle.asn1.x509.SubjectPublicKeyInfo:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> a
    org.bouncycastle.asn1.DERBitString keyData -> b
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object) -> a
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId() -> a
    org.bouncycastle.asn1.DERObject getPublicKey() -> c
    org.bouncycastle.asn1.DERBitString getPublicKeyData() -> d
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.TBSCertList -> org.bouncycastle.asn1.x509.TBSCertList:
    org.bouncycastle.asn1.ASN1Sequence seq -> f
    org.bouncycastle.asn1.DERInteger version -> a
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> g
    org.bouncycastle.asn1.x509.X509Name issuer -> b
    org.bouncycastle.asn1.x509.Time thisUpdate -> c
    org.bouncycastle.asn1.x509.Time nextUpdate -> d
    org.bouncycastle.asn1.x509.TBSCertList$CRLEntry[] revokedCertificates -> e
    org.bouncycastle.asn1.x509.X509Extensions crlExtensions -> h
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSignature() -> a
    org.bouncycastle.asn1.x509.X509Extensions getExtensions() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.TBSCertList$CRLEntry -> org.bouncycastle.asn1.x509.TBSCertList$CRLEntry:
    org.bouncycastle.asn1.ASN1Sequence seq -> a
    org.bouncycastle.asn1.DERInteger userCertificate -> b
    org.bouncycastle.asn1.x509.Time revocationDate -> c
    org.bouncycastle.asn1.x509.X509Extensions crlEntryExtensions -> d
    org.bouncycastle.asn1.x509.TBSCertList this$0 -> e
    org.bouncycastle.asn1.DERInteger getUserCertificate() -> a
    org.bouncycastle.asn1.x509.Time getRevocationDate() -> c
    org.bouncycastle.asn1.x509.X509Extensions getExtensions() -> d
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.TBSCertificateStructure -> org.bouncycastle.asn1.x509.TBSCertificateStructure:
    org.bouncycastle.asn1.ASN1Sequence seq -> I
    org.bouncycastle.asn1.DERInteger version -> B
    org.bouncycastle.asn1.DERInteger serialNumber -> C
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> J
    org.bouncycastle.asn1.x509.X509Name issuer -> D
    org.bouncycastle.asn1.x509.Time startDate -> E
    org.bouncycastle.asn1.x509.Time endDate -> F
    org.bouncycastle.asn1.x509.X509Name subject -> G
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo subjectPublicKeyInfo -> H
    org.bouncycastle.asn1.DERBitString issuerUniqueId -> K
    org.bouncycastle.asn1.DERBitString subjectUniqueId -> L
    org.bouncycastle.asn1.x509.X509Extensions extensions -> M
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSignature() -> a
    org.bouncycastle.asn1.DERBitString getIssuerUniqueId() -> c
    org.bouncycastle.asn1.DERBitString getSubjectUniqueId() -> d
    org.bouncycastle.asn1.x509.X509Extensions getExtensions() -> e
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.Time -> org.bouncycastle.asn1.x509.Time:
    org.bouncycastle.asn1.DERObject time -> a
    org.bouncycastle.asn1.x509.Time getInstance(java.lang.Object) -> a
    java.lang.String getTime() -> a
    java.util.Date getDate() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.UserNotice -> org.bouncycastle.asn1.x509.UserNotice:
    org.bouncycastle.asn1.x509.NoticeReference noticeRef -> a
    org.bouncycastle.asn1.x509.DisplayText explicitText -> b
    org.bouncycastle.asn1.DERObject toASN1Object() -> a
org.bouncycastle.asn1.x509.V1TBSCertificateGenerator -> org.bouncycastle.asn1.x509.V1TBSCertificateGenerator:
    org.bouncycastle.asn1.DERTaggedObject version -> a
org.bouncycastle.asn1.x509.V2Form -> org.bouncycastle.asn1.x509.V2Form:
    org.bouncycastle.asn1.x509.GeneralNames issuerName -> a
    org.bouncycastle.asn1.x509.IssuerSerial baseCertificateID -> b
    org.bouncycastle.asn1.x509.ObjectDigestInfo objectDigestInfo -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.V2TBSCertListGenerator -> org.bouncycastle.asn1.x509.V2TBSCertListGenerator:
    org.bouncycastle.asn1.DERInteger version -> a
    org.bouncycastle.asn1.x509.Time nextUpdate -> b
    org.bouncycastle.asn1.x509.X509Extensions extensions -> c
    java.util.Vector crlentries -> d
org.bouncycastle.asn1.x509.V3TBSCertificateGenerator -> org.bouncycastle.asn1.x509.V3TBSCertificateGenerator:
    org.bouncycastle.asn1.DERTaggedObject version -> a
org.bouncycastle.asn1.x509.X509CertificateStructure -> org.bouncycastle.asn1.x509.X509CertificateStructure:
    org.bouncycastle.asn1.ASN1Sequence seq -> B
    org.bouncycastle.asn1.x509.TBSCertificateStructure tbsCert -> C
    org.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> D
    org.bouncycastle.asn1.DERBitString sig -> E
    org.bouncycastle.asn1.x509.X509CertificateStructure getInstance(java.lang.Object) -> a
    org.bouncycastle.asn1.x509.TBSCertificateStructure getTBSCertificate() -> a
    int getVersion() -> c
    org.bouncycastle.asn1.DERInteger getSerialNumber() -> d
    org.bouncycastle.asn1.x509.X509Name getIssuer() -> e
    org.bouncycastle.asn1.x509.Time getStartDate() -> f
    org.bouncycastle.asn1.x509.Time getEndDate() -> g
    org.bouncycastle.asn1.x509.X509Name getSubject() -> h
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo() -> i
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> j
    org.bouncycastle.asn1.DERBitString getSignature() -> k
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x509.X509Extension -> org.bouncycastle.asn1.x509.X509Extension:
    boolean critical -> a
    org.bouncycastle.asn1.ASN1OctetString value -> b
    boolean isCritical() -> a
    org.bouncycastle.asn1.ASN1OctetString getValue() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.x509.X509Extensions -> org.bouncycastle.asn1.x509.X509Extensions:
    org.bouncycastle.asn1.DERObjectIdentifier SubjectKeyIdentifier -> n
    org.bouncycastle.asn1.DERObjectIdentifier KeyUsage -> a
    org.bouncycastle.asn1.DERObjectIdentifier PrivateKeyUsagePeriod -> o
    org.bouncycastle.asn1.DERObjectIdentifier SubjectAlternativeName -> b
    org.bouncycastle.asn1.DERObjectIdentifier IssuerAlternativeName -> p
    org.bouncycastle.asn1.DERObjectIdentifier BasicConstraints -> c
    org.bouncycastle.asn1.DERObjectIdentifier CRLNumber -> d
    org.bouncycastle.asn1.DERObjectIdentifier ReasonCode -> q
    org.bouncycastle.asn1.DERObjectIdentifier InstructionCode -> r
    org.bouncycastle.asn1.DERObjectIdentifier InvalidityDate -> s
    org.bouncycastle.asn1.DERObjectIdentifier DeltaCRLIndicator -> e
    org.bouncycastle.asn1.DERObjectIdentifier IssuingDistributionPoint -> f
    org.bouncycastle.asn1.DERObjectIdentifier CertificateIssuer -> t
    org.bouncycastle.asn1.DERObjectIdentifier NameConstraints -> g
    org.bouncycastle.asn1.DERObjectIdentifier CRLDistributionPoints -> u
    org.bouncycastle.asn1.DERObjectIdentifier CertificatePolicies -> h
    org.bouncycastle.asn1.DERObjectIdentifier PolicyMappings -> i
    org.bouncycastle.asn1.DERObjectIdentifier AuthorityKeyIdentifier -> j
    org.bouncycastle.asn1.DERObjectIdentifier PolicyConstraints -> k
    org.bouncycastle.asn1.DERObjectIdentifier ExtendedKeyUsage -> l
    org.bouncycastle.asn1.DERObjectIdentifier InhibitAnyPolicy -> m
    org.bouncycastle.asn1.DERObjectIdentifier AuthorityInfoAccess -> v
    java.util.Hashtable extensions -> w
    java.util.Vector ordering -> x
    org.bouncycastle.asn1.x509.X509Extensions getInstance(java.lang.Object) -> a
    java.util.Enumeration oids() -> a
    org.bouncycastle.asn1.x509.X509Extension getExtension(org.bouncycastle.asn1.DERObjectIdentifier) -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.asn1.x509.X509Name -> org.bouncycastle.asn1.x509.X509Name:
    org.bouncycastle.asn1.DERObjectIdentifier C -> a
    org.bouncycastle.asn1.DERObjectIdentifier O -> b
    org.bouncycastle.asn1.DERObjectIdentifier OU -> c
    org.bouncycastle.asn1.DERObjectIdentifier T -> d
    org.bouncycastle.asn1.DERObjectIdentifier CN -> e
    org.bouncycastle.asn1.DERObjectIdentifier SN -> f
    org.bouncycastle.asn1.DERObjectIdentifier L -> g
    org.bouncycastle.asn1.DERObjectIdentifier ST -> h
    org.bouncycastle.asn1.DERObjectIdentifier SURNAME -> i
    org.bouncycastle.asn1.DERObjectIdentifier GIVENNAME -> j
    org.bouncycastle.asn1.DERObjectIdentifier INITIALS -> k
    org.bouncycastle.asn1.DERObjectIdentifier GENERATION -> l
    org.bouncycastle.asn1.DERObjectIdentifier UNIQUE_IDENTIFIER -> m
    org.bouncycastle.asn1.DERObjectIdentifier EmailAddress -> n
    org.bouncycastle.asn1.DERObjectIdentifier E -> o
    org.bouncycastle.asn1.DERObjectIdentifier DC -> p
    org.bouncycastle.asn1.DERObjectIdentifier UID -> q
    java.util.Hashtable OIDLookUp -> r
    boolean DefaultReverse -> s
    java.util.Hashtable DefaultSymbols -> t
    java.util.Hashtable RFC2253Symbols -> u
    java.util.Hashtable SymbolLookUp -> v
    java.util.Hashtable DefaultLookUp -> w
    java.util.Vector ordering -> x
    java.util.Vector values -> y
    java.util.Vector added -> z
    org.bouncycastle.asn1.ASN1Sequence seq -> A
    org.bouncycastle.asn1.x509.X509Name getInstance(java.lang.Object) -> a
    boolean canBePrintable(java.lang.String) -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void appendValue(java.lang.StringBuffer,java.util.Hashtable,org.bouncycastle.asn1.DERObjectIdentifier,java.lang.String) -> a
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.X509NameTokenizer -> org.bouncycastle.asn1.x509.X509NameTokenizer:
org.bouncycastle.asn1.x509.X509ObjectIdentifiers -> org.bouncycastle.asn1.x509.X509ObjectIdentifiers:
    org.bouncycastle.asn1.DERObjectIdentifier commonName -> c
    org.bouncycastle.asn1.DERObjectIdentifier countryName -> d
    org.bouncycastle.asn1.DERObjectIdentifier localityName -> e
    org.bouncycastle.asn1.DERObjectIdentifier stateOrProvinceName -> f
    org.bouncycastle.asn1.DERObjectIdentifier organization -> g
    org.bouncycastle.asn1.DERObjectIdentifier organizationalUnitName -> h
    org.bouncycastle.asn1.DERObjectIdentifier id_SHA1 -> a
    org.bouncycastle.asn1.DERObjectIdentifier ripemd160 -> i
    org.bouncycastle.asn1.DERObjectIdentifier ripemd160WithRSAEncryption -> j
    org.bouncycastle.asn1.DERObjectIdentifier id_ea_rsa -> a_
    org.bouncycastle.asn1.DERObjectIdentifier ocspAccessMethod -> k
org.bouncycastle.asn1.x9.KeySpecificInfo -> org.bouncycastle.asn1.x9.KeySpecificInfo:
    org.bouncycastle.asn1.DERObjectIdentifier algorithm -> a
    org.bouncycastle.asn1.ASN1OctetString counter -> b
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x9.OtherInfo -> org.bouncycastle.asn1.x9.OtherInfo:
    org.bouncycastle.asn1.x9.KeySpecificInfo keyInfo -> a
    org.bouncycastle.asn1.ASN1OctetString partyAInfo -> b
    org.bouncycastle.asn1.ASN1OctetString suppPubInfo -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x9.X962NamedCurves -> org.bouncycastle.asn1.x9.X962NamedCurves:
    org.bouncycastle.math.ec.ECCurve cFp192v1 -> a
    org.bouncycastle.asn1.x9.X9ECParameters prime192v1 -> b
    org.bouncycastle.math.ec.ECCurve cFp192v2 -> c
    org.bouncycastle.asn1.x9.X9ECParameters prime192v2 -> d
    org.bouncycastle.math.ec.ECCurve cFp192v3 -> e
    org.bouncycastle.asn1.x9.X9ECParameters prime192v3 -> f
    org.bouncycastle.math.ec.ECCurve cFp239v1 -> g
    org.bouncycastle.asn1.x9.X9ECParameters prime239v1 -> h
    org.bouncycastle.math.ec.ECCurve cFp239v2 -> i
    org.bouncycastle.asn1.x9.X9ECParameters prime239v2 -> j
    org.bouncycastle.math.ec.ECCurve cFp239v3 -> k
    org.bouncycastle.asn1.x9.X9ECParameters prime239v3 -> l
    org.bouncycastle.math.ec.ECCurve cFp256v1 -> m
    org.bouncycastle.asn1.x9.X9ECParameters prime256v1 -> n
    java.util.Hashtable objIds -> o
    java.util.Hashtable curves -> p
    java.util.Hashtable names -> q
    org.bouncycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> a
    org.bouncycastle.asn1.x9.X9ECParameters getByOID(org.bouncycastle.asn1.DERObjectIdentifier) -> a
    org.bouncycastle.asn1.DERObjectIdentifier getOID(java.lang.String) -> b
    java.lang.String getName(org.bouncycastle.asn1.DERObjectIdentifier) -> b
org.bouncycastle.asn1.x9.X962Parameters -> org.bouncycastle.asn1.x9.X962Parameters:
    org.bouncycastle.asn1.DERObject params -> a
    boolean isNamedCurve() -> a
    org.bouncycastle.asn1.DERObject getParameters() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x9.X9Curve -> org.bouncycastle.asn1.x9.X9Curve:
    org.bouncycastle.math.ec.ECCurve curve -> m
    byte[] seed -> n
    org.bouncycastle.math.ec.ECCurve getCurve() -> a
    byte[] getSeed() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x9.X9ECParameters -> org.bouncycastle.asn1.x9.X9ECParameters:
    java.math.BigInteger ONE -> m
    org.bouncycastle.asn1.x9.X9FieldID fieldID -> n
    org.bouncycastle.math.ec.ECCurve curve -> o
    org.bouncycastle.math.ec.ECPoint g -> p
    java.math.BigInteger n -> q
    java.math.BigInteger h -> r
    byte[] seed -> s
    org.bouncycastle.math.ec.ECCurve getCurve() -> a
    org.bouncycastle.math.ec.ECPoint getG() -> c
    java.math.BigInteger getN() -> d
    java.math.BigInteger getH() -> e
    byte[] getSeed() -> f
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x9.X9ECPoint -> org.bouncycastle.asn1.x9.X9ECPoint:
    org.bouncycastle.math.ec.ECPoint p -> a
    org.bouncycastle.math.ec.ECPoint getPoint() -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x9.X9FieldElement -> org.bouncycastle.asn1.x9.X9FieldElement:
    org.bouncycastle.math.ec.ECFieldElement f -> a
    org.bouncycastle.math.ec.ECFieldElement getValue() -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x9.X9FieldID -> org.bouncycastle.asn1.x9.X9FieldID:
    org.bouncycastle.asn1.DERObjectIdentifier id -> m
    org.bouncycastle.asn1.DERObject parameters -> n
    org.bouncycastle.asn1.DERObjectIdentifier getIdentifier() -> a
    org.bouncycastle.asn1.DERObject getParameters() -> c
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.asn1.x9.X9ObjectIdentifiers -> org.bouncycastle.asn1.x9.X9ObjectIdentifiers:
    org.bouncycastle.asn1.DERObjectIdentifier prime_field -> a
    org.bouncycastle.asn1.DERObjectIdentifier characteristic_two_field -> b
    org.bouncycastle.asn1.DERObjectIdentifier gnBasis -> m
    org.bouncycastle.asn1.DERObjectIdentifier tpBasis -> n
    org.bouncycastle.asn1.DERObjectIdentifier ppBasis -> o
    org.bouncycastle.asn1.DERObjectIdentifier ecdsa_with_SHA1 -> p
    org.bouncycastle.asn1.DERObjectIdentifier id_ecPublicKey -> c
    org.bouncycastle.asn1.DERObjectIdentifier prime192v1 -> d
    org.bouncycastle.asn1.DERObjectIdentifier prime192v2 -> e
    org.bouncycastle.asn1.DERObjectIdentifier prime192v3 -> f
    org.bouncycastle.asn1.DERObjectIdentifier prime239v1 -> g
    org.bouncycastle.asn1.DERObjectIdentifier prime239v2 -> h
    org.bouncycastle.asn1.DERObjectIdentifier prime239v3 -> i
    org.bouncycastle.asn1.DERObjectIdentifier prime256v1 -> j
    org.bouncycastle.asn1.DERObjectIdentifier dhpublicnumber -> k
    org.bouncycastle.asn1.DERObjectIdentifier id_dsa -> l
    org.bouncycastle.asn1.DERObjectIdentifier id_dsa_with_sha1 -> q
org.bouncycastle.crypto.AsymmetricBlockCipher -> org.bouncycastle.crypto.AsymmetricBlockCipher:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    int getInputBlockSize() -> a
    int getOutputBlockSize() -> b
    byte[] processBlock(byte[],int,int) -> a
org.bouncycastle.crypto.AsymmetricCipherKeyPair -> org.bouncycastle.crypto.AsymmetricCipherKeyPair:
    org.bouncycastle.crypto.CipherParameters publicParam -> a
    org.bouncycastle.crypto.CipherParameters privateParam -> b
    org.bouncycastle.crypto.CipherParameters getPublic() -> a
    org.bouncycastle.crypto.CipherParameters getPrivate() -> b
org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator -> org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator:
org.bouncycastle.crypto.BasicAgreement -> org.bouncycastle.crypto.BasicAgreement:
    void init(org.bouncycastle.crypto.CipherParameters) -> a
    java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters) -> b
org.bouncycastle.crypto.BlockCipher -> org.bouncycastle.crypto.BlockCipher:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
org.bouncycastle.crypto.BufferedAsymmetricBlockCipher -> org.bouncycastle.crypto.BufferedAsymmetricBlockCipher:
    byte[] buf -> a
    int bufOff -> b
    boolean forEncryption -> c
    org.bouncycastle.crypto.AsymmetricBlockCipher cipher -> d
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    int getInputBlockSize() -> a
    int getOutputBlockSize() -> b
    void processBytes(byte[],int,int) -> a
    byte[] doFinal() -> c
    void reset() -> d
org.bouncycastle.crypto.BufferedBlockCipher -> org.bouncycastle.crypto.BufferedBlockCipher:
    byte[] buf -> a
    int bufOff -> b
    boolean forEncryption -> c
    org.bouncycastle.crypto.BlockCipher cipher -> d
    boolean partialBlockOkay -> e
    boolean pgpCFB -> f
    org.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> a
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    int getBlockSize() -> b
    int getUpdateOutputSize(int) -> a
    int getOutputSize(int) -> b
    int processBytes(byte[],int,int,byte[],int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> c
org.bouncycastle.crypto.CipherKeyGenerator -> org.bouncycastle.crypto.CipherKeyGenerator:
    java.security.SecureRandom random -> a
    int strength -> b
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> a
    byte[] generateKey() -> a
org.bouncycastle.crypto.CipherParameters -> org.bouncycastle.crypto.CipherParameters:
org.bouncycastle.crypto.CryptoException -> org.bouncycastle.crypto.CryptoException:
org.bouncycastle.crypto.DSA -> org.bouncycastle.crypto.DSA:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.math.BigInteger[] generateSignature(byte[]) -> a
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> a
org.bouncycastle.crypto.DataLengthException -> org.bouncycastle.crypto.DataLengthException:
org.bouncycastle.crypto.DerivationFunction -> org.bouncycastle.crypto.DerivationFunction:
    void init(org.bouncycastle.crypto.DerivationParameters) -> a
    int generateBytes(byte[],int,int) -> a
org.bouncycastle.crypto.DerivationParameters -> org.bouncycastle.crypto.DerivationParameters:
org.bouncycastle.crypto.Digest -> org.bouncycastle.crypto.Digest:
    java.lang.String getAlgorithmName() -> d
    int getDigestSize() -> e
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> b
    void reset() -> b
org.bouncycastle.crypto.InvalidCipherTextException -> org.bouncycastle.crypto.InvalidCipherTextException:
org.bouncycastle.crypto.KeyGenerationParameters -> org.bouncycastle.crypto.KeyGenerationParameters:
    java.security.SecureRandom random -> a
    int strength -> b
    java.security.SecureRandom getRandom() -> b
    int getStrength() -> c
org.bouncycastle.crypto.Mac -> org.bouncycastle.crypto.Mac:
    void init(org.bouncycastle.crypto.CipherParameters) -> a
    int getMacSize() -> a
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> b
org.bouncycastle.crypto.PBEParametersGenerator -> org.bouncycastle.crypto.PBEParametersGenerator:
    byte[] password -> a
    byte[] salt -> b
    int iterationCount -> c
    void init(byte[],byte[],int) -> a
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> a
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> a
    org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> b
    byte[] PKCS12PasswordToBytes(char[]) -> a
org.bouncycastle.crypto.RuntimeCryptoException -> org.bouncycastle.crypto.RuntimeCryptoException:
org.bouncycastle.crypto.StreamBlockCipher -> org.bouncycastle.crypto.StreamBlockCipher:
    org.bouncycastle.crypto.BlockCipher cipher -> a
    byte[] oneByte -> b
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    void processBytes(byte[],int,int,byte[],int) -> a
    void reset() -> b
org.bouncycastle.crypto.StreamCipher -> org.bouncycastle.crypto.StreamCipher:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    void processBytes(byte[],int,int,byte[],int) -> a
    void reset() -> b
org.bouncycastle.crypto.Wrapper -> org.bouncycastle.crypto.Wrapper:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    byte[] wrap$7dcc7401(byte[],int) -> a
    byte[] unwrap$7dcc7401(byte[],int) -> b
org.bouncycastle.crypto.agreement.DHAgreement -> org.bouncycastle.crypto.agreement.DHAgreement:
org.bouncycastle.crypto.agreement.DHBasicAgreement -> org.bouncycastle.crypto.agreement.DHBasicAgreement:
    org.bouncycastle.crypto.params.DHPrivateKeyParameters key -> a
    org.bouncycastle.crypto.params.DHParameters dhParams -> b
    java.security.SecureRandom random -> c
    void init(org.bouncycastle.crypto.CipherParameters) -> a
    java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters) -> b
org.bouncycastle.crypto.agreement.ECDHBasicAgreement -> org.bouncycastle.crypto.agreement.ECDHBasicAgreement:
    org.bouncycastle.crypto.params.ECPrivateKeyParameters key -> a
    void init(org.bouncycastle.crypto.CipherParameters) -> a
    java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters) -> b
org.bouncycastle.crypto.agreement.ECDHCBasicAgreement -> org.bouncycastle.crypto.agreement.ECDHCBasicAgreement:
    org.bouncycastle.crypto.params.ECPrivateKeyParameters key -> a
    void init(org.bouncycastle.crypto.CipherParameters) -> a
    java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters) -> b
org.bouncycastle.crypto.digests.GeneralDigest -> org.bouncycastle.crypto.digests.GeneralDigest:
    byte[] xBuf -> a
    int xBufOff -> b
    long byteCount -> c
    void update(byte) -> a
    void update(byte[],int,int) -> a
    void finish() -> a
    void reset() -> b
    void processWord(byte[],int) -> a
    void processLength(long) -> a
    void processBlock() -> c
org.bouncycastle.crypto.digests.LongDigest -> org.bouncycastle.crypto.digests.LongDigest:
    byte[] xBuf -> i
    int xBufOff -> j
    long byteCount1 -> k
    long byteCount2 -> l
    long H1 -> a
    long H2 -> b
    long H3 -> c
    long H4 -> d
    long H5 -> e
    long H6 -> f
    long H7 -> g
    long H8 -> h
    long[] W -> m
    int wOff -> n
    long[] K -> o
    void update(byte) -> a
    void update(byte[],int,int) -> a
    void finish() -> a
    void reset() -> b
    void processWord(byte[],int) -> a
    void unpackWord(long,byte[],int) -> a
    void adjustByteCounts() -> c
    void processBlock() -> f
    long rotateRight(long,int) -> a
org.bouncycastle.crypto.digests.MD2Digest -> org.bouncycastle.crypto.digests.MD2Digest:
    byte[] X -> a
    int xOff -> b
    byte[] M -> c
    int mOff -> d
    byte[] C -> e
    int COff -> f
    byte[] S -> g
    java.lang.String getAlgorithmName() -> d
    int getDigestSize() -> e
    int doFinal(byte[],int) -> b
    void reset() -> b
    void update(byte) -> a
    void update(byte[],int,int) -> a
    void processCheckSum(byte[]) -> a
    void processBlock(byte[]) -> b
org.bouncycastle.crypto.digests.MD4Digest -> org.bouncycastle.crypto.digests.MD4Digest:
    int H1 -> a
    int H2 -> b
    int H3 -> c
    int H4 -> d
    int[] X -> e
    int xOff -> f
    java.lang.String getAlgorithmName() -> d
    int getDigestSize() -> e
    void processWord(byte[],int) -> a
    void processLength(long) -> a
    void unpackWord(int,byte[],int) -> a
    int doFinal(byte[],int) -> b
    void reset() -> b
    int rotateLeft(int,int) -> a
    int F(int,int,int) -> a
    int G(int,int,int) -> b
    void processBlock() -> c
org.bouncycastle.crypto.digests.MD5Digest -> org.bouncycastle.crypto.digests.MD5Digest:
    int H1 -> a
    int H2 -> b
    int H3 -> c
    int H4 -> d
    int[] X -> e
    int xOff -> f
    java.lang.String getAlgorithmName() -> d
    int getDigestSize() -> e
    void processWord(byte[],int) -> a
    void processLength(long) -> a
    void unpackWord(int,byte[],int) -> a
    int doFinal(byte[],int) -> b
    void reset() -> b
    int rotateLeft(int,int) -> a
    int F(int,int,int) -> a
    int G(int,int,int) -> b
    void processBlock() -> c
org.bouncycastle.crypto.digests.RIPEMD128Digest -> org.bouncycastle.crypto.digests.RIPEMD128Digest:
    int H0 -> a
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int[] X -> e
    int xOff -> f
    java.lang.String getAlgorithmName() -> d
    int getDigestSize() -> e
    void processWord(byte[],int) -> a
    void processLength(long) -> a
    void unpackWord(int,byte[],int) -> a
    int doFinal(byte[],int) -> b
    void reset() -> b
    int RL(int,int) -> a
    int f2(int,int,int) -> a
    int f4(int,int,int) -> b
    int F1(int,int,int,int,int,int) -> a
    int F2(int,int,int,int,int,int) -> b
    int F3(int,int,int,int,int,int) -> c
    int F4(int,int,int,int,int,int) -> d
    int FF1(int,int,int,int,int,int) -> e
    int FF2(int,int,int,int,int,int) -> f
    int FF3(int,int,int,int,int,int) -> g
    int FF4(int,int,int,int,int,int) -> h
    void processBlock() -> c
org.bouncycastle.crypto.digests.RIPEMD160Digest -> org.bouncycastle.crypto.digests.RIPEMD160Digest:
    int H0 -> a
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int H4 -> e
    int[] X -> f
    int xOff -> g
    java.lang.String getAlgorithmName() -> d
    int getDigestSize() -> e
    void processWord(byte[],int) -> a
    void processLength(long) -> a
    void unpackWord(int,byte[],int) -> a
    int doFinal(byte[],int) -> b
    void reset() -> b
    int RL(int,int) -> a
    int f2(int,int,int) -> a
    int f4(int,int,int) -> b
    void processBlock() -> c
org.bouncycastle.crypto.digests.RIPEMD256Digest -> org.bouncycastle.crypto.digests.RIPEMD256Digest:
    int H0 -> a
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int H4 -> e
    int H5 -> f
    int H6 -> g
    int H7 -> h
    int[] X -> i
    int xOff -> j
    java.lang.String getAlgorithmName() -> d
    int getDigestSize() -> e
    void processWord(byte[],int) -> a
    void processLength(long) -> a
    void unpackWord(int,byte[],int) -> a
    int doFinal(byte[],int) -> b
    void reset() -> b
    int RL(int,int) -> a
    int f2(int,int,int) -> a
    int f4(int,int,int) -> b
    int F1(int,int,int,int,int,int) -> a
    int F2(int,int,int,int,int,int) -> b
    int F3(int,int,int,int,int,int) -> c
    int F4(int,int,int,int,int,int) -> d
    int FF1(int,int,int,int,int,int) -> e
    int FF2(int,int,int,int,int,int) -> f
    int FF3(int,int,int,int,int,int) -> g
    int FF4(int,int,int,int,int,int) -> h
    void processBlock() -> c
org.bouncycastle.crypto.digests.RIPEMD320Digest -> org.bouncycastle.crypto.digests.RIPEMD320Digest:
    int H0 -> a
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int H4 -> e
    int H5 -> f
    int H6 -> g
    int H7 -> h
    int H8 -> i
    int H9 -> j
    int[] X -> k
    int xOff -> l
    java.lang.String getAlgorithmName() -> d
    int getDigestSize() -> e
    void processWord(byte[],int) -> a
    void processLength(long) -> a
    void unpackWord(int,byte[],int) -> a
    int doFinal(byte[],int) -> b
    void reset() -> b
    int RL(int,int) -> a
    int f2(int,int,int) -> a
    int f4(int,int,int) -> b
    void processBlock() -> c
org.bouncycastle.crypto.digests.SHA1Digest -> org.bouncycastle.crypto.digests.SHA1Digest:
    int H1 -> a
    int H2 -> b
    int H3 -> c
    int H4 -> d
    int H5 -> e
    int[] X -> f
    int xOff -> g
    java.lang.String getAlgorithmName() -> d
    int getDigestSize() -> e
    void processWord(byte[],int) -> a
    void unpackWord(int,byte[],int) -> a
    void processLength(long) -> a
    int doFinal(byte[],int) -> b
    void reset() -> b
    int rotateLeft(int,int) -> a
    void processBlock() -> c
org.bouncycastle.crypto.digests.SHA256Digest -> org.bouncycastle.crypto.digests.SHA256Digest:
    int H1 -> a
    int H2 -> b
    int H3 -> c
    int H4 -> d
    int H5 -> e
    int H6 -> f
    int H7 -> g
    int H8 -> h
    int[] X -> i
    int xOff -> j
    int[] K -> k
    java.lang.String getAlgorithmName() -> d
    int getDigestSize() -> e
    void processWord(byte[],int) -> a
    void unpackWord(int,byte[],int) -> a
    void processLength(long) -> a
    int doFinal(byte[],int) -> b
    void reset() -> b
    void processBlock() -> c
    int rotateRight(int,int) -> a
org.bouncycastle.crypto.digests.SHA384Digest -> org.bouncycastle.crypto.digests.SHA384Digest:
    java.lang.String getAlgorithmName() -> d
    int getDigestSize() -> e
    int doFinal(byte[],int) -> b
    void reset() -> b
org.bouncycastle.crypto.digests.SHA512Digest -> org.bouncycastle.crypto.digests.SHA512Digest:
    java.lang.String getAlgorithmName() -> d
    int getDigestSize() -> e
    int doFinal(byte[],int) -> b
    void reset() -> b
org.bouncycastle.crypto.digests.TigerDigest -> org.bouncycastle.crypto.digests.TigerDigest:
    long[] t1 -> a
    long[] t2 -> b
    long[] t3 -> c
    long[] t4 -> d
    long a -> e
    long b -> f
    long c -> g
    long byteCount -> h
    byte[] buf -> i
    int bOff -> j
    long[] x -> k
    int xOff -> l
    java.lang.String getAlgorithmName() -> d
    int getDigestSize() -> e
    void processWord(byte[],int) -> a
    void update(byte) -> a
    void update(byte[],int,int) -> a
    void roundABC(long,long) -> a
    void roundBCA(long,long) -> b
    void roundCAB(long,long) -> c
    void keySchedule() -> a
    void processBlock() -> c
    void unpackWord(long,byte[],int) -> a
    int doFinal(byte[],int) -> b
    void reset() -> b
org.bouncycastle.crypto.encodings.ISO9796d1Encoding -> org.bouncycastle.crypto.encodings.ISO9796d1Encoding:
    byte[] shadows -> a
    byte[] inverse -> b
    org.bouncycastle.crypto.AsymmetricBlockCipher engine -> c
    boolean forEncryption -> d
    int bitSize -> e
    int padBits -> f
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    int getInputBlockSize() -> a
    int getOutputBlockSize() -> b
    byte[] processBlock(byte[],int,int) -> a
org.bouncycastle.crypto.encodings.OAEPEncoding -> org.bouncycastle.crypto.encodings.OAEPEncoding:
    byte[] defHash -> a
    org.bouncycastle.crypto.Digest hash -> b
    org.bouncycastle.crypto.AsymmetricBlockCipher engine -> c
    java.security.SecureRandom random -> d
    boolean forEncryption -> e
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    int getInputBlockSize() -> a
    int getOutputBlockSize() -> b
    byte[] processBlock(byte[],int,int) -> a
    void ItoOSP(int,byte[]) -> a
    byte[] maskGeneratorFunction1(byte[],int,int,int) -> a
org.bouncycastle.crypto.encodings.PKCS1Encoding -> org.bouncycastle.crypto.encodings.PKCS1Encoding:
    int HEADER_LENGTH -> a
    java.security.SecureRandom random -> b
    org.bouncycastle.crypto.AsymmetricBlockCipher engine -> c
    boolean forEncryption -> d
    boolean forPrivateKey -> e
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    int getInputBlockSize() -> a
    int getOutputBlockSize() -> b
    byte[] processBlock(byte[],int,int) -> a
org.bouncycastle.crypto.engines.AESEngine -> org.bouncycastle.crypto.engines.AESEngine:
    byte[] S -> a
    byte[] Si -> b
    int[] rcon -> c
    int[] T0 -> d
    int[] Tinv0 -> e
    int ROUNDS -> f
    int[][] WorkingKey -> g
    int C0 -> h
    int C1 -> i
    int C2 -> j
    int C3 -> k
    boolean forEncryption -> l
    int shift(int,int) -> a
    int FFmulX(int) -> a
    int subWord(int) -> b
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    void unpackBlock(byte[],int) -> a
    void packBlock(byte[],int) -> b
    void encryptBlock(int[][]) -> a
    void decryptBlock(int[][]) -> b
org.bouncycastle.crypto.engines.AESFastEngine -> org.bouncycastle.crypto.engines.AESFastEngine:
    byte[] S -> a
    byte[] Si -> b
    int[] rcon -> c
    int[] T0 -> d
    int[] T1 -> e
    int[] T2 -> f
    int[] T3 -> g
    int[] Tinv0 -> h
    int[] Tinv1 -> i
    int[] Tinv2 -> j
    int[] Tinv3 -> k
    int ROUNDS -> l
    int[][] WorkingKey -> m
    int C0 -> n
    int C1 -> o
    int C2 -> p
    int C3 -> q
    boolean forEncryption -> r
    int shift(int,int) -> a
    int FFmulX(int) -> a
    int subWord(int) -> b
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    void unpackBlock(byte[],int) -> a
    void packBlock(byte[],int) -> b
    void encryptBlock(int[][]) -> a
    void decryptBlock(int[][]) -> b
org.bouncycastle.crypto.engines.AESLightEngine -> org.bouncycastle.crypto.engines.AESLightEngine:
    byte[] S -> a
    byte[] Si -> b
    int[] rcon -> c
    int ROUNDS -> d
    int[][] WorkingKey -> e
    int C0 -> f
    int C1 -> g
    int C2 -> h
    int C3 -> i
    boolean forEncryption -> j
    int shift(int,int) -> a
    int FFmulX(int) -> a
    int mcol(int) -> b
    int inv_mcol(int) -> c
    int subWord(int) -> d
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    void unpackBlock(byte[],int) -> a
    void packBlock(byte[],int) -> b
    void encryptBlock(int[][]) -> a
    void decryptBlock(int[][]) -> b
org.bouncycastle.crypto.engines.AESWrapEngine -> org.bouncycastle.crypto.engines.AESWrapEngine:
    org.bouncycastle.crypto.BlockCipher engine -> a
    org.bouncycastle.crypto.params.KeyParameter param -> b
    boolean forWrapping -> c
    byte[] iv -> d
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    byte[] wrap$7dcc7401(byte[],int) -> a
    byte[] unwrap$7dcc7401(byte[],int) -> b
org.bouncycastle.crypto.engines.BlowfishEngine -> org.bouncycastle.crypto.engines.BlowfishEngine:
    int[] KP -> a
    int[] KS0 -> b
    int[] KS1 -> c
    int[] KS2 -> d
    int[] KS3 -> e
    int[] S0 -> f
    int[] S1 -> g
    int[] S2 -> h
    int[] S3 -> i
    int[] P -> j
    boolean encrypting -> k
    byte[] workingKey -> l
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    int getBlockSize() -> b
    int F(int) -> a
    void processTable(int,int,int[]) -> a
    void encryptBlock(byte[],int,byte[],int) -> b
    void decryptBlock(byte[],int,byte[],int) -> c
    int BytesTo32bits(byte[],int) -> a
    void Bits32ToBytes(int,byte[],int) -> a
org.bouncycastle.crypto.engines.CAST5Engine -> org.bouncycastle.crypto.engines.CAST5Engine:
    int[] S1 -> a
    int[] S2 -> b
    int[] S3 -> c
    int[] S4 -> d
    int[] S5 -> e
    int[] S6 -> f
    int[] S7 -> g
    int[] S8 -> h
    int[] _Kr -> i
    int[] _Km -> j
    boolean _encrypting -> k
    byte[] _workingKey -> l
    int _rounds -> m
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    int getBlockSize() -> b
    void setKey(byte[]) -> a
    int encryptBlock(byte[],int,byte[],int) -> b
    int decryptBlock(byte[],int,byte[],int) -> c
    int F1(int,int,int) -> a
    int F2(int,int,int) -> b
    int F3(int,int,int) -> c
    void Bits32ToInts(int,int[],int) -> a
    int IntsTo32bits(int[],int) -> a
    void Bits32ToBytes(int,byte[],int) -> a
    int BytesTo32bits(byte[],int) -> a
org.bouncycastle.crypto.engines.CAST6Engine -> org.bouncycastle.crypto.engines.CAST6Engine:
    int[] _Kr -> a
    int[] _Km -> b
    int[] _Tr -> c
    int[] _Tm -> d
    int[] _workingKey -> e
    java.lang.String getAlgorithmName() -> a
    void reset() -> c
    int getBlockSize() -> b
    void setKey(byte[]) -> a
    int encryptBlock(byte[],int,byte[],int) -> b
    int decryptBlock(byte[],int,byte[],int) -> c
org.bouncycastle.crypto.engines.DESEngine -> org.bouncycastle.crypto.engines.DESEngine:
    int[] workingKey -> a
    short[] Df_Key -> b
    short[] bytebit -> c
    int[] bigbyte -> d
    byte[] pc1 -> e
    byte[] totrot -> f
    byte[] pc2 -> g
    int[] SP1 -> h
    int[] SP2 -> i
    int[] SP3 -> j
    int[] SP4 -> k
    int[] SP5 -> l
    int[] SP6 -> m
    int[] SP7 -> n
    int[] SP8 -> o
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    int[] generateWorkingKey(boolean,byte[]) -> a
    void desFunc(int[],byte[],int,byte[],int) -> a
org.bouncycastle.crypto.engines.DESedeEngine -> org.bouncycastle.crypto.engines.DESedeEngine:
    int[] workingKey1 -> a
    int[] workingKey2 -> b
    int[] workingKey3 -> c
    boolean forEncryption -> d
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
org.bouncycastle.crypto.engines.DESedeWrapEngine -> org.bouncycastle.crypto.engines.DESedeWrapEngine:
    org.bouncycastle.crypto.modes.CBCBlockCipher engine -> a
    org.bouncycastle.crypto.params.KeyParameter param -> b
    org.bouncycastle.crypto.params.ParametersWithIV paramPlusIV -> c
    byte[] iv -> d
    boolean forWrapping -> e
    byte[] IV2 -> f
    org.bouncycastle.crypto.Digest sha1 -> g
    byte[] digest -> h
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    byte[] wrap$7dcc7401(byte[],int) -> a
    byte[] unwrap$7dcc7401(byte[],int) -> b
    byte[] calculateCMSKeyChecksum(byte[]) -> a
    boolean checkCMSKeyChecksum(byte[],byte[]) -> a
org.bouncycastle.crypto.engines.ElGamalEngine -> org.bouncycastle.crypto.engines.ElGamalEngine:
    org.bouncycastle.crypto.params.ElGamalKeyParameters key -> a
    java.security.SecureRandom random -> b
    boolean forEncryption -> c
    java.math.BigInteger ZERO -> d
    java.math.BigInteger ONE -> e
    java.math.BigInteger TWO -> f
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    int getInputBlockSize() -> a
    int getOutputBlockSize() -> b
    byte[] processBlock(byte[],int,int) -> a
org.bouncycastle.crypto.engines.IDEAEngine -> org.bouncycastle.crypto.engines.IDEAEngine:
    int[] workingKey -> a
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    int bytesToWord(byte[],int) -> a
    void wordToBytes(int,byte[],int) -> a
    int mul(int,int) -> a
    void ideaFunc(int[],byte[],int,byte[],int) -> a
    int[] expandKey(byte[]) -> a
    int mulInv(int) -> a
org.bouncycastle.crypto.engines.IESEngine -> org.bouncycastle.crypto.engines.IESEngine:
    org.bouncycastle.crypto.BasicAgreement agree -> a
    org.bouncycastle.crypto.DerivationFunction kdf -> b
    org.bouncycastle.crypto.Mac mac -> c
    org.bouncycastle.crypto.BufferedBlockCipher cipher -> d
    byte[] macBuf -> e
    boolean forEncryption -> f
    org.bouncycastle.crypto.CipherParameters privParam -> g
    org.bouncycastle.crypto.CipherParameters pubParam -> h
    org.bouncycastle.crypto.params.IESParameters param -> i
    void init(boolean,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters) -> a
    byte[] processBlock$7dcc7401(byte[],int) -> a
org.bouncycastle.crypto.engines.NullEngine -> org.bouncycastle.crypto.engines.NullEngine:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
org.bouncycastle.crypto.engines.RC2Engine -> org.bouncycastle.crypto.engines.RC2Engine:
    byte[] piTable -> a
    int[] workingKey -> b
    boolean encrypting -> c
    int[] generateWorkingKey(byte[],int) -> a
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    void reset() -> c
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    int rotateWordLeft(int,int) -> a
    void encryptBlock(byte[],int,byte[],int) -> b
    void decryptBlock(byte[],int,byte[],int) -> c
org.bouncycastle.crypto.engines.RC2WrapEngine -> org.bouncycastle.crypto.engines.RC2WrapEngine:
    org.bouncycastle.crypto.modes.CBCBlockCipher engine -> a
    org.bouncycastle.crypto.params.KeyParameter param -> b
    org.bouncycastle.crypto.params.ParametersWithIV paramPlusIV -> c
    byte[] iv -> d
    boolean forWrapping -> e
    byte[] IV2 -> f
    org.bouncycastle.crypto.Digest sha1 -> g
    byte[] digest -> h
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    byte[] wrap$7dcc7401(byte[],int) -> a
    byte[] unwrap$7dcc7401(byte[],int) -> b
    byte[] calculateCMSKeyChecksum(byte[]) -> a
    boolean checkCMSKeyChecksum(byte[],byte[]) -> a
org.bouncycastle.crypto.engines.RC4Engine -> org.bouncycastle.crypto.engines.RC4Engine:
    byte[] engineState -> a
    int x -> b
    int y -> c
    byte[] workingKey -> d
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    void processBytes(byte[],int,int,byte[],int) -> a
    void reset() -> b
    void setKey(byte[]) -> a
org.bouncycastle.crypto.engines.RC532Engine -> org.bouncycastle.crypto.engines.RC532Engine:
    int _noRounds -> a
    int[] _S -> b
    boolean forEncryption -> c
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    void setKey(byte[]) -> a
    int rotateLeft(int,int) -> a
    int rotateRight(int,int) -> b
    int bytesToWord(byte[],int) -> a
    void wordToBytes(int,byte[],int) -> a
org.bouncycastle.crypto.engines.RC564Engine -> org.bouncycastle.crypto.engines.RC564Engine:
    int _noRounds -> a
    long[] _S -> b
    boolean forEncryption -> c
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    void setKey(byte[]) -> a
    long rotateLeft(long,long) -> a
    long rotateRight(long,long) -> b
    long bytesToWord(byte[],int) -> a
    void wordToBytes(long,byte[],int) -> a
org.bouncycastle.crypto.engines.RC6Engine -> org.bouncycastle.crypto.engines.RC6Engine:
    int[] _S -> a
    boolean forEncryption -> b
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    void setKey(byte[]) -> a
    int rotateLeft(int,int) -> a
    int rotateRight(int,int) -> b
    int bytesToWord(byte[],int) -> a
    void wordToBytes(int,byte[],int) -> a
org.bouncycastle.crypto.engines.RSAEngine -> org.bouncycastle.crypto.engines.RSAEngine:
    org.bouncycastle.crypto.params.RSAKeyParameters key -> a
    boolean forEncryption -> b
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    int getInputBlockSize() -> a
    int getOutputBlockSize() -> b
    byte[] processBlock(byte[],int,int) -> a
org.bouncycastle.crypto.engines.RijndaelEngine -> org.bouncycastle.crypto.engines.RijndaelEngine:
    byte[] Logtable -> a
    byte[] Alogtable -> b
    byte[] S -> c
    byte[] Si -> d
    int[] rcon -> e
    byte[][] shifts0 -> f
    byte[][] shifts1 -> g
    int BC -> h
    long BC_MASK -> i
    int ROUNDS -> j
    int blockBits -> k
    long[][] workingKey -> l
    long A0 -> m
    long A1 -> n
    long A2 -> o
    long A3 -> p
    boolean forEncryption -> q
    byte[] shifts0SC -> r
    byte[] shifts1SC -> s
    byte mul0x2(int) -> a
    byte mul0x3(int) -> b
    byte mul0x9(int) -> c
    byte mul0xb(int) -> d
    byte mul0xd(int) -> e
    byte mul0xe(int) -> f
    void KeyAddition(long[]) -> a
    long shift(long,int) -> a
    void ShiftRow(byte[]) -> a
    long applyS(long,byte[]) -> a
    void Substitution(byte[]) -> b
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    void unpackBlock(byte[],int) -> a
    void packBlock(byte[],int) -> b
    void encryptBlock(long[][]) -> a
    void decryptBlock(long[][]) -> b
org.bouncycastle.crypto.engines.SerpentEngine -> org.bouncycastle.crypto.engines.SerpentEngine:
    boolean encrypting -> a
    int[] wKey -> b
    int X0 -> c
    int X1 -> d
    int X2 -> e
    int X3 -> f
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    int rotateLeft(int,int) -> a
    int rotateRight(int,int) -> b
    int bytesToWord(byte[],int) -> a
    void wordToBytes(int,byte[],int) -> a
    void sb0(int,int,int,int) -> a
    void ib0(int,int,int,int) -> b
    void sb1(int,int,int,int) -> c
    void ib1(int,int,int,int) -> d
    void sb2(int,int,int,int) -> e
    void ib2(int,int,int,int) -> f
    void sb3(int,int,int,int) -> g
    void ib3(int,int,int,int) -> h
    void sb4(int,int,int,int) -> i
    void ib4(int,int,int,int) -> j
    void sb5(int,int,int,int) -> k
    void ib5(int,int,int,int) -> l
    void sb6(int,int,int,int) -> m
    void ib6(int,int,int,int) -> n
    void sb7(int,int,int,int) -> o
    void ib7(int,int,int,int) -> p
    void LT() -> d
    void inverseLT() -> e
org.bouncycastle.crypto.engines.SkipjackEngine -> org.bouncycastle.crypto.engines.SkipjackEngine:
    short[] ftable -> a
    int[] key0 -> b
    int[] key1 -> c
    int[] key2 -> d
    int[] key3 -> e
    boolean encrypting -> f
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    int g(int,int) -> a
    int encryptBlock(byte[],int,byte[],int) -> b
    int h(int,int) -> b
    int decryptBlock(byte[],int,byte[],int) -> c
org.bouncycastle.crypto.engines.TwofishEngine -> org.bouncycastle.crypto.engines.TwofishEngine:
    byte[][] P -> a
    boolean encrypting -> b
    int[] gMDS0 -> c
    int[] gMDS1 -> d
    int[] gMDS2 -> e
    int[] gMDS3 -> f
    int[] gSubKeys -> g
    int[] gSBox -> h
    int k64Cnt -> i
    byte[] workingKey -> j
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    int getBlockSize() -> b
    void setKey(byte[]) -> a
    void encryptBlock(byte[],int,byte[],int) -> b
    void decryptBlock(byte[],int,byte[],int) -> c
    int F32(int,int[]) -> a
    int RS_MDS_Encode(int,int) -> a
    int RS_rem(int) -> a
    int LFSR2(int) -> b
    int Mx_Y(int) -> c
    int b1(int) -> d
    int b2(int) -> e
    int b3(int) -> f
    int Fe32_0(int) -> g
    int Fe32_3(int) -> h
    int BytesTo32Bits(byte[],int) -> a
    void Bits32ToBytes(int,byte[],int) -> a
org.bouncycastle.crypto.examples.DESExample -> org.bouncycastle.crypto.examples.DESExample:
    boolean encrypt -> a
    org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher cipher -> b
    java.io.BufferedInputStream in -> c
    java.io.BufferedOutputStream out -> d
    byte[] key -> e
org.bouncycastle.crypto.generators.DESKeyGenerator -> org.bouncycastle.crypto.generators.DESKeyGenerator:
    byte[] generateKey() -> a
org.bouncycastle.crypto.generators.DESedeKeyGenerator -> org.bouncycastle.crypto.generators.DESedeKeyGenerator:
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> a
    byte[] generateKey() -> a
org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator -> org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator:
    org.bouncycastle.crypto.params.DHKeyGenerationParameters param -> a
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> a
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> a
org.bouncycastle.crypto.generators.DHKeyPairGenerator -> org.bouncycastle.crypto.generators.DHKeyPairGenerator:
org.bouncycastle.crypto.generators.DHParametersGenerator -> org.bouncycastle.crypto.generators.DHParametersGenerator:
    int size -> a
    int certainty -> b
    java.security.SecureRandom random -> c
    java.math.BigInteger ONE -> d
    java.math.BigInteger TWO -> e
    void init(int,int,java.security.SecureRandom) -> a
    org.bouncycastle.crypto.params.DHParameters generateParameters() -> a
org.bouncycastle.crypto.generators.DSAKeyPairGenerator -> org.bouncycastle.crypto.generators.DSAKeyPairGenerator:
    java.math.BigInteger ZERO -> a
    org.bouncycastle.crypto.params.DSAKeyGenerationParameters param -> b
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> a
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> a
org.bouncycastle.crypto.generators.DSAParametersGenerator -> org.bouncycastle.crypto.generators.DSAParametersGenerator:
    int size -> a
    int certainty -> b
    java.security.SecureRandom random -> c
    java.math.BigInteger ONE -> d
    java.math.BigInteger TWO -> e
    void init(int,int,java.security.SecureRandom) -> a
    void add(byte[],byte[],int) -> a
    org.bouncycastle.crypto.params.DSAParameters generateParameters() -> a
org.bouncycastle.crypto.generators.ECKeyPairGenerator -> org.bouncycastle.crypto.generators.ECKeyPairGenerator:
    org.bouncycastle.crypto.params.ECDomainParameters params -> c
    java.security.SecureRandom random -> d
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> a
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> a
org.bouncycastle.crypto.generators.ElGamalKeyPairGenerator -> org.bouncycastle.crypto.generators.ElGamalKeyPairGenerator:
    org.bouncycastle.crypto.params.ElGamalKeyGenerationParameters param -> a
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> a
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> a
org.bouncycastle.crypto.generators.ElGamalParametersGenerator -> org.bouncycastle.crypto.generators.ElGamalParametersGenerator:
    int size -> a
    int certainty -> b
    java.security.SecureRandom random -> c
    java.math.BigInteger ONE -> d
    java.math.BigInteger TWO -> e
    void init(int,int,java.security.SecureRandom) -> a
    org.bouncycastle.crypto.params.ElGamalParameters generateParameters() -> a
org.bouncycastle.crypto.generators.KDF2BytesGenerator -> org.bouncycastle.crypto.generators.KDF2BytesGenerator:
    org.bouncycastle.crypto.Digest digest -> a
    byte[] shared -> b
    byte[] iv -> c
    void init(org.bouncycastle.crypto.DerivationParameters) -> a
    int generateBytes(byte[],int,int) -> a
org.bouncycastle.crypto.generators.MGF1BytesGenerator -> org.bouncycastle.crypto.generators.MGF1BytesGenerator:
    org.bouncycastle.crypto.Digest digest -> a
    byte[] seed -> b
    int hLen -> c
    void init(org.bouncycastle.crypto.DerivationParameters) -> a
    void ItoOSP(int,byte[]) -> a
    int generateBytes(byte[],int,int) -> a
org.bouncycastle.crypto.generators.PKCS12ParametersGenerator -> org.bouncycastle.crypto.generators.PKCS12ParametersGenerator:
    org.bouncycastle.crypto.Digest digest -> d
    int u -> e
    int v -> f
    byte[] generateDerivedKey(int,int) -> b
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> a
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> a
    org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> b
org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator -> org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator:
    org.bouncycastle.crypto.Digest digest -> d
    byte[] generateDerivedKey() -> a
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> a
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> a
    org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> b
org.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator -> org.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator:
    org.bouncycastle.crypto.Mac hMac -> d
    byte[] generateDerivedKey(int) -> c
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> a
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> a
    org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> b
org.bouncycastle.crypto.generators.RSAKeyPairGenerator -> org.bouncycastle.crypto.generators.RSAKeyPairGenerator:
    java.math.BigInteger ONE -> a
    org.bouncycastle.crypto.params.RSAKeyGenerationParameters param -> b
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> a
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> a
org.bouncycastle.crypto.io.DigestInputStream -> org.bouncycastle.crypto.io.DigestInputStream:
    org.bouncycastle.crypto.Digest digest -> a
    int read() -> read
    int read(byte[],int,int) -> read
    org.bouncycastle.crypto.Digest getDigest() -> a
org.bouncycastle.crypto.io.DigestOutputStream -> org.bouncycastle.crypto.io.DigestOutputStream:
    org.bouncycastle.crypto.Digest digest -> a
    void write(int) -> write
    void write(byte[],int,int) -> write
    org.bouncycastle.crypto.Digest getDigest() -> a
org.bouncycastle.crypto.io.MacInputStream -> org.bouncycastle.crypto.io.MacInputStream:
    org.bouncycastle.crypto.Mac mac -> a
    int read() -> read
    int read(byte[],int,int) -> read
org.bouncycastle.crypto.io.MacOutputStream -> org.bouncycastle.crypto.io.MacOutputStream:
    org.bouncycastle.crypto.Mac mac -> a
    void write(int) -> write
    void write(byte[],int,int) -> write
org.bouncycastle.crypto.macs.BlockCipherMac -> org.bouncycastle.crypto.macs.BlockCipherMac:
    byte[] mac -> a
    byte[] buf -> b
    int bufOff -> c
    org.bouncycastle.crypto.BlockCipher cipher -> d
    int macSize -> e
    void init(org.bouncycastle.crypto.CipherParameters) -> a
    int getMacSize() -> a
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> b
org.bouncycastle.crypto.macs.CBCBlockCipherMac -> org.bouncycastle.crypto.macs.CBCBlockCipherMac:
    byte[] mac -> a
    byte[] buf -> b
    int bufOff -> c
    org.bouncycastle.crypto.BlockCipher cipher -> d
    org.bouncycastle.crypto.paddings.BlockCipherPadding padding -> e
    int macSize -> f
    void init(org.bouncycastle.crypto.CipherParameters) -> a
    int getMacSize() -> a
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> b
org.bouncycastle.crypto.macs.CFBBlockCipherMac -> org.bouncycastle.crypto.macs.CFBBlockCipherMac:
    byte[] mac -> a
    byte[] buf -> b
    int bufOff -> c
    org.bouncycastle.crypto.macs.MacCFBBlockCipher cipher -> d
    org.bouncycastle.crypto.paddings.BlockCipherPadding padding -> e
    int macSize -> f
    void init(org.bouncycastle.crypto.CipherParameters) -> a
    int getMacSize() -> a
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> b
org.bouncycastle.crypto.macs.HMac -> org.bouncycastle.crypto.macs.HMac:
    org.bouncycastle.crypto.Digest digest -> a
    int digestSize -> b
    byte[] inputPad -> c
    byte[] outputPad -> d
    void init(org.bouncycastle.crypto.CipherParameters) -> a
    int getMacSize() -> a
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> b
org.bouncycastle.crypto.macs.MacCFBBlockCipher -> org.bouncycastle.crypto.macs.a:
    byte[] IV -> a
    byte[] cfbV -> b
    byte[] cfbOutV -> c
    int blockSize -> d
    org.bouncycastle.crypto.BlockCipher cipher -> e
    boolean encrypting -> f
    void init(org.bouncycastle.crypto.CipherParameters) -> a
    int getBlockSize() -> a
    int processBlock$3ccaca28(byte[],int,byte[]) -> a
    void reset() -> b
    void getMacBlock(byte[]) -> a
org.bouncycastle.crypto.modes.CBCBlockCipher -> org.bouncycastle.crypto.modes.CBCBlockCipher:
    byte[] IV -> a
    byte[] cbcV -> b
    byte[] cbcNextV -> c
    int blockSize -> d
    org.bouncycastle.crypto.BlockCipher cipher -> e
    boolean encrypting -> f
    org.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> d
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
org.bouncycastle.crypto.modes.CFBBlockCipher -> org.bouncycastle.crypto.modes.CFBBlockCipher:
    byte[] IV -> a
    byte[] cfbV -> b
    byte[] cfbOutV -> c
    int blockSize -> d
    org.bouncycastle.crypto.BlockCipher cipher -> e
    boolean encrypting -> f
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
org.bouncycastle.crypto.modes.CTSBlockCipher -> org.bouncycastle.crypto.modes.CTSBlockCipher:
    int blockSize -> e
    int getUpdateOutputSize(int) -> a
    int getOutputSize(int) -> b
    int processBytes(byte[],int,int,byte[],int) -> a
    int doFinal(byte[],int) -> a
org.bouncycastle.crypto.modes.OFBBlockCipher -> org.bouncycastle.crypto.modes.OFBBlockCipher:
    byte[] IV -> a
    byte[] ofbV -> b
    byte[] ofbOutV -> c
    int blockSize -> d
    org.bouncycastle.crypto.BlockCipher cipher -> e
    boolean encrypting -> f
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
org.bouncycastle.crypto.modes.OpenPGPCFBBlockCipher -> org.bouncycastle.crypto.modes.OpenPGPCFBBlockCipher:
    byte[] IV -> a
    byte[] FR -> b
    byte[] FRE -> c
    byte[] tmp -> d
    org.bouncycastle.crypto.BlockCipher cipher -> e
    int count -> f
    int blockSize -> g
    boolean forEncryption -> h
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    byte encryptByte(byte,int) -> a
org.bouncycastle.crypto.modes.PGPCFBBlockCipher -> org.bouncycastle.crypto.modes.PGPCFBBlockCipher:
    byte[] IV -> a
    byte[] FR -> b
    byte[] FRE -> c
    byte[] tmp -> d
    org.bouncycastle.crypto.BlockCipher cipher -> e
    int count -> f
    int blockSize -> g
    boolean forEncryption -> h
    boolean inlineIv -> i
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    byte encryptByte(byte,int) -> a
org.bouncycastle.crypto.modes.PaddedBlockCipher -> org.bouncycastle.crypto.modes.PaddedBlockCipher:
    int getOutputSize(int) -> b
    int getUpdateOutputSize(int) -> a
    int processBytes(byte[],int,int,byte[],int) -> a
    int doFinal(byte[],int) -> a
org.bouncycastle.crypto.modes.SICBlockCipher -> org.bouncycastle.crypto.modes.SICBlockCipher:
    org.bouncycastle.crypto.BlockCipher cipher -> a
    int blockSize -> b
    byte[] IV -> c
    byte[] counter -> d
    byte[] counterOut -> e
    boolean encrypting -> f
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.lang.String getAlgorithmName() -> a
    int getBlockSize() -> b
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> c
org.bouncycastle.crypto.paddings.BlockCipherPadding -> org.bouncycastle.crypto.paddings.BlockCipherPadding:
    void init(java.security.SecureRandom) -> a
    int addPadding(byte[],int) -> a
    int padCount(byte[]) -> a
org.bouncycastle.crypto.paddings.ISO10126d2Padding -> org.bouncycastle.crypto.paddings.ISO10126d2Padding:
    java.security.SecureRandom random -> a
    void init(java.security.SecureRandom) -> a
    int addPadding(byte[],int) -> a
    int padCount(byte[]) -> a
org.bouncycastle.crypto.paddings.PKCS7Padding -> org.bouncycastle.crypto.paddings.PKCS7Padding:
    void init(java.security.SecureRandom) -> a
    int addPadding(byte[],int) -> a
    int padCount(byte[]) -> a
org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher -> org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher:
    org.bouncycastle.crypto.paddings.BlockCipherPadding padding -> e
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    int getOutputSize(int) -> b
    int getUpdateOutputSize(int) -> a
    int processBytes(byte[],int,int,byte[],int) -> a
    int doFinal(byte[],int) -> a
org.bouncycastle.crypto.paddings.X923Padding -> org.bouncycastle.crypto.paddings.X923Padding:
    java.security.SecureRandom random -> a
    void init(java.security.SecureRandom) -> a
    int addPadding(byte[],int) -> a
    int padCount(byte[]) -> a
org.bouncycastle.crypto.paddings.ZeroBytePadding -> org.bouncycastle.crypto.paddings.ZeroBytePadding:
    void init(java.security.SecureRandom) -> a
    int addPadding(byte[],int) -> a
    int padCount(byte[]) -> a
org.bouncycastle.crypto.params.AsymmetricKeyParameter -> org.bouncycastle.crypto.params.AsymmetricKeyParameter:
    boolean privateKey -> a
    boolean isPrivate() -> g
org.bouncycastle.crypto.params.DESParameters -> org.bouncycastle.crypto.params.DESParameters:
    byte[] DES_weak_keys -> a
    boolean isWeakKey(byte[],int) -> a
    void setOddParity(byte[]) -> a
org.bouncycastle.crypto.params.DESedeParameters -> org.bouncycastle.crypto.params.DESedeParameters:
org.bouncycastle.crypto.params.DHKeyGenerationParameters -> org.bouncycastle.crypto.params.DHKeyGenerationParameters:
    org.bouncycastle.crypto.params.DHParameters params -> a
    org.bouncycastle.crypto.params.DHParameters getParameters() -> a
org.bouncycastle.crypto.params.DHKeyParameters -> org.bouncycastle.crypto.params.DHKeyParameters:
    org.bouncycastle.crypto.params.DHParameters params -> a
    org.bouncycastle.crypto.params.DHParameters getParameters() -> b
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.DHParameters -> org.bouncycastle.crypto.params.DHParameters:
    java.math.BigInteger g -> a
    java.math.BigInteger p -> b
    java.math.BigInteger q -> c
    int j -> d
    org.bouncycastle.crypto.params.DHValidationParameters validation -> e
    java.math.BigInteger getP() -> a
    java.math.BigInteger getG() -> b
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.DHPrivateKeyParameters -> org.bouncycastle.crypto.params.DHPrivateKeyParameters:
    java.math.BigInteger x -> a
    java.math.BigInteger getX() -> a
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.DHPublicKeyParameters -> org.bouncycastle.crypto.params.DHPublicKeyParameters:
    java.math.BigInteger y -> a
    java.math.BigInteger getY() -> a
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.DHValidationParameters -> org.bouncycastle.crypto.params.DHValidationParameters:
    byte[] seed -> a
    int counter -> b
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.DSAKeyGenerationParameters -> org.bouncycastle.crypto.params.DSAKeyGenerationParameters:
    org.bouncycastle.crypto.params.DSAParameters params -> a
    org.bouncycastle.crypto.params.DSAParameters getParameters() -> a
org.bouncycastle.crypto.params.DSAKeyParameters -> org.bouncycastle.crypto.params.DSAKeyParameters:
    org.bouncycastle.crypto.params.DSAParameters params -> a
    org.bouncycastle.crypto.params.DSAParameters getParameters() -> b
org.bouncycastle.crypto.params.DSAParameters -> org.bouncycastle.crypto.params.DSAParameters:
    java.math.BigInteger g -> a
    java.math.BigInteger q -> b
    java.math.BigInteger p -> c
    org.bouncycastle.crypto.params.DSAValidationParameters validation -> d
    java.math.BigInteger getP() -> a
    java.math.BigInteger getQ() -> b
    java.math.BigInteger getG() -> c
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.DSAPrivateKeyParameters -> org.bouncycastle.crypto.params.DSAPrivateKeyParameters:
    java.math.BigInteger x -> a
    java.math.BigInteger getX() -> a
org.bouncycastle.crypto.params.DSAPublicKeyParameters -> org.bouncycastle.crypto.params.DSAPublicKeyParameters:
    java.math.BigInteger y -> a
    java.math.BigInteger getY() -> a
org.bouncycastle.crypto.params.DSAValidationParameters -> org.bouncycastle.crypto.params.DSAValidationParameters:
    byte[] seed -> a
    int counter -> b
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.ECDomainParameters -> org.bouncycastle.crypto.params.ECDomainParameters:
    org.bouncycastle.math.ec.ECCurve curve -> d
    byte[] seed -> e
    org.bouncycastle.math.ec.ECPoint G -> f
    java.math.BigInteger n -> c
    java.math.BigInteger h -> g
    org.bouncycastle.math.ec.ECCurve getCurve() -> a
    org.bouncycastle.math.ec.ECPoint getG() -> b
    java.math.BigInteger getN() -> c
    java.math.BigInteger getH() -> d
    byte[] getSeed() -> e
org.bouncycastle.crypto.params.ECKeyGenerationParameters -> org.bouncycastle.crypto.params.ECKeyGenerationParameters:
    org.bouncycastle.crypto.params.ECDomainParameters domainParams -> a
    org.bouncycastle.crypto.params.ECDomainParameters getDomainParameters() -> a
org.bouncycastle.crypto.params.ECKeyParameters -> org.bouncycastle.crypto.params.ECKeyParameters:
    org.bouncycastle.crypto.params.ECDomainParameters params -> a
    org.bouncycastle.crypto.params.ECDomainParameters getParameters() -> a
org.bouncycastle.crypto.params.ECPrivateKeyParameters -> org.bouncycastle.crypto.params.ECPrivateKeyParameters:
    java.math.BigInteger d -> a
    java.math.BigInteger getD() -> b
org.bouncycastle.crypto.params.ECPublicKeyParameters -> org.bouncycastle.crypto.params.ECPublicKeyParameters:
    org.bouncycastle.math.ec.ECPoint Q -> a
    org.bouncycastle.math.ec.ECPoint getQ() -> b
org.bouncycastle.crypto.params.ElGamalKeyGenerationParameters -> org.bouncycastle.crypto.params.ElGamalKeyGenerationParameters:
    org.bouncycastle.crypto.params.ElGamalParameters params -> a
    org.bouncycastle.crypto.params.ElGamalParameters getParameters() -> a
org.bouncycastle.crypto.params.ElGamalKeyParameters -> org.bouncycastle.crypto.params.ElGamalKeyParameters:
    org.bouncycastle.crypto.params.ElGamalParameters params -> a
    org.bouncycastle.crypto.params.ElGamalParameters getParameters() -> a
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.ElGamalParameters -> org.bouncycastle.crypto.params.ElGamalParameters:
    java.math.BigInteger g -> a
    java.math.BigInteger p -> b
    java.math.BigInteger getP() -> a
    java.math.BigInteger getG() -> b
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.ElGamalPrivateKeyParameters -> org.bouncycastle.crypto.params.ElGamalPrivateKeyParameters:
    java.math.BigInteger x -> a
    java.math.BigInteger getX() -> b
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.ElGamalPublicKeyParameters -> org.bouncycastle.crypto.params.ElGamalPublicKeyParameters:
    java.math.BigInteger y -> a
    java.math.BigInteger getY() -> b
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.IESParameters -> org.bouncycastle.crypto.params.IESParameters:
    byte[] derivation -> a
    byte[] encoding -> b
    int macKeySize -> c
    byte[] getDerivationV() -> a
    byte[] getEncodingV() -> b
    int getMacKeySize() -> c
org.bouncycastle.crypto.params.IESWithCipherParameters -> org.bouncycastle.crypto.params.IESWithCipherParameters:
    int cipherKeySize -> a
    int getCipherKeySize() -> d
org.bouncycastle.crypto.params.KDFParameters -> org.bouncycastle.crypto.params.KDFParameters:
    byte[] iv -> a
    byte[] shared -> b
    byte[] getSharedSecret() -> a
    byte[] getIV() -> b
org.bouncycastle.crypto.params.KeyParameter -> org.bouncycastle.crypto.params.KeyParameter:
    byte[] key -> a
    byte[] getKey() -> a
org.bouncycastle.crypto.params.MGFParameters -> org.bouncycastle.crypto.params.MGFParameters:
    byte[] seed -> a
    byte[] getSeed() -> a
org.bouncycastle.crypto.params.ParametersWithIV -> org.bouncycastle.crypto.params.ParametersWithIV:
    byte[] iv -> a
    org.bouncycastle.crypto.CipherParameters parameters -> b
    byte[] getIV() -> a
    org.bouncycastle.crypto.CipherParameters getParameters() -> b
org.bouncycastle.crypto.params.ParametersWithRandom -> org.bouncycastle.crypto.params.ParametersWithRandom:
    java.security.SecureRandom random -> a
    org.bouncycastle.crypto.CipherParameters parameters -> b
    java.security.SecureRandom getRandom() -> a
    org.bouncycastle.crypto.CipherParameters getParameters() -> b
org.bouncycastle.crypto.params.RC2Parameters -> org.bouncycastle.crypto.params.RC2Parameters:
    byte[] key -> a
    int bits -> b
    byte[] getKey() -> a
    int getEffectiveKeyBits() -> b
org.bouncycastle.crypto.params.RC5Parameters -> org.bouncycastle.crypto.params.RC5Parameters:
    byte[] key -> a
    int rounds -> b
    byte[] getKey() -> a
    int getRounds() -> b
org.bouncycastle.crypto.params.RSAKeyGenerationParameters -> org.bouncycastle.crypto.params.RSAKeyGenerationParameters:
    java.math.BigInteger publicExponent -> a
    int certainty -> b
    java.math.BigInteger getPublicExponent() -> a
    int getCertainty() -> d
org.bouncycastle.crypto.params.RSAKeyParameters -> org.bouncycastle.crypto.params.RSAKeyParameters:
    java.math.BigInteger modulus -> a
    java.math.BigInteger exponent -> b
    java.math.BigInteger getModulus() -> h
    java.math.BigInteger getExponent() -> i
org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters -> org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters:
    java.math.BigInteger e -> a
    java.math.BigInteger p -> b
    java.math.BigInteger q -> c
    java.math.BigInteger dP -> d
    java.math.BigInteger dQ -> e
    java.math.BigInteger qInv -> f
    java.math.BigInteger getPublicExponent() -> a
    java.math.BigInteger getP() -> b
    java.math.BigInteger getQ() -> c
    java.math.BigInteger getDP() -> d
    java.math.BigInteger getDQ() -> e
    java.math.BigInteger getQInv() -> f
org.bouncycastle.crypto.signers.DSASigner -> org.bouncycastle.crypto.signers.DSASigner:
    org.bouncycastle.crypto.params.DSAKeyParameters key -> a
    java.security.SecureRandom random -> b
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.math.BigInteger[] generateSignature(byte[]) -> a
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> a
org.bouncycastle.crypto.signers.ECDSASigner -> org.bouncycastle.crypto.signers.ECDSASigner:
    org.bouncycastle.crypto.params.ECKeyParameters key -> c
    java.security.SecureRandom random -> d
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    java.math.BigInteger[] generateSignature(byte[]) -> a
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> a
org.bouncycastle.crypto.signers.ISO9796d2Signer -> org.bouncycastle.crypto.signers.ISO9796d2Signer:
    org.bouncycastle.crypto.Digest digest -> a
    org.bouncycastle.crypto.AsymmetricBlockCipher cipher -> b
    int trailer -> c
    int keyBits -> d
    byte[] block -> e
    byte[] mBuf -> f
    int messageLength -> g
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    void clearBlock(byte[]) -> b
    void update(byte) -> a
    void update(byte[],int,int) -> a
    byte[] generateSignature() -> a
    boolean verifySignature(byte[]) -> a
org.bouncycastle.crypto.signers.PSSSigner -> org.bouncycastle.crypto.signers.PSSSigner:
    org.bouncycastle.crypto.Digest digest -> a
    org.bouncycastle.crypto.AsymmetricBlockCipher cipher -> b
    java.security.SecureRandom random -> c
    int hLen -> d
    int sLen -> e
    int emBits -> f
    byte[] salt -> g
    byte[] mDash -> h
    byte[] block -> i
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> a
    void clearBlock(byte[]) -> b
    void update(byte) -> a
    void update(byte[],int,int) -> a
    byte[] generateSignature() -> a
    boolean verifySignature(byte[]) -> a
    void ItoOSP(int,byte[]) -> a
    byte[] maskGeneratorFunction1(byte[],int,int,int) -> a
org.bouncycastle.jce.ECNamedCurveTable -> org.bouncycastle.jce.ECNamedCurveTable:
    org.bouncycastle.jce.spec.ECNamedCurveParameterSpec getParameterSpec(java.lang.String) -> a
org.bouncycastle.jce.PKCS10CertificationRequest -> org.bouncycastle.jce.PKCS10CertificationRequest:
    java.util.Hashtable algorithms -> a
    java.util.Hashtable oids -> b
org.bouncycastle.jce.PKCS7SignedData -> org.bouncycastle.jce.PKCS7SignedData:
org.bouncycastle.jce.PrincipalUtil -> org.bouncycastle.jce.PrincipalUtil:
org.bouncycastle.jce.X509KeyUsage -> org.bouncycastle.jce.X509KeyUsage:
    int usage -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.jce.X509Principal -> org.bouncycastle.jce.X509Principal:
    java.lang.String getName() -> getName
org.bouncycastle.jce.X509V1CertificateGenerator -> org.bouncycastle.jce.X509V1CertificateGenerator:
    org.bouncycastle.asn1.x509.V1TBSCertificateGenerator tbsGen -> a
    java.util.Hashtable algorithms -> b
org.bouncycastle.jce.X509V2CRLGenerator -> org.bouncycastle.jce.X509V2CRLGenerator:
    java.text.SimpleDateFormat dateF -> a
    java.util.SimpleTimeZone tz -> b
    org.bouncycastle.asn1.x509.V2TBSCertListGenerator tbsGen -> c
    java.util.Hashtable extensions -> d
    java.util.Vector extOrdering -> e
    java.util.Hashtable algorithms -> f
org.bouncycastle.jce.X509V3CertificateGenerator -> org.bouncycastle.jce.X509V3CertificateGenerator:
    org.bouncycastle.asn1.x509.V3TBSCertificateGenerator tbsGen -> a
    java.util.Hashtable extensions -> b
    java.util.Vector extOrdering -> c
    java.util.Hashtable algorithms -> d
org.bouncycastle.jce.examples.PKCS12Example -> org.bouncycastle.jce.examples.PKCS12Example:
    char[] passwd -> a
    org.bouncycastle.jce.X509V1CertificateGenerator v1CertGen -> b
    org.bouncycastle.jce.X509V3CertificateGenerator v3CertGen -> c
org.bouncycastle.jce.interfaces.BCKeyStore -> org.bouncycastle.jce.interfaces.BCKeyStore:
org.bouncycastle.jce.interfaces.ECKey -> org.bouncycastle.jce.interfaces.ECKey:
    org.bouncycastle.jce.spec.ECParameterSpec getParams() -> a
org.bouncycastle.jce.interfaces.ECPrivateKey -> org.bouncycastle.jce.interfaces.ECPrivateKey:
    java.math.BigInteger getD() -> b
org.bouncycastle.jce.interfaces.ECPublicKey -> org.bouncycastle.jce.interfaces.ECPublicKey:
    org.bouncycastle.math.ec.ECPoint getQ() -> b
org.bouncycastle.jce.interfaces.ElGamalKey -> org.bouncycastle.jce.interfaces.ElGamalKey:
    org.bouncycastle.jce.spec.ElGamalParameterSpec getParams() -> a
org.bouncycastle.jce.interfaces.ElGamalPrivateKey -> org.bouncycastle.jce.interfaces.ElGamalPrivateKey:
    java.math.BigInteger getX() -> b
org.bouncycastle.jce.interfaces.ElGamalPublicKey -> org.bouncycastle.jce.interfaces.ElGamalPublicKey:
    java.math.BigInteger getY() -> b
org.bouncycastle.jce.interfaces.IESKey -> org.bouncycastle.jce.interfaces.IESKey:
    java.security.PublicKey getPublic() -> a
    java.security.PrivateKey getPrivate() -> b
org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier -> org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier:
    void setBagAttribute(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.DEREncodable) -> a
    org.bouncycastle.asn1.DEREncodable getBagAttribute(org.bouncycastle.asn1.DERObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
org.bouncycastle.jce.netscape.NetscapeCertRequest -> org.bouncycastle.jce.netscape.NetscapeCertRequest:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlg -> a
    byte[] sigBits -> b
    java.lang.String challenge -> c
    java.security.PublicKey pubkey -> d
    org.bouncycastle.asn1.DERObject getKeySpec() -> a
    org.bouncycastle.asn1.DERObject getDERObject() -> b
org.bouncycastle.jce.provider.BouncyCastleProvider -> org.bouncycastle.jce.provider.BouncyCastleProvider:
    java.lang.String info -> a
    java.lang.String PROVIDER_NAME -> b
org.bouncycastle.jce.provider.BrokenJCEBlockCipher -> org.bouncycastle.jce.provider.BrokenJCEBlockCipher:
    java.lang.Class[] availableSpecs -> a
    org.bouncycastle.crypto.BufferedBlockCipher cipher -> b
    int pbeType -> c
    int pbeHash -> d
    int pbeKeySize -> e
    int pbeIvSize -> f
    int ivLength -> g
    java.security.AlgorithmParameters engineParams -> h
    java.lang.Class class$javax$crypto$spec$IvParameterSpec -> i
    java.lang.Class class$javax$crypto$spec$PBEParameterSpec -> j
    java.lang.Class class$javax$crypto$spec$RC2ParameterSpec -> k
    java.lang.Class class$javax$crypto$spec$RC5ParameterSpec -> l
    java.lang.Class class$(java.lang.String) -> a
org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithMD5AndDES -> org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithMD5AndDES:
org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHA1AndDES -> org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHA1AndDES:
org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHAAndDES2Key -> org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHAAndDES2Key:
org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHAAndDES3Key -> org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHAAndDES3Key:
org.bouncycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndDES3Key -> org.bouncycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndDES3Key:
org.bouncycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndTwofish -> org.bouncycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndTwofish:
org.bouncycastle.jce.provider.BrokenPBE -> org.bouncycastle.jce.provider.BrokenPBE:
org.bouncycastle.jce.provider.BrokenPBE$Util -> org.bouncycastle.jce.provider.BrokenPBE$Util:
org.bouncycastle.jce.provider.CertStoreCollectionSpi -> org.bouncycastle.jce.provider.CertStoreCollectionSpi:
    java.security.cert.CollectionCertStoreParameters params -> a
    java.util.Collection engineGetCertificates(java.security.cert.CertSelector) -> engineGetCertificates
    java.util.Collection engineGetCRLs(java.security.cert.CRLSelector) -> engineGetCRLs
org.bouncycastle.jce.provider.DHUtil -> org.bouncycastle.jce.provider.DHUtil:
org.bouncycastle.jce.provider.DSAUtil -> org.bouncycastle.jce.provider.DSAUtil:
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> a
org.bouncycastle.jce.provider.ECUtil -> org.bouncycastle.jce.provider.ECUtil:
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> a
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> a
org.bouncycastle.jce.provider.ElGamalUtil -> org.bouncycastle.jce.provider.ElGamalUtil:
org.bouncycastle.jce.provider.JCEBlockCipher -> org.bouncycastle.jce.provider.JCEBlockCipher:
    java.lang.Class[] availableSpecs -> a
    org.bouncycastle.crypto.BlockCipher baseEngine -> b
    org.bouncycastle.crypto.BufferedBlockCipher cipher -> c
    org.bouncycastle.crypto.params.ParametersWithIV ivParam -> d
    int pbeType -> e
    int pbeHash -> f
    int pbeKeySize -> g
    int pbeIvSize -> h
    int ivLength -> i
    java.security.AlgorithmParameters engineParams -> j
    boolean padded -> k
    java.lang.Class class$javax$crypto$spec$RC2ParameterSpec -> l
    java.lang.Class class$javax$crypto$spec$RC5ParameterSpec -> m
    java.lang.Class class$javax$crypto$spec$IvParameterSpec -> n
    java.lang.Class class$javax$crypto$spec$PBEParameterSpec -> o
    int engineGetBlockSize() -> engineGetBlockSize
    byte[] engineGetIV() -> engineGetIV
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
    java.lang.Class class$(java.lang.String) -> a
org.bouncycastle.jce.provider.JCEBlockCipher$AES -> org.bouncycastle.jce.provider.JCEBlockCipher$AES:
org.bouncycastle.jce.provider.JCEBlockCipher$AESCBC -> org.bouncycastle.jce.provider.JCEBlockCipher$AESCBC:
org.bouncycastle.jce.provider.JCEBlockCipher$Blowfish -> org.bouncycastle.jce.provider.JCEBlockCipher$Blowfish:
org.bouncycastle.jce.provider.JCEBlockCipher$CAST5 -> org.bouncycastle.jce.provider.JCEBlockCipher$CAST5:
org.bouncycastle.jce.provider.JCEBlockCipher$CAST5CBC -> org.bouncycastle.jce.provider.JCEBlockCipher$CAST5CBC:
org.bouncycastle.jce.provider.JCEBlockCipher$CAST6 -> org.bouncycastle.jce.provider.JCEBlockCipher$CAST6:
org.bouncycastle.jce.provider.JCEBlockCipher$DES -> org.bouncycastle.jce.provider.JCEBlockCipher$DES:
org.bouncycastle.jce.provider.JCEBlockCipher$DESCBC -> org.bouncycastle.jce.provider.JCEBlockCipher$DESCBC:
org.bouncycastle.jce.provider.JCEBlockCipher$DESede -> org.bouncycastle.jce.provider.JCEBlockCipher$DESede:
org.bouncycastle.jce.provider.JCEBlockCipher$DESedeCBC -> org.bouncycastle.jce.provider.JCEBlockCipher$DESedeCBC:
org.bouncycastle.jce.provider.JCEBlockCipher$IDEA -> org.bouncycastle.jce.provider.JCEBlockCipher$IDEA:
org.bouncycastle.jce.provider.JCEBlockCipher$IDEACBC -> org.bouncycastle.jce.provider.JCEBlockCipher$IDEACBC:
org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithMD5AndDES -> org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithMD5AndDES:
org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithMD5AndRC2 -> org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithMD5AndRC2:
org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHA1AndDES -> org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHA1AndDES:
org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHA1AndRC2 -> org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHA1AndRC2:
org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAnd128BitRC2 -> org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAnd128BitRC2:
org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAnd40BitRC2 -> org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAnd40BitRC2:
org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndDES2Key -> org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndDES2Key:
org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndDES3Key -> org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndDES3Key:
org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndIDEA -> org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndIDEA:
org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndTwofish -> org.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndTwofish:
org.bouncycastle.jce.provider.JCEBlockCipher$RC2 -> org.bouncycastle.jce.provider.JCEBlockCipher$RC2:
org.bouncycastle.jce.provider.JCEBlockCipher$RC2CBC -> org.bouncycastle.jce.provider.JCEBlockCipher$RC2CBC:
org.bouncycastle.jce.provider.JCEBlockCipher$RC5 -> org.bouncycastle.jce.provider.JCEBlockCipher$RC5:
org.bouncycastle.jce.provider.JCEBlockCipher$RC564 -> org.bouncycastle.jce.provider.JCEBlockCipher$RC564:
org.bouncycastle.jce.provider.JCEBlockCipher$RC6 -> org.bouncycastle.jce.provider.JCEBlockCipher$RC6:
org.bouncycastle.jce.provider.JCEBlockCipher$Rijndael -> org.bouncycastle.jce.provider.JCEBlockCipher$Rijndael:
org.bouncycastle.jce.provider.JCEBlockCipher$Serpent -> org.bouncycastle.jce.provider.JCEBlockCipher$Serpent:
org.bouncycastle.jce.provider.JCEBlockCipher$Skipjack -> org.bouncycastle.jce.provider.JCEBlockCipher$Skipjack:
org.bouncycastle.jce.provider.JCEBlockCipher$Twofish -> org.bouncycastle.jce.provider.JCEBlockCipher$Twofish:
org.bouncycastle.jce.provider.JCEDHKeyAgreement -> org.bouncycastle.jce.provider.JCEDHKeyAgreement:
    java.math.BigInteger x -> a
    java.math.BigInteger p -> b
    java.math.BigInteger g -> c
    java.math.BigInteger result -> d
    java.security.SecureRandom random -> e
    java.security.Key engineDoPhase(java.security.Key,boolean) -> engineDoPhase
    byte[] engineGenerateSecret() -> engineGenerateSecret
    int engineGenerateSecret(byte[],int) -> engineGenerateSecret
    javax.crypto.SecretKey engineGenerateSecret(java.lang.String) -> engineGenerateSecret
    void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(java.security.Key,java.security.SecureRandom) -> engineInit
org.bouncycastle.jce.provider.JCEDHPrivateKey -> org.bouncycastle.jce.provider.JCEDHPrivateKey:
    java.math.BigInteger x -> a
    javax.crypto.spec.DHParameterSpec dhSpec -> b
    java.util.Hashtable pkcs12Attributes -> c
    java.util.Vector pkcs12Ordering -> d
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    javax.crypto.spec.DHParameterSpec getParams() -> getParams
    java.math.BigInteger getX() -> getX
    void setBagAttribute(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.DEREncodable) -> a
    org.bouncycastle.asn1.DEREncodable getBagAttribute(org.bouncycastle.asn1.DERObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
org.bouncycastle.jce.provider.JCEDHPublicKey -> org.bouncycastle.jce.provider.JCEDHPublicKey:
    java.math.BigInteger y -> a
    javax.crypto.spec.DHParameterSpec dhSpec -> b
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    javax.crypto.spec.DHParameterSpec getParams() -> getParams
    java.math.BigInteger getY() -> getY
org.bouncycastle.jce.provider.JCEECDHKeyAgreement -> org.bouncycastle.jce.provider.JCEECDHKeyAgreement:
    java.math.BigInteger result -> a
    org.bouncycastle.crypto.CipherParameters privKey -> b
    org.bouncycastle.crypto.BasicAgreement agreement -> c
    java.security.Key engineDoPhase(java.security.Key,boolean) -> engineDoPhase
    byte[] engineGenerateSecret() -> engineGenerateSecret
    int engineGenerateSecret(byte[],int) -> engineGenerateSecret
    javax.crypto.SecretKey engineGenerateSecret(java.lang.String) -> engineGenerateSecret
    void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(java.security.Key,java.security.SecureRandom) -> engineInit
org.bouncycastle.jce.provider.JCEECDHKeyAgreement$DH -> org.bouncycastle.jce.provider.JCEECDHKeyAgreement$DH:
org.bouncycastle.jce.provider.JCEECDHKeyAgreement$DHC -> org.bouncycastle.jce.provider.JCEECDHKeyAgreement$DHC:
org.bouncycastle.jce.provider.JCEECPrivateKey -> org.bouncycastle.jce.provider.JCEECPrivateKey:
    java.lang.String algorithm -> a
    java.math.BigInteger d -> b
    org.bouncycastle.jce.spec.ECParameterSpec ecSpec -> c
    java.util.Hashtable pkcs12Attributes -> d
    java.util.Vector pkcs12Ordering -> e
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    org.bouncycastle.jce.spec.ECParameterSpec getParams() -> a
    java.math.BigInteger getD() -> b
    void setBagAttribute(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.DEREncodable) -> a
    org.bouncycastle.asn1.DEREncodable getBagAttribute(org.bouncycastle.asn1.DERObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
org.bouncycastle.jce.provider.JCEECPublicKey -> org.bouncycastle.jce.provider.JCEECPublicKey:
    java.lang.String algorithm -> a
    org.bouncycastle.math.ec.ECPoint q -> b
    org.bouncycastle.jce.spec.ECParameterSpec ecSpec -> c
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    org.bouncycastle.jce.spec.ECParameterSpec getParams() -> a
    org.bouncycastle.math.ec.ECPoint getQ() -> b
    java.lang.String toString() -> toString
org.bouncycastle.jce.provider.JCEElGamalCipher -> org.bouncycastle.jce.provider.JCEElGamalCipher:
    org.bouncycastle.crypto.BufferedAsymmetricBlockCipher cipher -> a
    boolean publicKeyOnly -> b
    boolean privateKeyOnly -> c
    int engineGetBlockSize() -> engineGetBlockSize
    byte[] engineGetIV() -> engineGetIV
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
org.bouncycastle.jce.provider.JCEElGamalCipher$NoPadding -> org.bouncycastle.jce.provider.JCEElGamalCipher$NoPadding:
org.bouncycastle.jce.provider.JCEElGamalCipher$PKCS1v1_5Padding -> org.bouncycastle.jce.provider.JCEElGamalCipher$PKCS1v1_5Padding:
org.bouncycastle.jce.provider.JCEElGamalPrivateKey -> org.bouncycastle.jce.provider.JCEElGamalPrivateKey:
    java.math.BigInteger x -> a
    org.bouncycastle.jce.spec.ElGamalParameterSpec elSpec -> b
    java.util.Hashtable pkcs12Attributes -> c
    java.util.Vector pkcs12Ordering -> d
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    org.bouncycastle.jce.spec.ElGamalParameterSpec getParams() -> a
    java.math.BigInteger getX() -> b
    void setBagAttribute(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.DEREncodable) -> a
    org.bouncycastle.asn1.DEREncodable getBagAttribute(org.bouncycastle.asn1.DERObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
org.bouncycastle.jce.provider.JCEElGamalPublicKey -> org.bouncycastle.jce.provider.JCEElGamalPublicKey:
    java.math.BigInteger y -> a
    org.bouncycastle.jce.spec.ElGamalParameterSpec elSpec -> b
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    org.bouncycastle.jce.spec.ElGamalParameterSpec getParams() -> a
    java.math.BigInteger getY() -> b
org.bouncycastle.jce.provider.JCEIESCipher -> org.bouncycastle.jce.provider.JCEIESCipher:
    org.bouncycastle.crypto.engines.IESEngine cipher -> a
    int state -> b
    java.io.ByteArrayOutputStream buffer -> c
    java.security.AlgorithmParameters engineParam -> d
    org.bouncycastle.jce.spec.IESParameterSpec engineParams -> e
    java.lang.Class[] availableSpecs -> f
    java.lang.Class class$org$bouncycastle$jce$spec$IESParameterSpec -> g
    int engineGetBlockSize() -> engineGetBlockSize
    byte[] engineGetIV() -> engineGetIV
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
    java.lang.Class class$(java.lang.String) -> a
org.bouncycastle.jce.provider.JCEIESCipher$ECIES -> org.bouncycastle.jce.provider.JCEIESCipher$ECIES:
org.bouncycastle.jce.provider.JCEIESCipher$IES -> org.bouncycastle.jce.provider.JCEIESCipher$IES:
org.bouncycastle.jce.provider.JCEKeyGenerator -> org.bouncycastle.jce.provider.JCEKeyGenerator:
    java.lang.String algName -> a
    int keySize -> e
    int defaultKeySize -> b
    org.bouncycastle.crypto.CipherKeyGenerator engine -> c
    boolean uninitialised -> d
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.SecureRandom) -> engineInit
    javax.crypto.SecretKey engineGenerateKey() -> engineGenerateKey
org.bouncycastle.jce.provider.JCEKeyGenerator$AES -> org.bouncycastle.jce.provider.JCEKeyGenerator$AES:
org.bouncycastle.jce.provider.JCEKeyGenerator$AES128 -> org.bouncycastle.jce.provider.JCEKeyGenerator$AES128:
org.bouncycastle.jce.provider.JCEKeyGenerator$AES192 -> org.bouncycastle.jce.provider.JCEKeyGenerator$AES192:
org.bouncycastle.jce.provider.JCEKeyGenerator$AES256 -> org.bouncycastle.jce.provider.JCEKeyGenerator$AES256:
org.bouncycastle.jce.provider.JCEKeyGenerator$Blowfish -> org.bouncycastle.jce.provider.JCEKeyGenerator$Blowfish:
org.bouncycastle.jce.provider.JCEKeyGenerator$CAST5 -> org.bouncycastle.jce.provider.JCEKeyGenerator$CAST5:
org.bouncycastle.jce.provider.JCEKeyGenerator$CAST6 -> org.bouncycastle.jce.provider.JCEKeyGenerator$CAST6:
org.bouncycastle.jce.provider.JCEKeyGenerator$DES -> org.bouncycastle.jce.provider.JCEKeyGenerator$DES:
org.bouncycastle.jce.provider.JCEKeyGenerator$DESede -> org.bouncycastle.jce.provider.JCEKeyGenerator$DESede:
    boolean keySizeSet -> e
    void engineInit(int,java.security.SecureRandom) -> engineInit
    javax.crypto.SecretKey engineGenerateKey() -> engineGenerateKey
org.bouncycastle.jce.provider.JCEKeyGenerator$DESede3 -> org.bouncycastle.jce.provider.JCEKeyGenerator$DESede3:
    boolean keySizeSet -> e
    void engineInit(int,java.security.SecureRandom) -> engineInit
    javax.crypto.SecretKey engineGenerateKey() -> engineGenerateKey
org.bouncycastle.jce.provider.JCEKeyGenerator$HMACSHA1 -> org.bouncycastle.jce.provider.JCEKeyGenerator$HMACSHA1:
org.bouncycastle.jce.provider.JCEKeyGenerator$HMACTIGER -> org.bouncycastle.jce.provider.JCEKeyGenerator$HMACTIGER:
org.bouncycastle.jce.provider.JCEKeyGenerator$IDEA -> org.bouncycastle.jce.provider.JCEKeyGenerator$IDEA:
org.bouncycastle.jce.provider.JCEKeyGenerator$MD2HMAC -> org.bouncycastle.jce.provider.JCEKeyGenerator$MD2HMAC:
org.bouncycastle.jce.provider.JCEKeyGenerator$MD4HMAC -> org.bouncycastle.jce.provider.JCEKeyGenerator$MD4HMAC:
org.bouncycastle.jce.provider.JCEKeyGenerator$MD5HMAC -> org.bouncycastle.jce.provider.JCEKeyGenerator$MD5HMAC:
org.bouncycastle.jce.provider.JCEKeyGenerator$RC2 -> org.bouncycastle.jce.provider.JCEKeyGenerator$RC2:
org.bouncycastle.jce.provider.JCEKeyGenerator$RC4 -> org.bouncycastle.jce.provider.JCEKeyGenerator$RC4:
org.bouncycastle.jce.provider.JCEKeyGenerator$RC5 -> org.bouncycastle.jce.provider.JCEKeyGenerator$RC5:
org.bouncycastle.jce.provider.JCEKeyGenerator$RC564 -> org.bouncycastle.jce.provider.JCEKeyGenerator$RC564:
org.bouncycastle.jce.provider.JCEKeyGenerator$RC6 -> org.bouncycastle.jce.provider.JCEKeyGenerator$RC6:
org.bouncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC -> org.bouncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC:
org.bouncycastle.jce.provider.JCEKeyGenerator$RIPEMD160HMAC -> org.bouncycastle.jce.provider.JCEKeyGenerator$RIPEMD160HMAC:
org.bouncycastle.jce.provider.JCEKeyGenerator$Rijndael -> org.bouncycastle.jce.provider.JCEKeyGenerator$Rijndael:
org.bouncycastle.jce.provider.JCEKeyGenerator$Serpent -> org.bouncycastle.jce.provider.JCEKeyGenerator$Serpent:
org.bouncycastle.jce.provider.JCEKeyGenerator$Skipjack -> org.bouncycastle.jce.provider.JCEKeyGenerator$Skipjack:
org.bouncycastle.jce.provider.JCEKeyGenerator$Twofish -> org.bouncycastle.jce.provider.JCEKeyGenerator$Twofish:
org.bouncycastle.jce.provider.JCEMac -> org.bouncycastle.jce.provider.JCEMac:
    org.bouncycastle.crypto.Mac macEngine -> a
    int pbeType -> b
    int pbeHash -> c
    int keySize -> d
    void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec) -> engineInit
    int engineGetMacLength() -> engineGetMacLength
    void engineReset() -> engineReset
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineDoFinal() -> engineDoFinal
org.bouncycastle.jce.provider.JCEMac$DES -> org.bouncycastle.jce.provider.JCEMac$DES:
org.bouncycastle.jce.provider.JCEMac$DESCFB8 -> org.bouncycastle.jce.provider.JCEMac$DESCFB8:
org.bouncycastle.jce.provider.JCEMac$DESede -> org.bouncycastle.jce.provider.JCEMac$DESede:
org.bouncycastle.jce.provider.JCEMac$DESedeCFB8 -> org.bouncycastle.jce.provider.JCEMac$DESedeCFB8:
org.bouncycastle.jce.provider.JCEMac$IDEA -> org.bouncycastle.jce.provider.JCEMac$IDEA:
org.bouncycastle.jce.provider.JCEMac$IDEACFB8 -> org.bouncycastle.jce.provider.JCEMac$IDEACFB8:
org.bouncycastle.jce.provider.JCEMac$MD2 -> org.bouncycastle.jce.provider.JCEMac$MD2:
org.bouncycastle.jce.provider.JCEMac$MD4 -> org.bouncycastle.jce.provider.JCEMac$MD4:
org.bouncycastle.jce.provider.JCEMac$MD5 -> org.bouncycastle.jce.provider.JCEMac$MD5:
org.bouncycastle.jce.provider.JCEMac$PBEWithRIPEMD160 -> org.bouncycastle.jce.provider.JCEMac$PBEWithRIPEMD160:
org.bouncycastle.jce.provider.JCEMac$PBEWithSHA -> org.bouncycastle.jce.provider.JCEMac$PBEWithSHA:
org.bouncycastle.jce.provider.JCEMac$PBEWithTiger -> org.bouncycastle.jce.provider.JCEMac$PBEWithTiger:
org.bouncycastle.jce.provider.JCEMac$RC2 -> org.bouncycastle.jce.provider.JCEMac$RC2:
org.bouncycastle.jce.provider.JCEMac$RC2CFB8 -> org.bouncycastle.jce.provider.JCEMac$RC2CFB8:
org.bouncycastle.jce.provider.JCEMac$RC5 -> org.bouncycastle.jce.provider.JCEMac$RC5:
org.bouncycastle.jce.provider.JCEMac$RC5CFB8 -> org.bouncycastle.jce.provider.JCEMac$RC5CFB8:
org.bouncycastle.jce.provider.JCEMac$RIPEMD128 -> org.bouncycastle.jce.provider.JCEMac$RIPEMD128:
org.bouncycastle.jce.provider.JCEMac$RIPEMD160 -> org.bouncycastle.jce.provider.JCEMac$RIPEMD160:
org.bouncycastle.jce.provider.JCEMac$SHA1 -> org.bouncycastle.jce.provider.JCEMac$SHA1:
org.bouncycastle.jce.provider.JCEMac$SHA256 -> org.bouncycastle.jce.provider.JCEMac$SHA256:
org.bouncycastle.jce.provider.JCEMac$SHA384 -> org.bouncycastle.jce.provider.JCEMac$SHA384:
org.bouncycastle.jce.provider.JCEMac$SHA512 -> org.bouncycastle.jce.provider.JCEMac$SHA512:
org.bouncycastle.jce.provider.JCEMac$Skipjack -> org.bouncycastle.jce.provider.JCEMac$Skipjack:
org.bouncycastle.jce.provider.JCEMac$SkipjackCFB8 -> org.bouncycastle.jce.provider.JCEMac$SkipjackCFB8:
org.bouncycastle.jce.provider.JCEMac$Tiger -> org.bouncycastle.jce.provider.JCEMac$Tiger:
org.bouncycastle.jce.provider.JCEPBEKey -> org.bouncycastle.jce.provider.JCEPBEKey:
    java.lang.String algorithm -> a
    char[] password -> b
    boolean pkcs12 -> c
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
org.bouncycastle.jce.provider.JCERSACipher -> org.bouncycastle.jce.provider.JCERSACipher:
    org.bouncycastle.crypto.AsymmetricBlockCipher cipher -> a
    boolean publicKeyOnly -> b
    boolean privateKeyOnly -> c
    java.io.ByteArrayOutputStream bOut -> d
    int engineGetBlockSize() -> engineGetBlockSize
    byte[] engineGetIV() -> engineGetIV
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
org.bouncycastle.jce.provider.JCERSACipher$ISO9796d1Padding -> org.bouncycastle.jce.provider.JCERSACipher$ISO9796d1Padding:
org.bouncycastle.jce.provider.JCERSACipher$NoPadding -> org.bouncycastle.jce.provider.JCERSACipher$NoPadding:
org.bouncycastle.jce.provider.JCERSACipher$OAEPPadding -> org.bouncycastle.jce.provider.JCERSACipher$OAEPPadding:
org.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding -> org.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding:
org.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding_PrivateOnly -> org.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding_PrivateOnly:
org.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding_PublicOnly -> org.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding_PublicOnly:
org.bouncycastle.jce.provider.JCERSAPrivateCrtKey -> org.bouncycastle.jce.provider.JCERSAPrivateCrtKey:
    java.math.BigInteger publicExponent -> c
    java.math.BigInteger primeP -> d
    java.math.BigInteger primeQ -> e
    java.math.BigInteger primeExponentP -> f
    java.math.BigInteger primeExponentQ -> g
    java.math.BigInteger crtCoefficient -> h
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    java.math.BigInteger getPrimeP() -> getPrimeP
    java.math.BigInteger getPrimeQ() -> getPrimeQ
    java.math.BigInteger getPrimeExponentP() -> getPrimeExponentP
    java.math.BigInteger getPrimeExponentQ() -> getPrimeExponentQ
    java.math.BigInteger getCrtCoefficient() -> getCrtCoefficient
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.bouncycastle.jce.provider.JCERSAPrivateKey -> org.bouncycastle.jce.provider.JCERSAPrivateKey:
    java.math.BigInteger modulus -> a
    java.math.BigInteger privateExponent -> b
    java.util.Hashtable pkcs12Attributes -> c
    java.util.Vector pkcs12Ordering -> d
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPrivateExponent() -> getPrivateExponent
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    boolean equals(java.lang.Object) -> equals
    void setBagAttribute(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.DEREncodable) -> a
    org.bouncycastle.asn1.DEREncodable getBagAttribute(org.bouncycastle.asn1.DERObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
org.bouncycastle.jce.provider.JCERSAPublicKey -> org.bouncycastle.jce.provider.JCERSAPublicKey:
    java.math.BigInteger modulus -> a
    java.math.BigInteger publicExponent -> b
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.bouncycastle.jce.provider.JCESecretKeyFactory -> org.bouncycastle.jce.provider.JCESecretKeyFactory:
    java.lang.String algName -> a
    java.lang.Class class$javax$crypto$spec$SecretKeySpec -> b
    java.lang.Class array$B -> d
    java.lang.Class class$javax$crypto$spec$DESedeKeySpec -> c
    javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
    java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey,java.lang.Class) -> engineGetKeySpec
    javax.crypto.SecretKey engineTranslateKey(javax.crypto.SecretKey) -> engineTranslateKey
    java.lang.Class class$(java.lang.String) -> a
org.bouncycastle.jce.provider.JCESecretKeyFactory$DES -> org.bouncycastle.jce.provider.JCESecretKeyFactory$DES:
    javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
org.bouncycastle.jce.provider.JCESecretKeyFactory$DESede -> org.bouncycastle.jce.provider.JCESecretKeyFactory$DESede:
    java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey,java.lang.Class) -> engineGetKeySpec
    javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
org.bouncycastle.jce.provider.JCESecretKeyFactory$PBE_PKCS12 -> org.bouncycastle.jce.provider.JCESecretKeyFactory$PBE_PKCS12:
    javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
org.bouncycastle.jce.provider.JCESecretKeyFactory$PBE_PKCS5 -> org.bouncycastle.jce.provider.JCESecretKeyFactory$PBE_PKCS5:
    javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
org.bouncycastle.jce.provider.JCEStreamCipher -> org.bouncycastle.jce.provider.JCEStreamCipher:
    java.lang.Class[] availableSpecs -> a
    org.bouncycastle.crypto.StreamCipher cipher -> b
    org.bouncycastle.crypto.params.ParametersWithIV ivParam -> c
    int pbeType -> d
    int pbeHash -> e
    int pbeKeySize -> f
    int pbeIvSize -> g
    int ivLength -> h
    java.security.AlgorithmParameters engineParams -> i
    java.lang.Class class$javax$crypto$spec$RC2ParameterSpec -> j
    java.lang.Class class$javax$crypto$spec$RC5ParameterSpec -> k
    java.lang.Class class$javax$crypto$spec$IvParameterSpec -> l
    java.lang.Class class$javax$crypto$spec$PBEParameterSpec -> m
    int engineGetBlockSize() -> engineGetBlockSize
    byte[] engineGetIV() -> engineGetIV
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
    java.lang.Class class$(java.lang.String) -> a
org.bouncycastle.jce.provider.JCEStreamCipher$Blowfish_CFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$Blowfish_CFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$Blowfish_OFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$Blowfish_OFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$DES_CFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$DES_CFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$DES_OFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$DES_OFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$DESede_CFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$DESede_CFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$DESede_OFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$DESede_OFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$IDEA_CFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$IDEA_CFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$IDEA_OFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$IDEA_OFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$PBEWithSHAAnd128BitRC4 -> org.bouncycastle.jce.provider.JCEStreamCipher$PBEWithSHAAnd128BitRC4:
org.bouncycastle.jce.provider.JCEStreamCipher$PBEWithSHAAnd40BitRC4 -> org.bouncycastle.jce.provider.JCEStreamCipher$PBEWithSHAAnd40BitRC4:
org.bouncycastle.jce.provider.JCEStreamCipher$RC4 -> org.bouncycastle.jce.provider.JCEStreamCipher$RC4:
org.bouncycastle.jce.provider.JCEStreamCipher$Skipjack_CFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$Skipjack_CFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$Skipjack_OFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$Skipjack_OFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$Twofish_CFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$Twofish_CFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$Twofish_OFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$Twofish_OFB8:
org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator -> org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator:
    java.security.SecureRandom random -> a
    int strength -> b
    void engineInit(int,java.security.SecureRandom) -> engineInit
org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$AES -> org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$AES:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$CAST5 -> org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$CAST5:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DES -> org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DES:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DH -> org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DH:
    int l -> c
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DSA -> org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DSA:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$ElGamal -> org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$ElGamal:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$IDEA -> org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$IDEA:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$RC2 -> org.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$RC2:
    javax.crypto.spec.RC2ParameterSpec spec -> c
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jce.provider.JDKAlgorithmParameters -> org.bouncycastle.jce.provider.JDKAlgorithmParameters:
    java.lang.Class class$javax$crypto$spec$IvParameterSpec -> a
    java.lang.Class class$javax$crypto$spec$RC2ParameterSpec -> b
    java.lang.Class class$javax$crypto$spec$PBEParameterSpec -> c
    java.lang.Class class$javax$crypto$spec$DHParameterSpec -> d
    java.lang.Class class$java$security$spec$DSAParameterSpec -> e
    java.lang.Class class$org$bouncycastle$jce$spec$ElGamalParameterSpec -> f
    java.lang.Class class$org$bouncycastle$jce$spec$IESParameterSpec -> g
    java.lang.Class class$(java.lang.String) -> a
org.bouncycastle.jce.provider.JDKAlgorithmParameters$CAST5AlgorithmParameters -> org.bouncycastle.jce.provider.JDKAlgorithmParameters$CAST5AlgorithmParameters:
    byte[] iv -> h
    int keyLength -> i
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jce.provider.JDKAlgorithmParameters$DH -> org.bouncycastle.jce.provider.JDKAlgorithmParameters$DH:
    javax.crypto.spec.DHParameterSpec currentSpec -> h
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jce.provider.JDKAlgorithmParameters$DSA -> org.bouncycastle.jce.provider.JDKAlgorithmParameters$DSA:
    java.security.spec.DSAParameterSpec currentSpec -> h
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jce.provider.JDKAlgorithmParameters$ElGamal -> org.bouncycastle.jce.provider.JDKAlgorithmParameters$ElGamal:
    org.bouncycastle.jce.spec.ElGamalParameterSpec currentSpec -> h
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jce.provider.JDKAlgorithmParameters$IDEAAlgorithmParameters -> org.bouncycastle.jce.provider.JDKAlgorithmParameters$IDEAAlgorithmParameters:
    byte[] iv -> h
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jce.provider.JDKAlgorithmParameters$IES -> org.bouncycastle.jce.provider.JDKAlgorithmParameters$IES:
    org.bouncycastle.jce.spec.IESParameterSpec currentSpec -> h
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jce.provider.JDKAlgorithmParameters$IVAlgorithmParameters -> org.bouncycastle.jce.provider.JDKAlgorithmParameters$IVAlgorithmParameters:
    byte[] iv -> h
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jce.provider.JDKAlgorithmParameters$PKCS12PBE -> org.bouncycastle.jce.provider.JDKAlgorithmParameters$PKCS12PBE:
    org.bouncycastle.asn1.pkcs.PKCS12PBEParams params -> h
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jce.provider.JDKAlgorithmParameters$RC2AlgorithmParameters -> org.bouncycastle.jce.provider.JDKAlgorithmParameters$RC2AlgorithmParameters:
    short[] table -> h
    short[] ekb -> i
    byte[] iv -> j
    int parameterVersion -> k
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jce.provider.JDKDSAPrivateKey -> org.bouncycastle.jce.provider.JDKDSAPrivateKey:
    java.math.BigInteger x -> a
    java.security.interfaces.DSAParams dsaSpec -> b
    java.util.Hashtable pkcs12Attributes -> c
    java.util.Vector pkcs12Ordering -> d
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.interfaces.DSAParams getParams() -> getParams
    java.math.BigInteger getX() -> getX
    void setBagAttribute(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.DEREncodable) -> a
    org.bouncycastle.asn1.DEREncodable getBagAttribute(org.bouncycastle.asn1.DERObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
org.bouncycastle.jce.provider.JDKDSAPublicKey -> org.bouncycastle.jce.provider.JDKDSAPublicKey:
    java.math.BigInteger y -> a
    java.security.interfaces.DSAParams dsaSpec -> b
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.interfaces.DSAParams getParams() -> getParams
    java.math.BigInteger getY() -> getY
    java.lang.String toString() -> toString
org.bouncycastle.jce.provider.JDKDSASigner -> org.bouncycastle.jce.provider.JDKDSASigner:
    org.bouncycastle.crypto.Digest digest -> B
    org.bouncycastle.crypto.DSA signer -> C
    java.security.SecureRandom random -> D
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey,java.security.SecureRandom) -> engineInitSign
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.bouncycastle.jce.provider.JDKDSASigner$ecDSA -> org.bouncycastle.jce.provider.JDKDSASigner$ecDSA:
org.bouncycastle.jce.provider.JDKDSASigner$stdDSA -> org.bouncycastle.jce.provider.JDKDSASigner$stdDSA:
org.bouncycastle.jce.provider.JDKDigestSignature -> org.bouncycastle.jce.provider.JDKDigestSignature:
    org.bouncycastle.crypto.Digest digest -> B
    org.bouncycastle.crypto.AsymmetricBlockCipher cipher -> C
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> D
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.bouncycastle.jce.provider.JDKDigestSignature$MD2WithRSAEncryption -> org.bouncycastle.jce.provider.JDKDigestSignature$MD2WithRSAEncryption:
org.bouncycastle.jce.provider.JDKDigestSignature$MD5WithRSAEncryption -> org.bouncycastle.jce.provider.JDKDigestSignature$MD5WithRSAEncryption:
org.bouncycastle.jce.provider.JDKDigestSignature$RIPEMD128WithRSAEncryption -> org.bouncycastle.jce.provider.JDKDigestSignature$RIPEMD128WithRSAEncryption:
org.bouncycastle.jce.provider.JDKDigestSignature$RIPEMD160WithRSAEncryption -> org.bouncycastle.jce.provider.JDKDigestSignature$RIPEMD160WithRSAEncryption:
org.bouncycastle.jce.provider.JDKDigestSignature$RIPEMD256WithRSAEncryption -> org.bouncycastle.jce.provider.JDKDigestSignature$RIPEMD256WithRSAEncryption:
org.bouncycastle.jce.provider.JDKDigestSignature$SHA1WithRSAEncryption -> org.bouncycastle.jce.provider.JDKDigestSignature$SHA1WithRSAEncryption:
org.bouncycastle.jce.provider.JDKISOSignature -> org.bouncycastle.jce.provider.JDKISOSignature:
    org.bouncycastle.crypto.signers.ISO9796d2Signer signer -> a
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.bouncycastle.jce.provider.JDKISOSignature$MD5WithRSAEncryption -> org.bouncycastle.jce.provider.JDKISOSignature$MD5WithRSAEncryption:
org.bouncycastle.jce.provider.JDKISOSignature$RIPEMD160WithRSAEncryption -> org.bouncycastle.jce.provider.JDKISOSignature$RIPEMD160WithRSAEncryption:
org.bouncycastle.jce.provider.JDKISOSignature$SHA1WithRSAEncryption -> org.bouncycastle.jce.provider.JDKISOSignature$SHA1WithRSAEncryption:
org.bouncycastle.jce.provider.JDKKeyFactory -> org.bouncycastle.jce.provider.JDKKeyFactory:
    java.lang.Class class$java$security$spec$PKCS8EncodedKeySpec -> a
    java.lang.Class class$java$security$spec$X509EncodedKeySpec -> b
    java.lang.Class class$java$security$spec$RSAPublicKeySpec -> c
    java.lang.Class class$java$security$spec$RSAPrivateKeySpec -> d
    java.lang.Class class$java$security$spec$RSAPrivateCrtKeySpec -> e
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PublicKey createPublicKeyFromDERStream(java.io.InputStream) -> a
    java.security.PublicKey createPublicKeyFromPublicKeyInfo(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> a
    java.security.PrivateKey createPrivateKeyFromDERStream(java.io.InputStream) -> b
    java.security.PrivateKey createPrivateKeyFromPrivateKeyInfo(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> a
    java.lang.Class class$(java.lang.String) -> a
org.bouncycastle.jce.provider.JDKKeyFactory$DH -> org.bouncycastle.jce.provider.JDKKeyFactory$DH:
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
org.bouncycastle.jce.provider.JDKKeyFactory$DSA -> org.bouncycastle.jce.provider.JDKKeyFactory$DSA:
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
org.bouncycastle.jce.provider.JDKKeyFactory$EC -> org.bouncycastle.jce.provider.JDKKeyFactory$EC:
    java.lang.String algorithm -> a
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
org.bouncycastle.jce.provider.JDKKeyFactory$ECDH -> org.bouncycastle.jce.provider.JDKKeyFactory$ECDH:
org.bouncycastle.jce.provider.JDKKeyFactory$ECDHC -> org.bouncycastle.jce.provider.JDKKeyFactory$ECDHC:
org.bouncycastle.jce.provider.JDKKeyFactory$ECDSA -> org.bouncycastle.jce.provider.JDKKeyFactory$ECDSA:
org.bouncycastle.jce.provider.JDKKeyFactory$ElGamal -> org.bouncycastle.jce.provider.JDKKeyFactory$ElGamal:
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
org.bouncycastle.jce.provider.JDKKeyFactory$RSA -> org.bouncycastle.jce.provider.JDKKeyFactory$RSA:
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
org.bouncycastle.jce.provider.JDKKeyPairGenerator -> org.bouncycastle.jce.provider.JDKKeyPairGenerator:
org.bouncycastle.jce.provider.JDKKeyPairGenerator$DH -> org.bouncycastle.jce.provider.JDKKeyPairGenerator$DH:
    org.bouncycastle.crypto.params.DHKeyGenerationParameters param -> a
    org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator engine -> b
    int strength -> c
    int certainty -> d
    java.security.SecureRandom random -> e
    boolean initialised -> f
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA -> org.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA:
    org.bouncycastle.crypto.params.DSAKeyGenerationParameters param -> a
    org.bouncycastle.crypto.generators.DSAKeyPairGenerator engine -> b
    int strength -> c
    int certainty -> d
    java.security.SecureRandom random -> e
    boolean initialised -> f
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.jce.provider.JDKKeyPairGenerator$EC -> org.bouncycastle.jce.provider.JDKKeyPairGenerator$EC:
    org.bouncycastle.crypto.params.ECKeyGenerationParameters param -> a
    org.bouncycastle.crypto.generators.ECKeyPairGenerator engine -> b
    org.bouncycastle.jce.spec.ECParameterSpec ecParams -> c
    int strength -> d
    int certainty -> e
    java.security.SecureRandom random -> f
    boolean initialised -> g
    java.lang.String algorithm -> h
    java.util.Hashtable ecParameters -> i
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.jce.provider.JDKKeyPairGenerator$ECDH -> org.bouncycastle.jce.provider.JDKKeyPairGenerator$ECDH:
org.bouncycastle.jce.provider.JDKKeyPairGenerator$ECDHC -> org.bouncycastle.jce.provider.JDKKeyPairGenerator$ECDHC:
org.bouncycastle.jce.provider.JDKKeyPairGenerator$ECDSA -> org.bouncycastle.jce.provider.JDKKeyPairGenerator$ECDSA:
org.bouncycastle.jce.provider.JDKKeyPairGenerator$ElGamal -> org.bouncycastle.jce.provider.JDKKeyPairGenerator$ElGamal:
    org.bouncycastle.crypto.params.ElGamalKeyGenerationParameters param -> a
    org.bouncycastle.crypto.generators.ElGamalKeyPairGenerator engine -> b
    int strength -> c
    int certainty -> d
    java.security.SecureRandom random -> e
    boolean initialised -> f
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA -> org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA:
    java.math.BigInteger defaultPublicExponent -> a
    org.bouncycastle.crypto.params.RSAKeyGenerationParameters param -> b
    org.bouncycastle.crypto.generators.RSAKeyPairGenerator engine -> c
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.jce.provider.JDKKeyStore -> org.bouncycastle.jce.provider.JDKKeyStore:
    java.util.Hashtable table -> a
    java.security.SecureRandom random -> b
    void encodeCertificate(java.security.cert.Certificate,java.io.DataOutputStream) -> a
    java.security.cert.Certificate decodeCertificate(java.io.DataInputStream) -> b
    void encodeKey(java.security.Key,java.io.DataOutputStream) -> b
    java.security.Key decodeKey(java.io.DataInputStream) -> c
    javax.crypto.Cipher makePBECipher(java.lang.String,int,char[],byte[],int) -> a
    java.util.Enumeration engineAliases() -> engineAliases
    boolean engineContainsAlias(java.lang.String) -> engineContainsAlias
    void engineDeleteEntry(java.lang.String) -> engineDeleteEntry
    java.security.cert.Certificate engineGetCertificate(java.lang.String) -> engineGetCertificate
    java.lang.String engineGetCertificateAlias(java.security.cert.Certificate) -> engineGetCertificateAlias
    java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String) -> engineGetCertificateChain
    java.util.Date engineGetCreationDate(java.lang.String) -> engineGetCreationDate
    java.security.Key engineGetKey(java.lang.String,char[]) -> engineGetKey
    boolean engineIsCertificateEntry(java.lang.String) -> engineIsCertificateEntry
    boolean engineIsKeyEntry(java.lang.String) -> engineIsKeyEntry
    void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate) -> engineSetCertificateEntry
    void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    int engineSize() -> engineSize
    boolean isSameAs(byte[],byte[]) -> a
    void loadStore(java.io.InputStream) -> a
    void saveStore(java.io.OutputStream) -> a
    void engineLoad(java.io.InputStream,char[]) -> engineLoad
    void engineStore(java.io.OutputStream,char[]) -> engineStore
    void access$000$9a118c8(java.security.Key,java.io.DataOutputStream) -> a
    java.security.Key access$100$41c72e6d(java.io.DataInputStream) -> a
org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore -> org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore:
    void engineLoad(java.io.InputStream,char[]) -> engineLoad
    void engineStore(java.io.OutputStream,char[]) -> engineStore
org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry -> org.bouncycastle.jce.provider.b:
    int type -> a
    java.lang.String alias -> b
    java.lang.Object obj -> c
    java.security.cert.Certificate[] certChain -> d
    java.util.Date date -> e
    org.bouncycastle.jce.provider.JDKKeyStore this$0 -> f
    java.lang.Object getObject(char[]) -> a
org.bouncycastle.jce.provider.JDKMessageDigest -> org.bouncycastle.jce.provider.JDKMessageDigest:
    org.bouncycastle.crypto.Digest digest -> a
    void engineReset() -> engineReset
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineDigest() -> engineDigest
org.bouncycastle.jce.provider.JDKMessageDigest$MD2 -> org.bouncycastle.jce.provider.JDKMessageDigest$MD2:
    java.lang.Object clone() -> clone
org.bouncycastle.jce.provider.JDKMessageDigest$MD4 -> org.bouncycastle.jce.provider.JDKMessageDigest$MD4:
    java.lang.Object clone() -> clone
org.bouncycastle.jce.provider.JDKMessageDigest$MD5 -> org.bouncycastle.jce.provider.JDKMessageDigest$MD5:
    java.lang.Object clone() -> clone
org.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD128 -> org.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD128:
    java.lang.Object clone() -> clone
org.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD160 -> org.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD160:
    java.lang.Object clone() -> clone
org.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD256 -> org.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD256:
    java.lang.Object clone() -> clone
org.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD320 -> org.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD320:
    java.lang.Object clone() -> clone
org.bouncycastle.jce.provider.JDKMessageDigest$SHA1 -> org.bouncycastle.jce.provider.JDKMessageDigest$SHA1:
    java.lang.Object clone() -> clone
org.bouncycastle.jce.provider.JDKMessageDigest$SHA256 -> org.bouncycastle.jce.provider.JDKMessageDigest$SHA256:
    java.lang.Object clone() -> clone
org.bouncycastle.jce.provider.JDKMessageDigest$SHA384 -> org.bouncycastle.jce.provider.JDKMessageDigest$SHA384:
    java.lang.Object clone() -> clone
org.bouncycastle.jce.provider.JDKMessageDigest$SHA512 -> org.bouncycastle.jce.provider.JDKMessageDigest$SHA512:
    java.lang.Object clone() -> clone
org.bouncycastle.jce.provider.JDKMessageDigest$Tiger -> org.bouncycastle.jce.provider.JDKMessageDigest$Tiger:
    java.lang.Object clone() -> clone
org.bouncycastle.jce.provider.JDKPKCS12KeyStore -> org.bouncycastle.jce.provider.JDKPKCS12KeyStore:
    java.util.Hashtable keys -> B
    java.util.Hashtable localIds -> C
    java.util.Hashtable certs -> D
    java.util.Hashtable chainCerts -> E
    java.util.Hashtable keyCerts -> F
    java.security.SecureRandom random -> G
    java.security.cert.CertificateFactory certFact -> H
    org.bouncycastle.asn1.x509.SubjectKeyIdentifier createSubjectKeyId(java.security.PublicKey) -> b
    java.util.Enumeration engineAliases() -> engineAliases
    boolean engineContainsAlias(java.lang.String) -> engineContainsAlias
    void engineDeleteEntry(java.lang.String) -> engineDeleteEntry
    java.security.cert.Certificate engineGetCertificate(java.lang.String) -> engineGetCertificate
    java.lang.String engineGetCertificateAlias(java.security.cert.Certificate) -> engineGetCertificateAlias
    java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String) -> engineGetCertificateChain
    java.util.Date engineGetCreationDate(java.lang.String) -> engineGetCreationDate
    java.security.Key engineGetKey(java.lang.String,char[]) -> engineGetKey
    boolean engineIsCertificateEntry(java.lang.String) -> engineIsCertificateEntry
    boolean engineIsKeyEntry(java.lang.String) -> engineIsKeyEntry
    void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate) -> engineSetCertificateEntry
    void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    int engineSize() -> engineSize
    java.security.PrivateKey unwrapKey(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],char[]) -> a
    byte[] wrapKey(java.lang.String,java.security.Key,org.bouncycastle.asn1.pkcs.PKCS12PBEParams,char[]) -> a
    org.bouncycastle.asn1.ASN1Sequence decryptData(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],char[]) -> b
    byte[] encryptData(java.lang.String,byte[],org.bouncycastle.asn1.pkcs.PKCS12PBEParams,char[]) -> a
    void engineLoad(java.io.InputStream,char[]) -> engineLoad
    void engineStore(java.io.OutputStream,char[]) -> engineStore
    org.bouncycastle.asn1.x509.SubjectKeyIdentifier access$000$5aed2a75(java.security.PublicKey) -> a
org.bouncycastle.jce.provider.JDKPKCS12KeyStore$BCPKCS12KeyStore -> org.bouncycastle.jce.provider.JDKPKCS12KeyStore$BCPKCS12KeyStore:
org.bouncycastle.jce.provider.JDKPKCS12KeyStore$CertId -> org.bouncycastle.jce.provider.a:
    byte[] id -> a
    org.bouncycastle.jce.provider.JDKPKCS12KeyStore this$0 -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.jce.provider.JDKPKCS12KeyStore$DefPKCS12KeyStore -> org.bouncycastle.jce.provider.JDKPKCS12KeyStore$DefPKCS12KeyStore:
org.bouncycastle.jce.provider.JDKPSSSigner -> org.bouncycastle.jce.provider.JDKPSSSigner:
    org.bouncycastle.crypto.AsymmetricBlockCipher signer -> a
    org.bouncycastle.crypto.Digest digest -> b
    int saltLength -> c
    org.bouncycastle.crypto.signers.PSSSigner pss -> d
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey,java.security.SecureRandom) -> engineInitSign
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.bouncycastle.jce.provider.JDKPSSSigner$SHA1withRSA -> org.bouncycastle.jce.provider.JDKPSSSigner$SHA1withRSA:
org.bouncycastle.jce.provider.JDKPSSSigner$SHA256withRSA -> org.bouncycastle.jce.provider.JDKPSSSigner$SHA256withRSA:
org.bouncycastle.jce.provider.JDKPSSSigner$SHA384withRSA -> org.bouncycastle.jce.provider.JDKPSSSigner$SHA384withRSA:
org.bouncycastle.jce.provider.JDKPSSSigner$SHA512withRSA -> org.bouncycastle.jce.provider.JDKPSSSigner$SHA512withRSA:
org.bouncycastle.jce.provider.JDKX509CertificateFactory -> org.bouncycastle.jce.provider.JDKX509CertificateFactory:
    org.bouncycastle.asn1.pkcs.SignedData sData -> a
    int sDataObjectCount -> b
    java.lang.String readLine(java.io.InputStream) -> a
    java.security.cert.Certificate readDERCertificate(java.io.InputStream) -> b
    java.security.cert.Certificate readPEMCertificate(java.io.InputStream) -> c
    java.security.cert.CRL readDERCRL(java.io.InputStream) -> d
    java.security.cert.CRL readPEMCRL(java.io.InputStream) -> e
    java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream) -> engineGenerateCertificate
    java.util.Collection engineGenerateCertificates(java.io.InputStream) -> engineGenerateCertificates
    java.security.cert.CRL engineGenerateCRL(java.io.InputStream) -> engineGenerateCRL
    java.util.Collection engineGenerateCRLs(java.io.InputStream) -> engineGenerateCRLs
    java.util.Iterator engineGetCertPathEncodings() -> engineGetCertPathEncodings
    java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream) -> engineGenerateCertPath
    java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream,java.lang.String) -> engineGenerateCertPath
    java.security.cert.CertPath engineGenerateCertPath(java.util.List) -> engineGenerateCertPath
org.bouncycastle.jce.provider.PBE -> org.bouncycastle.jce.provider.PBE:
org.bouncycastle.jce.provider.PBE$Util -> org.bouncycastle.jce.provider.PBE$Util:
    org.bouncycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int) -> a
    org.bouncycastle.crypto.CipherParameters makePBEParameters(org.bouncycastle.jce.provider.JCEPBEKey,java.security.spec.AlgorithmParameterSpec,int,int,java.lang.String,int,int) -> a
    org.bouncycastle.crypto.CipherParameters makePBEMacParameters(org.bouncycastle.jce.provider.JCEPBEKey,java.security.spec.AlgorithmParameterSpec,int,int,int) -> a
org.bouncycastle.jce.provider.PKIXCertPath -> org.bouncycastle.jce.provider.PKIXCertPath:
    java.util.List certPathEncodings -> a
    java.util.List certificates -> b
    java.util.Iterator getEncodings() -> getEncodings
    byte[] getEncoded() -> getEncoded
    byte[] getEncoded(java.lang.String) -> getEncoded
    java.util.List getCertificates() -> getCertificates
    org.bouncycastle.asn1.DERObject getEncodedX509Certificate(java.security.cert.X509Certificate) -> a
org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi -> org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi:
    java.security.cert.CertPathBuilderResult engineBuild(java.security.cert.CertPathParameters) -> engineBuild
    java.security.cert.TrustAnchor findTrustAnchor(java.security.cert.X509Certificate,java.util.Set) -> a
    java.util.Collection findCertificates(java.security.cert.CertSelector,java.util.List) -> a
    java.security.cert.X509Certificate findIssuer(java.security.cert.X509Certificate,java.util.List) -> a
org.bouncycastle.jce.provider.PKIXCertPathValidatorSpi -> org.bouncycastle.jce.provider.PKIXCertPathValidatorSpi:
    java.lang.String CERTIFICATE_POLICIES -> a
    java.lang.String POLICY_MAPPINGS -> b
    java.lang.String INHIBIT_ANY_POLICY -> c
    java.lang.String ISSUING_DISTRIBUTION_POINT -> d
    java.lang.String DELTA_CRL_INDICATOR -> e
    java.lang.String POLICY_CONSTRAINTS -> f
    java.lang.String BASIC_CONSTRAINTS -> g
    java.lang.String SUBJECT_ALTERNATIVE_NAME -> h
    java.lang.String NAME_CONSTRAINTS -> i
    java.lang.String KEY_USAGE -> j
    java.lang.String CRL_NUMBER -> k
    org.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String) -> a
    boolean withinDNSubtree(org.bouncycastle.asn1.ASN1Sequence,org.bouncycastle.asn1.ASN1Sequence) -> a
    void checkPermittedDN(java.util.HashSet,org.bouncycastle.asn1.ASN1Sequence) -> a
    void checkExcludedDN(java.util.HashSet,org.bouncycastle.asn1.ASN1Sequence) -> b
    java.util.HashSet intersectDN(java.util.HashSet,org.bouncycastle.asn1.ASN1Sequence) -> c
    java.util.HashSet unionDN(java.util.HashSet,org.bouncycastle.asn1.ASN1Sequence) -> d
    java.util.HashSet intersectEmail(java.util.HashSet,java.lang.String) -> a
    java.util.HashSet unionEmail(java.util.HashSet,java.lang.String) -> b
    void checkPermittedEmail(java.util.HashSet,java.lang.String) -> c
    void checkExcludedEmail(java.util.HashSet,java.lang.String) -> d
    org.bouncycastle.jce.provider.PKIXPolicyNode removePolicyNode(org.bouncycastle.jce.provider.PKIXPolicyNode,java.util.ArrayList[],org.bouncycastle.jce.provider.PKIXPolicyNode) -> a
    void removePolicyNodeRecurse(java.util.ArrayList[],org.bouncycastle.jce.provider.PKIXPolicyNode) -> a
    boolean isSelfIssued(java.security.cert.X509Certificate) -> a
    boolean isAnyPolicy(java.util.Set) -> a
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier(java.security.PublicKey) -> a
    java.util.Set getQualifierSet(org.bouncycastle.asn1.ASN1Sequence) -> a
    boolean processCertD1i(int,java.util.ArrayList[],org.bouncycastle.asn1.DERObjectIdentifier,java.util.Set) -> a
    void processCertD1ii(int,java.util.ArrayList[],org.bouncycastle.asn1.DERObjectIdentifier,java.util.Set) -> b
    java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters) -> engineValidate
    java.util.Collection findCRLs(java.security.cert.X509CRLSelector,java.util.List) -> a
    java.security.cert.TrustAnchor findTrustAnchor(java.security.cert.X509Certificate,java.util.Set) -> a
org.bouncycastle.jce.provider.PKIXPolicyNode -> org.bouncycastle.jce.provider.PKIXPolicyNode:
    java.util.List children -> a
    int depth -> b
    java.util.Set expectedPolicies -> c
    java.security.cert.PolicyNode parent -> d
    java.util.Set policyQualifiers -> e
    java.lang.String validPolicy -> f
    boolean critical -> g
    void addChild(org.bouncycastle.jce.provider.PKIXPolicyNode) -> a
    java.util.Iterator getChildren() -> getChildren
    int getDepth() -> getDepth
    java.util.Set getExpectedPolicies() -> getExpectedPolicies
    java.security.cert.PolicyNode getParent() -> getParent
    java.util.Set getPolicyQualifiers() -> getPolicyQualifiers
    java.lang.String getValidPolicy() -> getValidPolicy
    boolean hasChildren() -> a
    boolean isCritical() -> isCritical
    void removeChild(org.bouncycastle.jce.provider.PKIXPolicyNode) -> b
    void setCritical(boolean) -> a
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> a
    java.lang.Object clone() -> clone
    org.bouncycastle.jce.provider.PKIXPolicyNode copy() -> b
org.bouncycastle.jce.provider.RSAUtil -> org.bouncycastle.jce.provider.RSAUtil:
    org.bouncycastle.crypto.params.RSAKeyParameters generatePublicKeyParameter(java.security.interfaces.RSAPublicKey) -> a
    org.bouncycastle.crypto.params.RSAKeyParameters generatePrivateKeyParameter(java.security.interfaces.RSAPrivateKey) -> a
org.bouncycastle.jce.provider.WrapCipherSpi -> org.bouncycastle.jce.provider.WrapCipherSpi:
    java.lang.Class[] availableSpecs -> a
    int pbeType -> b
    int pbeHash -> c
    int pbeKeySize -> d
    int pbeIvSize -> e
    java.security.AlgorithmParameters engineParams -> f
    org.bouncycastle.crypto.Wrapper wrapEngine -> g
    java.lang.Class class$javax$crypto$spec$IvParameterSpec -> h
    java.lang.Class class$javax$crypto$spec$PBEParameterSpec -> i
    java.lang.Class class$javax$crypto$spec$RC2ParameterSpec -> j
    java.lang.Class class$javax$crypto$spec$RC5ParameterSpec -> k
    int engineGetBlockSize() -> engineGetBlockSize
    byte[] engineGetIV() -> engineGetIV
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
    byte[] engineWrap(java.security.Key) -> engineWrap
    java.security.Key engineUnwrap(byte[],java.lang.String,int) -> engineUnwrap
    java.lang.Class class$(java.lang.String) -> a
org.bouncycastle.jce.provider.WrapCipherSpi$AESWrap -> org.bouncycastle.jce.provider.WrapCipherSpi$AESWrap:
org.bouncycastle.jce.provider.WrapCipherSpi$DESEDEWrap -> org.bouncycastle.jce.provider.WrapCipherSpi$DESEDEWrap:
org.bouncycastle.jce.provider.WrapCipherSpi$RC2Wrap -> org.bouncycastle.jce.provider.WrapCipherSpi$RC2Wrap:
org.bouncycastle.jce.provider.X509CRLEntryObject -> org.bouncycastle.jce.provider.X509CRLEntryObject:
    org.bouncycastle.asn1.x509.TBSCertList$CRLEntry c -> a
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    java.util.Set getExtensionOIDs(boolean) -> a
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    byte[] getEncoded() -> getEncoded
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    java.util.Date getRevocationDate() -> getRevocationDate
    boolean hasExtensions() -> hasExtensions
    java.lang.String toString() -> toString
org.bouncycastle.jce.provider.X509CRLObject -> org.bouncycastle.jce.provider.X509CRLObject:
    org.bouncycastle.asn1.x509.CertificateList c -> a
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    java.util.Set getExtensionOIDs(boolean) -> a
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    byte[] getEncoded() -> getEncoded
    void verify(java.security.PublicKey) -> verify
    void verify(java.security.PublicKey,java.lang.String) -> verify
    int getVersion() -> getVersion
    java.security.Principal getIssuerDN() -> getIssuerDN
    javax.security.auth.x500.X500Principal getIssuerX500Principal() -> getIssuerX500Principal
    java.util.Date getThisUpdate() -> getThisUpdate
    java.util.Date getNextUpdate() -> getNextUpdate
    java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger) -> getRevokedCertificate
    java.util.Set getRevokedCertificates() -> getRevokedCertificates
    byte[] getTBSCertList() -> getTBSCertList
    byte[] getSignature() -> getSignature
    java.lang.String getSigAlgName() -> getSigAlgName
    java.lang.String getSigAlgOID() -> getSigAlgOID
    byte[] getSigAlgParams() -> getSigAlgParams
    java.lang.String toString() -> toString
    boolean isRevoked(java.security.cert.Certificate) -> isRevoked
org.bouncycastle.jce.provider.X509CertificateObject -> org.bouncycastle.jce.provider.X509CertificateObject:
    org.bouncycastle.asn1.x509.X509CertificateStructure c -> a
    java.util.Hashtable pkcs12Attributes -> b
    java.util.Vector pkcs12Ordering -> c
    void checkValidity() -> checkValidity
    void checkValidity(java.util.Date) -> checkValidity
    int getVersion() -> getVersion
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    java.security.Principal getIssuerDN() -> getIssuerDN
    javax.security.auth.x500.X500Principal getIssuerX500Principal() -> getIssuerX500Principal
    java.security.Principal getSubjectDN() -> getSubjectDN
    javax.security.auth.x500.X500Principal getSubjectX500Principal() -> getSubjectX500Principal
    java.util.Date getNotBefore() -> getNotBefore
    java.util.Date getNotAfter() -> getNotAfter
    byte[] getTBSCertificate() -> getTBSCertificate
    byte[] getSignature() -> getSignature
    java.lang.String getSigAlgName() -> getSigAlgName
    java.lang.String getSigAlgOID() -> getSigAlgOID
    byte[] getSigAlgParams() -> getSigAlgParams
    boolean[] getIssuerUniqueID() -> getIssuerUniqueID
    boolean[] getSubjectUniqueID() -> getSubjectUniqueID
    boolean[] getKeyUsage() -> getKeyUsage
    int getBasicConstraints() -> getBasicConstraints
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    byte[] getExtensionBytes(java.lang.String) -> a
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    java.security.PublicKey getPublicKey() -> getPublicKey
    byte[] getEncoded() -> getEncoded
    void setBagAttribute(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.DEREncodable) -> a
    org.bouncycastle.asn1.DEREncodable getBagAttribute(org.bouncycastle.asn1.DERObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
    java.lang.String toString() -> toString
    void verify(java.security.PublicKey) -> verify
    void verify(java.security.PublicKey,java.lang.String) -> verify
org.bouncycastle.jce.spec.ECKeySpec -> org.bouncycastle.jce.spec.ECKeySpec:
    org.bouncycastle.jce.spec.ECParameterSpec spec -> a
    org.bouncycastle.jce.spec.ECParameterSpec getParams() -> b
org.bouncycastle.jce.spec.ECNamedCurveParameterSpec -> org.bouncycastle.jce.spec.ECNamedCurveParameterSpec:
    java.lang.String name -> a
    java.lang.String getName() -> f
org.bouncycastle.jce.spec.ECParameterSpec -> org.bouncycastle.jce.spec.ECParameterSpec:
    org.bouncycastle.math.ec.ECCurve curve -> a
    byte[] seed -> b
    org.bouncycastle.math.ec.ECPoint G -> c
    java.math.BigInteger n -> d
    java.math.BigInteger h -> e
    org.bouncycastle.math.ec.ECCurve getCurve() -> a
    org.bouncycastle.math.ec.ECPoint getG() -> b
    java.math.BigInteger getN() -> c
    java.math.BigInteger getH() -> d
    byte[] getSeed() -> e
org.bouncycastle.jce.spec.ECPrivateKeySpec -> org.bouncycastle.jce.spec.ECPrivateKeySpec:
    java.math.BigInteger d -> a
    java.math.BigInteger getD() -> a
org.bouncycastle.jce.spec.ECPublicKeySpec -> org.bouncycastle.jce.spec.ECPublicKeySpec:
    org.bouncycastle.math.ec.ECPoint q -> a
    org.bouncycastle.math.ec.ECPoint getQ() -> a
org.bouncycastle.jce.spec.ElGamalGenParameterSpec -> org.bouncycastle.jce.spec.ElGamalGenParameterSpec:
org.bouncycastle.jce.spec.ElGamalKeySpec -> org.bouncycastle.jce.spec.ElGamalKeySpec:
    org.bouncycastle.jce.spec.ElGamalParameterSpec spec -> a
    org.bouncycastle.jce.spec.ElGamalParameterSpec getParams() -> b
org.bouncycastle.jce.spec.ElGamalParameterSpec -> org.bouncycastle.jce.spec.ElGamalParameterSpec:
    java.math.BigInteger p -> a
    java.math.BigInteger g -> b
    java.math.BigInteger getP() -> a
    java.math.BigInteger getG() -> b
org.bouncycastle.jce.spec.ElGamalPrivateKeySpec -> org.bouncycastle.jce.spec.ElGamalPrivateKeySpec:
    java.math.BigInteger x -> a
    java.math.BigInteger getX() -> a
org.bouncycastle.jce.spec.ElGamalPublicKeySpec -> org.bouncycastle.jce.spec.ElGamalPublicKeySpec:
    java.math.BigInteger y -> a
    java.math.BigInteger getY() -> a
org.bouncycastle.jce.spec.IEKeySpec -> org.bouncycastle.jce.spec.IEKeySpec:
    java.security.PublicKey pubKey -> a
    java.security.PrivateKey privKey -> b
    java.security.PublicKey getPublic() -> a
    java.security.PrivateKey getPrivate() -> b
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
org.bouncycastle.jce.spec.IESParameterSpec -> org.bouncycastle.jce.spec.IESParameterSpec:
    byte[] derivation -> a
    byte[] encoding -> b
    int macKeySize -> c
    byte[] getDerivationV() -> a
    byte[] getEncodingV() -> b
    int getMacKeySize() -> c
org.bouncycastle.math.ec.ECConstants -> org.bouncycastle.math.ec.ECConstants:
    java.math.BigInteger ZERO -> a
    java.math.BigInteger ONE -> b
org.bouncycastle.math.ec.ECCurve -> org.bouncycastle.math.ec.ECCurve:
    java.math.BigInteger q -> a
    org.bouncycastle.math.ec.ECFieldElement a -> b
    org.bouncycastle.math.ec.ECFieldElement b -> c
    org.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.bouncycastle.math.ec.ECPoint decodePoint(byte[]) -> a
    org.bouncycastle.math.ec.ECFieldElement getA() -> a
    org.bouncycastle.math.ec.ECFieldElement getB() -> b
org.bouncycastle.math.ec.ECCurve$Fp -> org.bouncycastle.math.ec.ECCurve$Fp:
    java.math.BigInteger getQ() -> c
    org.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.bouncycastle.math.ec.ECPoint decodePoint(byte[]) -> a
org.bouncycastle.math.ec.ECFieldElement -> org.bouncycastle.math.ec.ECFieldElement:
    java.math.BigInteger x -> c
    java.math.BigInteger p -> d
    java.math.BigInteger toBigInteger() -> d
    boolean equals(java.lang.Object) -> equals
    org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement) -> a
    org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement) -> b
    org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement) -> c
    org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement) -> d
    org.bouncycastle.math.ec.ECFieldElement negate() -> a
    org.bouncycastle.math.ec.ECFieldElement square() -> b
    org.bouncycastle.math.ec.ECFieldElement sqrt() -> c
org.bouncycastle.math.ec.ECFieldElement$Fp -> org.bouncycastle.math.ec.ECFieldElement$Fp:
    org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement) -> a
    org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement) -> b
    org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement) -> c
    org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement) -> d
    org.bouncycastle.math.ec.ECFieldElement negate() -> a
    org.bouncycastle.math.ec.ECFieldElement square() -> b
    org.bouncycastle.math.ec.ECFieldElement sqrt() -> c
org.bouncycastle.math.ec.ECPoint -> org.bouncycastle.math.ec.ECPoint:
    org.bouncycastle.math.ec.ECCurve curve -> a
    org.bouncycastle.math.ec.ECFieldElement x -> b
    org.bouncycastle.math.ec.ECFieldElement y -> c
    org.bouncycastle.math.ec.ECFieldElement getX() -> c
    org.bouncycastle.math.ec.ECFieldElement getY() -> d
    boolean equals(java.lang.Object) -> equals
    byte[] getEncoded() -> a
    org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint) -> a
    org.bouncycastle.math.ec.ECPoint subtract(org.bouncycastle.math.ec.ECPoint) -> b
    org.bouncycastle.math.ec.ECPoint twice() -> b
    org.bouncycastle.math.ec.ECPoint multiply(java.math.BigInteger) -> a
org.bouncycastle.math.ec.ECPoint$Fp -> org.bouncycastle.math.ec.ECPoint$Fp:
    byte[] getEncoded() -> a
    org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint) -> a
    org.bouncycastle.math.ec.ECPoint twice() -> b
    org.bouncycastle.math.ec.ECPoint subtract(org.bouncycastle.math.ec.ECPoint) -> b
    org.bouncycastle.math.ec.ECPoint multiply(java.math.BigInteger) -> a
org.bouncycastle.ocsp.BasicOCSPResp -> org.bouncycastle.ocsp.BasicOCSPResp:
org.bouncycastle.ocsp.BasicOCSPRespGenerator -> org.bouncycastle.ocsp.BasicOCSPRespGenerator:
    java.util.Hashtable algorithms -> a
org.bouncycastle.ocsp.CertificateID -> org.bouncycastle.ocsp.CertificateID:
    java.lang.String HASH_SHA1 -> a
    org.bouncycastle.asn1.ocsp.CertID id -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.ocsp.CertificateStatus -> org.bouncycastle.ocsp.CertificateStatus:
org.bouncycastle.ocsp.OCSPException -> org.bouncycastle.ocsp.OCSPException:
org.bouncycastle.ocsp.OCSPReq -> org.bouncycastle.ocsp.OCSPReq:
org.bouncycastle.ocsp.OCSPReqGenerator -> org.bouncycastle.ocsp.OCSPReqGenerator:
    java.util.ArrayList list -> a
    org.bouncycastle.asn1.x509.GeneralName requestorName -> b
    org.bouncycastle.asn1.x509.X509Extensions requestExtensions -> c
    java.util.Hashtable algorithms -> d
org.bouncycastle.ocsp.OCSPResp -> org.bouncycastle.ocsp.OCSPResp:
org.bouncycastle.ocsp.OCSPRespGenerator -> org.bouncycastle.ocsp.OCSPRespGenerator:
org.bouncycastle.ocsp.OCSPRespStatus -> org.bouncycastle.ocsp.OCSPRespStatus:
org.bouncycastle.ocsp.Req -> org.bouncycastle.ocsp.Req:
org.bouncycastle.ocsp.RespData -> org.bouncycastle.ocsp.RespData:
org.bouncycastle.ocsp.RespID -> org.bouncycastle.ocsp.RespID:
    org.bouncycastle.asn1.ocsp.ResponderID id -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.ocsp.RevokedStatus -> org.bouncycastle.ocsp.RevokedStatus:
org.bouncycastle.ocsp.SingleResp -> org.bouncycastle.ocsp.SingleResp:
org.bouncycastle.ocsp.UnknownStatus -> org.bouncycastle.ocsp.UnknownStatus:
org.bouncycastle.ocsp.test.OCSPTest -> org.bouncycastle.ocsp.test.OCSPTest:
    byte[] testResp1 -> a
    byte[] testResp2 -> b
org.bouncycastle.ocsp.test.OCSPTestUtil -> org.bouncycastle.ocsp.test.OCSPTestUtil:
    java.security.SecureRandom rand -> a
    java.security.KeyPairGenerator kpg -> b
    java.math.BigInteger serialNumber -> c
org.bouncycastle.openssl.PEMReader -> org.bouncycastle.openssl.PEMReader:
org.bouncycastle.openssl.PasswordFinder -> org.bouncycastle.openssl.PasswordFinder:
org.bouncycastle.openssl.test.ReaderTest -> org.bouncycastle.openssl.test.ReaderTest:
org.bouncycastle.util.Arrays -> org.bouncycastle.util.Arrays:
org.bouncycastle.util.encoders.Base64 -> org.bouncycastle.util.encoders.Base64:
    byte[] encodingTable -> a
    byte[] decodingTable -> b
    boolean ignore(char) -> a
    byte[] decode(java.lang.String) -> a
    int decode(java.lang.String,java.io.OutputStream) -> a
org.bouncycastle.util.encoders.BufferedDecoder -> org.bouncycastle.util.encoders.BufferedDecoder:
org.bouncycastle.util.encoders.BufferedEncoder -> org.bouncycastle.util.encoders.BufferedEncoder:
org.bouncycastle.util.encoders.Hex -> org.bouncycastle.util.encoders.Hex:
    org.bouncycastle.util.encoders.HexTranslator encoder -> a
    byte[] encode(byte[]) -> a
    byte[] encode(byte[],int,int) -> a
    byte[] decode(java.lang.String) -> a
org.bouncycastle.util.encoders.HexTranslator -> org.bouncycastle.util.encoders.HexTranslator:
    byte[] hexTable -> a
    int encode$3f34d133(byte[],int,int,byte[]) -> a
org.bouncycastle.util.encoders.Translator -> org.bouncycastle.util.encoders.Translator:
org.bouncycastle.util.encoders.test.EncoderTest -> org.bouncycastle.util.encoders.test.EncoderTest:
org.bouncycastle.util.test.SimpleTestResult -> org.bouncycastle.util.test.SimpleTestResult:
    java.lang.String message -> a
    java.lang.String toString() -> toString
org.bouncycastle.util.test.Test -> org.bouncycastle.util.test.Test:
org.bouncycastle.util.test.TestResult -> org.bouncycastle.util.test.TestResult:
